import{_ as n,o as a,c as s,e as t}from"./app.26c798e2.js";const e={},p=t(`<h2 id="es10-2019" tabindex="-1"><a class="header-anchor" href="#es10-2019" aria-hidden="true">#</a> ES10-2019</h2><h3 id="_1-array-prototype-flat" tabindex="-1"><a class="header-anchor" href="#_1-array-prototype-flat" aria-hidden="true">#</a> 1. Array.prototype.flat()</h3><ul><li>flat() 方法会递归地将一个嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-array-prototype-flatmap" tabindex="-1"><a class="header-anchor" href="#_2-array-prototype-flatmap" aria-hidden="true">#</a> 2. Array.prototype.flatMap()</h3><ul><li>flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值 1 的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率更高。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

arr1<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [2, 4, 6, 8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-string-prototype-trimstart-string-prototype-trimend" tabindex="-1"><a class="header-anchor" href="#_3-string-prototype-trimstart-string-prototype-trimend" aria-hidden="true">#</a> 3. String.prototype.trimStart() String.prototype.trimEnd()</h3><ul><li><p>trimStart() 方法从一个字符串的开头删除空白字符。trimLeft() 是该方法的别名。</p></li><li><p>trimEnd() 方法从一个字符串的末尾删除空白字符。trimRight() 是该方法的别名。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;   foo  &#39;</span><span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;foo  &#39;</span>
<span class="token string">&#39;   foo  &#39;</span><span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;   foo&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-object-fromentries" tabindex="-1"><a class="header-anchor" href="#_4-object-fromentries" aria-hidden="true">#</a> 4. Object.fromEntries()</h3><ul><li>Object.fromEntries() 方法是 Object.entries() 的逆操作，用于将一个键值对数组转为对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// { foo: &quot;bar&quot;, baz: 42 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-symbol-prototype-description" tabindex="-1"><a class="header-anchor" href="#_5-symbol-prototype-description" aria-hidden="true">#</a> 5. Symbol.prototype.description</h3><ul><li>Symbol.prototype.description 方法返回一个字符串，表示该 Symbol 对象的描述。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>

sym<span class="token punctuation">.</span>description <span class="token comment">// &quot;foo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-function-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#_6-function-prototype-tostring" aria-hidden="true">#</a> 6. Function.prototype.toString()</h3><ul><li>Function.prototype.toString() 方法返回一个字符串，表示指定的函数的源代码。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">123</span>
<span class="token punctuation">}</span>

foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;function foo() { return 123 }&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-globalthis" tabindex="-1"><a class="header-anchor" href="#_7-globalthis" aria-hidden="true">#</a> 7. globalThis</h3><ul><li>globalThis 属性提供了对全局 this 值的标准化访问方法。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在浏览器中</span>

globalThis <span class="token operator">===</span> window <span class="token comment">// true</span>

<span class="token comment">// 在 Web Workers 中</span>

globalThis <span class="token operator">===</span> self <span class="token comment">// true</span>

<span class="token comment">// 在 Node.js 中</span>

globalThis <span class="token operator">===</span> global <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[p];function i(c,l){return a(),s("div",null,o)}const u=n(e,[["render",i],["__file","index.html.vue"]]);export{u as default};
