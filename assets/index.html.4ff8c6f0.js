import{_ as o,r as l,o as p,c as i,a as n,b as s,d as e,e as t}from"./app.26c798e2.js";const c={},r=t(`<h2 id="json-server-相关参数" tabindex="-1"><a class="header-anchor" href="#json-server-相关参数" aria-hidden="true">#</a> json-server 相关参数</h2><ul><li><p>语法： <code>json-server [options] &lt;source&gt;</code></p></li><li><p>选项：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">简写</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">--config</td><td style="text-align:left;">-c</td><td style="text-align:left;">指定配置文件</td><td style="text-align:left;">指定配置文件</td></tr><tr><td style="text-align:left;">--port</td><td style="text-align:left;">-p</td><td style="text-align:left;">设置端口 [默认值: 3000]</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">--host</td><td style="text-align:left;">-H</td><td style="text-align:left;">设置域 [默认值: &quot;0.0.0.0&quot;]</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">--watch</td><td style="text-align:left;">-w</td><td style="text-align:left;">Watch file(s)</td><td style="text-align:left;">是否监听</td></tr><tr><td style="text-align:left;">--routes</td><td style="text-align:left;">-r</td><td style="text-align:left;">指定自定义路由</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">--middlewares</td><td style="text-align:left;">-m</td><td style="text-align:left;">指定中间件 files</td><td style="text-align:left;">[数组]</td></tr><tr><td style="text-align:left;">--static</td><td style="text-align:left;">-s</td><td style="text-align:left;">静态文件目录</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">--read-only</td><td style="text-align:left;">-r-o</td><td style="text-align:left;">只允许 get 请求</td><td style="text-align:left;">布尔值</td></tr><tr><td style="text-align:left;">--no-cors</td><td style="text-align:left;">--nc</td><td style="text-align:left;">是否禁止跨域请求</td><td style="text-align:left;">布尔值</td></tr><tr><td style="text-align:left;">-no-gzip</td><td style="text-align:left;">--ng</td><td style="text-align:left;">是否开启 gzip 压缩</td><td style="text-align:left;">布尔值</td></tr><tr><td style="text-align:left;">--snapshots</td><td style="text-align:left;">-S</td><td style="text-align:left;">设置截图目录</td><td style="text-align:left;">默认值为当前目录[&quot;.&quot;]</td></tr><tr><td style="text-align:left;">--delay</td><td style="text-align:left;">-d</td><td style="text-align:left;">添加延迟输出数据</td><td style="text-align:left;">默认值 ms</td></tr><tr><td style="text-align:left;">--id</td><td style="text-align:left;">-i</td><td style="text-align:left;">设置数据库 id 属性索引（_id）</td><td style="text-align:left;">[默认值: &quot;id&quot;]</td></tr><tr><td style="text-align:left;">--foreignKeySuffix</td><td style="text-align:left;">--fks</td><td style="text-align:left;">设置外键</td><td style="text-align:left;">(e.g. _id as in post_id)</td></tr><tr><td style="text-align:left;">--help</td><td style="text-align:left;">-h</td><td style="text-align:left;">帮助信息</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">--version</td><td style="text-align:left;">-v</td><td style="text-align:left;">显示版本号</td><td style="text-align:left;"></td></tr></tbody></table></li></ul><h2 id="动态生成模拟数据" tabindex="-1"><a class="header-anchor" href="#动态生成模拟数据" aria-hidden="true">#</a> 动态生成模拟数据</h2><ul><li><code>json-server --watch app.js</code> 结合 <code>mockjs</code> 生成模拟数据</li></ul><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><h3 id="默认的路由" tabindex="-1"><a class="header-anchor" href="#默认的路由" aria-hidden="true">#</a> 默认的路由</h3><ul><li><code>json-server</code>为提供了<code>GET</code>,<code>POST</code>, <code>PUT</code>, <code>PATCH</code> ,<code>DELETE</code>等请求的 API,分别对应数据中的所有类型的实体。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 获取所有的课程信息</span>
GET    /course

<span class="token comment"># 获取id=1001的课程信息</span>
GET    /course/1001

<span class="token comment"># 获取具体课程信息id=1001</span>
GET    /course?id<span class="token operator">=</span><span class="token number">1001</span>

<span class="token comment"># 添加课程信息，请求body中必须包含course的属性数据，json-server自动保存。</span>
POST   /course

<span class="token comment"># 修改课程，请求body中必须包含course的属性数据</span>
PUT    /course/1
PATCH  /course/1

<span class="token comment"># 删除课程信息</span>
DELETE /course/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义路由" tabindex="-1"><a class="header-anchor" href="#自定义路由" aria-hidden="true">#</a> 自定义路由</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>json-server <span class="token parameter variable">--watch</span> <span class="token parameter variable">--routes</span> route.json db.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>route.json</code> 文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;/api/*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/$1&quot;</span><span class="token punctuation">,</span> <span class="token comment">//   /api/course   &lt;==&gt;  /course</span>
  <span class="token property">&quot;/:resource/:id/show&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/:resource/:id&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;/posts/:category&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/posts?category=:category&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;/articles\\\\?id=:id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/posts/:id&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义配置文件" tabindex="-1"><a class="header-anchor" href="#自定义配置文件" aria-hidden="true">#</a> 自定义配置文件</h2><ul><li><code>json-server.json</code> 文件</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
  <span class="token property">&quot;host&quot;</span><span class="token operator">:</span> &quot;<span class="token punctuation">,</span>
  <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;routes&quot;</span><span class="token operator">:</span> <span class="token string">&quot;route.json&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;middlewares&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;middlewares.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;static&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./public&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;read-only&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;no-cors&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;no-gzip&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;snapshots&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./snapshots&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;delay&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;foreignKeySuffix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Id&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;help&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤查询" tabindex="-1"><a class="header-anchor" href="#过滤查询" aria-hidden="true">#</a> 过滤查询</h2><ul><li>查询数据，可以额外提供</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
GET /posts?title<span class="token operator">=</span>json-server<span class="token operator">&amp;</span><span class="token assign-left variable">author</span><span class="token operator">=</span>typicode
GET /posts?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">2</span>

<span class="token comment"># 可以用 . 访问更深层的属性。</span>
GET /comments?author.name<span class="token operator">=</span>typicode
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>还可以使用一些判断条件作为过滤查询的辅助。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /posts?views_gte<span class="token operator">=</span><span class="token number">10</span><span class="token operator">&amp;</span><span class="token assign-left variable">views_lte</span><span class="token operator">=</span><span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可以用的拼接条件为： <ul><li><code>_gte</code> : 大于等于</li><li><code>_lte</code> : 小于等于</li><li><code>_ne</code> : 不等于</li><li><code>_like</code> : 包含</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /course?id_ne<span class="token operator">=</span><span class="token number">1</span>
GET /course?id_lte<span class="token operator">=</span><span class="token number">100</span>
GET /course?title_like<span class="token operator">=</span>server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> 分页查询</h2><ul><li>默认后台处理分页参数为： <code>_page</code> 第几页， <code>_limit</code>一页多少条。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /course?_page<span class="token operator">=</span><span class="token number">7</span>
GET /course?_page<span class="token operator">=</span><span class="token number">7</span><span class="token operator">&amp;</span><span class="token assign-left variable">_limit</span><span class="token operator">=</span><span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认一页 10 条数据</li><li>后台会返回总条数，总条数的数据在响应头:<code>X-Total-Count</code> 中。</li></ul><h2 id="排序查询" tabindex="-1"><a class="header-anchor" href="#排序查询" aria-hidden="true">#</a> 排序查询</h2><ul><li>参数： <code>_sort</code>设定排序的字段</li><li>参数： <code>_order</code> 设定排序的方式（默认升序）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /course?_page<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">_limit</span><span class="token operator">=</span><span class="token number">10</span><span class="token operator">&amp;</span><span class="token assign-left variable">_sort</span><span class="token operator">=</span>id<span class="token operator">&amp;</span><span class="token assign-left variable">_order</span><span class="token operator">=</span>asc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>支持多个字段排序</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /posts?_sort<span class="token operator">=</span>user,views<span class="token operator">&amp;</span><span class="token assign-left variable">_order</span><span class="token operator">=</span>desc,asc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="任意切片数据" tabindex="-1"><a class="header-anchor" href="#任意切片数据" aria-hidden="true">#</a> 任意切片数据</h2><ul><li>参数： <code>_start</code> 设定切片的起始位置</li><li>参数： <code>_end</code> 设定切片的结束位置</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /course?_start<span class="token operator">=</span><span class="token number">20</span><span class="token operator">&amp;</span><span class="token assign-left variable">_end</span><span class="token operator">=</span><span class="token number">30</span>
GET /course/1/comments?_start<span class="token operator">=</span><span class="token number">20</span><span class="token operator">&amp;</span><span class="token assign-left variable">_end</span><span class="token operator">=</span><span class="token number">30</span>
GET /course/1/comments?_start<span class="token operator">=</span><span class="token number">20</span><span class="token operator">&amp;</span><span class="token assign-left variable">_limit</span><span class="token operator">=</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="全文检索" tabindex="-1"><a class="header-anchor" href="#全文检索" aria-hidden="true">#</a> 全文检索</h2><ul><li>可以通过<code>q</code>参数进行全文检索，例如：<code>GET /posts?q=internet</code></li></ul><h2 id="实体关联" tabindex="-1"><a class="header-anchor" href="#实体关联" aria-hidden="true">#</a> 实体关联</h2><h3 id="关联子实体" tabindex="-1"><a class="header-anchor" href="#关联子实体" aria-hidden="true">#</a> 关联子实体</h3><ul><li>包含 children 的对象, 添加<code>_embed</code>。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /posts?_embed<span class="token operator">=</span>comments
GET /posts/1?_embed<span class="token operator">=</span>comments
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关联父实体" tabindex="-1"><a class="header-anchor" href="#关联父实体" aria-hidden="true">#</a> 关联父实体</h3><ul><li>包含 parent 的对象, 添加<code>_expand</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /comments?_expand<span class="token operator">=</span>post
GET /comments/1?_expand<span class="token operator">=</span>post
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他高级用法" tabindex="-1"><a class="header-anchor" href="#其他高级用法" aria-hidden="true">#</a> 其他高级用法</h2>`,44),d=n("code",null,"json-server",-1),u=n("code",null,"express",-1),k={href:"https://github.com/typicode/json-server",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("p",null,"自定义路由")],-1),m=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsonServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;json-server&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token string">&#39;db.json&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> middlewares <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middlewares<span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/echo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>jsonServer<span class="token punctuation">.</span>bodyParser<span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>createdAt <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;JSON Server is running&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义输出内容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义用户校验</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsonServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;json-server&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token string">&#39;db.json&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> middlewares <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middlewares<span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAuthorized</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// add your authorization logic here</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// continue to JSON Server router</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">sendStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;JSON Server is running&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,6),b={href:"https://github.com/typicode/json-server",target:"_blank",rel:"noopener noreferrer"},h={href:"http://mockjs.com/examples.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/TKY666/article/details/126215513",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.bilibili.com/video/BV1JV4y1Y7Wt",target:"_blank",rel:"noopener noreferrer"};function y(x,q){const a=l("ExternalLinkIcon");return p(),i("div",null,[r,n("ul",null,[n("li",null,[n("p",null,[d,s("本身就是依赖"),u,s("开发而来，可以进行深度定制。细节就不展开，具体详情请参考"),n("a",k,[s("官网"),e(a)])])]),v]),m,n("ul",null,[n("li",null,[n("a",b,[s("官网"),e(a)])]),n("li",null,[n("a",h,[s("mockjs"),e(a)])]),n("li",null,[n("a",g,[s("mockjs 参考资料"),e(a)])]),n("li",null,[n("a",f,[s("mockJs 妈妈再也不用担心我没有后端接口啦"),e(a)])])])])}const j=o(c,[["render",y],["__file","index.html.vue"]]);export{j as default};
