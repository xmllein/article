import{_ as d,r as l,o as a,c as p,a as e,b as o,d as t,e as c}from"./app.26c798e2.js";const r="/article/images/2021_uni-app/img/2021-12-15-18-24-02.png",s="/article/images/2021_uni-app/img/2021-12-15-18-57-35.png",n="/article/images/2021_uni-app/img/2021-12-15-19-05-18.png",m="/article/images/2021_uni-app/img/2021-12-15-20-03-13.png",u="/article/images/2021_uni-app/img/2021-12-15-20-06-38.png",h="/article/images/2021_uni-app/img/2021-12-15-20-08-05.png",g="/article/images/2021_uni-app/img/2021-12-15-20-08-50.png",_="/article/images/2021_uni-app/img/2021-12-15-20-15-10.png",b="/article/images/2021_uni-app/img/2021-12-16-17-16-20.png",k="/article/images/2021_uni-app/img/2021-12-16-17-17-49.png",f="/article/images/2021_uni-app/img/2021-12-16-17-32-24.png",x="/article/images/2021_uni-app/img/2021-12-16-17-34-05.png",v="/article/images/2021_uni-app/img/2021-12-16-17-34-45.png",q="/article/images/2021_uni-app/img/2021-12-16-17-38-03.png",w="/article/images/2021_uni-app/img/2021-12-16-17-44-34.png",I="/article/images/2021_uni-app/img/2021-12-16-17-46-20.png",y="/article/images/2021_uni-app/img/2021-12-16-17-54-37.png",D="/article/images/2021_uni-app/img/2021-12-16-18-14-23.png",L="/article/images/2021_uni-app/img/2021-12-16-18-23-27.png",H="/article/images/2021_uni-app/img/2021-12-16-19-00-26.png",S="/article/images/2021_uni-app/img/2021-12-16-19-01-06.png",C="/article/images/2021_uni-app/img/2021-12-16-19-17-56.png",B="/article/images/2021_uni-app/img/2021-12-16-19-40-35.png",T="/article/images/2021_uni-app/img/2021-12-17-14-28-21.png",j="/article/images/2021_uni-app/img/2021-12-17-15-13-27.png",V="/article/images/2021_uni-app/img/2021-12-17-15-24-29.png",X="/article/images/2021_uni-app/img/2021-12-17-18-29-26.png",A="/article/images/2021_uni-app/img/2021-12-17-19-01-57.png",M="/article/images/2021_uni-app/img/2021-12-17-19-26-56.png",O="/article/images/2021_uni-app/img/2021-12-17-19-37-55.png",N="/article/images/2021_uni-app/img/2021-12-17-21-47-29.png",W="/article/images/2021_uni-app/img/2021-12-17-23-10-32.png",E="/article/images/2021_uni-app/img/2021-12-17-23-23-18.png",P="/article/images/2021_uni-app/img/2021-12-17-23-42-52.png",Q="/article/images/2021_uni-app/img/2021-12-18-15-51-11.png",F="/article/images/2021_uni-app/img/2021-12-18-15-54-18.png",z="/article/images/2021_uni-app/img/2021-12-18-19-29-45.png",$="/article/images/2021_uni-app/img/2021-12-18-17-26-41.png",U="/article/images/2021_uni-app/img/2021-12-18-19-23-10.png",G="/article/images/2021_uni-app/img/2021-12-19-13-26-24.png",J="/article/images/2021_uni-app/img/2021-12-19-15-54-56.png",R="/article/images/2021_uni-app/img/2021-12-19-18-08-06.png",K="/article/images/2021_uni-app/img/2021-12-19-18-18-40.png",Y="/article/images/2021_uni-app/img/2021-12-19-18-20-38.png",Z="/article/images/2021_uni-app/img/2021-12-19-18-15-35.png",ee="/article/images/2021_uni-app/img/2021-12-19-19-07-06.png",oe="/article/images/2021_uni-app/img/2021-12-19-19-32-47.png",ie="/article/images/2021_uni-app/img/2021-12-19-19-21-47.png",te="/article/images/2021_uni-app/img/2021-12-19-19-29-27.png",ce="/article/images/2021_uni-app/img/2021-12-20-12-18-44.png",de="/article/images/2021_uni-app/img/2021-12-20-16-18-14.png",le="/article/images/2021_uni-app/img/2021-12-20-16-33-24.png",ae="/article/images/2021_uni-app/img/2021-12-20-16-40-00.png",pe="/article/images/2021_uni-app/img/2021-12-20-16-54-01.png",re="/article/images/2021_uni-app/img/2021-12-20-22-54-44.png",se="/article/images/2021_uni-app/img/2021-12-20-23-05-51.png",ne={},me=c('<h1 id="_05-uniapp-开发-imoocblog" tabindex="-1"><a class="header-anchor" href="#_05-uniapp-开发-imoocblog" aria-hidden="true">#</a> 05-uniapp 开发 ImoocBlog</h1><h3 id="_1-开篇" tabindex="-1"><a class="header-anchor" href="#_1-开篇" aria-hidden="true">#</a> <mark>1）开篇</mark></h3><p>经过前面四个章节，我们已经完成了 <strong>微信小程序</strong> 的学习。那么从这一章开始我们就进入 <code>uniapp</code> 的项目开发之中。</p><p>整个 <code>uniapp</code> 阶段我们会完成一个正式的项目 <strong>慕课热搜</strong> ，以这个项目来作为 <code>uniapp</code> 学习阶段的的最终产出，同时通过这个项目来贯穿所有的 <code>uniapp</code> 知识点，可以让大家在学习的过程中不至于那么枯燥。</p><p>目前我们的项目已经上线了：</p><ol><li>微信小程序：微信 -&gt; 发现 -&gt; 小程序 -&gt; 搜索《慕课热搜》</li><li><code>H5</code> ：<code>https://imooc.blog.lgdsunday.club/#/</code></li></ol><p>那么现在：</p><ul><li>html、css、js、微信小程序，等基础知识</li><li>接口文档、最终效果、等各种项目需求</li></ul><p>各种前置条件已经全部准备就绪，项目开发即可开始！</p><h3 id="_2-uniapp-难吗" tabindex="-1"><a class="header-anchor" href="#_2-uniapp-难吗" aria-hidden="true">#</a> <mark>2）uniapp 难吗？</mark></h3><h4 id="_1、引言" tabindex="-1"><a class="header-anchor" href="#_1、引言" aria-hidden="true">#</a> <mark>1、引言</mark></h4><p>《慕课热搜》基于 <code>uniapp</code> 进行开发，关于 <code>uniapp</code> 的优点 -&gt; 在【课程导学】阶段已经描述过了，如果你忘了，那么你可以回过头去看一下。</p><p>这一小节我们来点实在的，光知道它好，不行。因为不是你的，它再好，对你而言也是没啥用的……</p><p>那么怎么才能学会它呢？或者说它难学吗？这才是这一小节我们需要说明的内容。</p><h4 id="_2、内容" tabindex="-1"><a class="header-anchor" href="#_2、内容" aria-hidden="true">#</a> <mark>2、内容</mark></h4>',15),ue={href:"https://uniapp.dcloud.io/",target:"_blank",rel:"noopener noreferrer"},he=c('<p>想要学习 <code>uniapp</code> 那么需要有三个前置条件：</p><blockquote><p>具备了这 3 个条件，学习 uni-app ，对你而言就是小菜一碟</p></blockquote><ol><li><code>html + css + js</code>： 这个相信大家都没有问题</li><li>微信小程序：这个我们已经在前面的章节非常详细的为大家讲解过了 -&gt; uni-app 借鉴了很多小程序的内容</li><li><code>vue</code>：可能有很多同学一看这个，心就凉了一截。我不会 <code>vue</code> 咋办啊。.. 没有关系！ 我敢把这个列出来，肯定就已经为大家想到了这么一点。 <code>vue</code> 的理念和 <strong>微信小程序</strong> 的理念有非常多相同的地方，在我们后面进行项目开发的过程中，遇到一些个别的语法时，我会为大家进行介绍的。</li></ol><p>总之，对于大家来说，这三个条件，如果你全部具备，那自然是最好的。</p><p>如果你只具备前两个条件，也不要担心，甚至可以说是更加幸运 -&gt; 为啥这么说？ -&gt; 因为接下来你将会在学会 <code>uniapp</code> 的同时，也会掌握 <code>vue</code> 的核心使用！</p><blockquote><p>学会 uni-app 难吗？ -&gt; uni-app 的语法可以简单理解成「vue 语法」和「小程序语法」的结合体 -&gt; 这显然不难！</p></blockquote><h3 id="_3-配置-uniapp-开发环境" tabindex="-1"><a class="header-anchor" href="#_3-配置-uniapp-开发环境" aria-hidden="true">#</a> <mark>3）配置 uniapp 开发环境</mark></h3><p>之前开发微信小程序之前，需要：</p><ol><li>申请小程序账号</li><li>下载微信小程序开发工具</li></ol><p>同样，在进行 uniapp 开发之前，我们也需要做类似这样的事情，也就是需要配置项目的开发环境</p><p>uniapp 项目的开发环境主要有两点：</p><ul><li>下载并安装开发者工具 HBuilder X</li><li>安装 sass 依赖 -&gt; 项目需要用到 sass 语法</li></ul><h4 id="_1、下载并安装开发工具" tabindex="-1"><a class="header-anchor" href="#_1、下载并安装开发工具" aria-hidden="true">#</a> <mark>1、下载并安装开发工具</mark></h4>',13),ge=e("code",null,"uniapp",-1),_e=e("code",null,"HBuilder X",-1),be={href:"https://www.dcloud.io/hbuilderx.html",target:"_blank",rel:"noopener noreferrer"},ke=c("<li>点击 <code>DOWNLOAD</code></li><li>选择 <code>App 开发版本</code>（因为我们要实现是慕课热搜） -&gt; 推荐使用正式版</li><li><code>Windows</code> 版本下载完成之后会得到一个 <code>zip</code> 的压缩包文件，解压完成即可使用 -&gt; 是一个便携版</li><li><code>MacOS</code> 版本下来完成会得到一个 <code>dmg</code> 的安装包，直接安装即可</li>",4),fe=c('<h4 id="_2、安装-sass-依赖" tabindex="-1"><a class="header-anchor" href="#_2、安装-sass-依赖" aria-hidden="true">#</a> <mark>2、安装 <code>sass</code> 依赖</mark></h4><p>因为我们的项目开发会使用 <code>sass</code>，所以需要为 <code>HBuilder X</code> 安装 <code>sass 编译器</code>。</p>',2),xe=e("li",null,[o("打开 "),e("code",null,"HBuilder X")],-1),ve={href:"https://ext.dcloud.net.cn/plugin?id=2046",target:"_blank",rel:"noopener noreferrer"},qe=e("ol",null,[e("li",null,[o("点击【使用 "),e("code",null,"HBuilderX"),o(" 导入插件】 -> 一定要去掉你浏览器的广告插件，不然，这是不会出现这个按钮的")]),e("li",null,[o("在弹出框中点击【打开 "),e("code",null,"HBuilderX"),o("】")])],-1),we=e("li",null,"点击【是】",-1),Ie=e("li",null,[o("此时会在 "),e("code",null,"HBuilderX"),o(" 右下角，提示你【正在下载】")],-1),ye=e("li",null,"等待完成即可",-1),De=c('<p><img src="'+r+'" alt="安装插件"></p><h3 id="_4-创建-imooc-blog" tabindex="-1"><a class="header-anchor" href="#_4-创建-imooc-blog" aria-hidden="true">#</a> <mark>4）创建 imooc-blog</mark></h3><p>本小节做两件事：</p><ol><li>创建项目 -&gt; 开发工具会自动帮我们生成目录结构，就像微信小程序开发者工具一样</li><li>了解项目基本组成结构</li></ol><h4 id="_1、创建-uni-app-项目" tabindex="-1"><a class="header-anchor" href="#_1、创建-uni-app-项目" aria-hidden="true">#</a> <mark>1、创建 uni-app 项目</mark></h4><p>打开 HBuilderX -&gt; 文件 -&gt; 新建 -&gt; 项目：</p><p><img src="'+s+'" alt="创建项目"></p><p>效果：</p><p><img src="'+n+`" alt="效果"></p><h4 id="_2、项目目录介绍" tabindex="-1"><a class="header-anchor" href="#_2、项目目录介绍" aria-hidden="true">#</a> <mark>2、项目目录介绍</mark></h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>├─pages // 页面存放文件夹，等同于 微信小程序中的 pages │ └─index.vue //
默认生成的页面 ├─static // 静态资源存放文件夹 └─uni_modules // uni-app 组件目录
│ └─uni-xxx // uni-app 所提供的业务组件，等同于 微信小程序中的组件 ├─App.vue //
应用配置文件，用来配置全局样式、生命周期函数等，等同于 微信小程序中的 app.js
└─main.js // 项目入口文件 -&gt; 初始化 Vue ├─mainfest.json //
配置应用名称、appid、logo、版本等打包信息， └─pages.json //
配置页面路径、窗口样式、tabBar 等页面类信息，等同于 微信小程序中的 app.json
└─uni.scss // uni-app 内置的常用样式变量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-运行项目到-微信开发者工具" tabindex="-1"><a class="header-anchor" href="#_5-运行项目到-微信开发者工具" aria-hidden="true">#</a> <mark>5）运行项目到 微信开发者工具</mark></h3><p><strong><code>uniapp</code> 支持 10 个平台，我们以 微信小程序 和 <code>h5</code> 平台为例子，进行演示。</strong></p><blockquote><p>为啥只适配这两个端？ -&gt; 因为其它平台很少使用，比如 360 小程序</p></blockquote><h4 id="_1、运行到-微信小程序" tabindex="-1"><a class="header-anchor" href="#_1、运行到-微信小程序" aria-hidden="true">#</a> <mark>1、运行到 微信小程序</mark></h4><ol><li>配置【微信开发工具】路径：工具 -&gt; 设置</li><li>设置【微信开发工具路径】：运行配置 -&gt; 微信开发者工具路径 -&gt; 输入微信开发者工具的安装路径，如「<code>D:/微信 web 开发者工具</code>」</li><li><strong>切记：</strong> 一定要在 <code>HBuilder X</code> 中双击打开你项目中的某一个文件（比如：<code>App.vue</code>）</li><li>运行到微信小程序：运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具</li><li>底部会提示编译</li><li>编译成功，微信小程序自动启动</li></ol><p>第一个问题：</p><p><img src="`+m+'" alt="问题"></p><p>在小程序开发者工具里边，把安全设置的服务端口给开启了：</p><p><img src="'+u+'" alt="开启端口"></p>',20),Le={href:"https://ask.dcloud.net.cn/question/65922",target:"_blank",rel:"noopener noreferrer"},He=c('<p>打开 IDE 成功：</p><p><img src="'+h+'" alt="IDE"></p><p>效果：</p><p><img src="'+g+'" alt="效果"></p><h4 id="_2、运行到浏览器" tabindex="-1"><a class="header-anchor" href="#_2、运行到浏览器" aria-hidden="true">#</a> <mark>2、运行到浏览器</mark></h4><ol><li><strong>切记：</strong> 一定要在 <code>HBuilder X</code> 中双击打开你项目中的某一个文件（比如：<code>App.vue</code>） -&gt; 不然浏览器是不认识的</li><li>无需配置，直接运行：运行 -&gt; 运行到浏览器 -&gt; Chrome</li><li>编译完成，浏览器自动打开，运行成功</li></ol><p><img src="'+_+'" alt="运行到浏览器"></p><blockquote><p>一般切换到手机调试模式</p></blockquote><hr><blockquote><p>在实际项目开发中，微信小程序占据了绝大多数的用户，而 H5 端是我们 web 前端常见的一种形式，所以，在以后的正常开发之中，我们项目多以微信小程序和 H5 端的适配为主</p></blockquote><h3 id="_6-使用-vscode-开发-uniapp" tabindex="-1"><a class="header-anchor" href="#_6-使用-vscode-开发-uniapp" aria-hidden="true">#</a> <mark>6）使用 VSCode 开发 uniapp</mark></h3><p>虽说 <code>HBuilder X</code> 开发体验还算不错，但是有时候金窝银窝不如自己的狗窝，当我们习惯了 <code>VSCode</code> 之后，有时候不太愿意换开发工具。</p><p>那么怎么使用 <code>VSCode</code> 来开发 <code>uniapp</code> 呢？ 其实是有办法的。</p>',13),Se=e("li",null,[o("使用 "),e("code",null,"HBuilder X"),o(" 运行项目（运行方式，参考上一小节）")],-1),Ce=e("li",null,[o("使用 "),e("code",null,"VSCode"),o(" 打开项目")],-1),Be=e("code",null,"VSCode",-1),Te={href:"https://marketplace.visualstudio.com/items?itemName=ModyQyW.vscode-uni-helper",target:"_blank",rel:"noopener noreferrer"},je=e("code",null,"uni-*",-1),Ve={href:"https://marketplace.visualstudio.com/items?itemName=ModyQyW.vscode-uni-app-snippets",target:"_blank",rel:"noopener noreferrer"},Xe={href:"https://marketplace.visualstudio.com/items?itemName=ModyQyW.vscode-uni-app-schemas",target:"_blank",rel:"noopener noreferrer"},Ae=e("code",null,"pages.json",-1),Me=e("code",null,"manifest.json",-1),Oe={href:"https://marketplace.visualstudio.com/items?itemName=ModyQyW.vscode-uni-ui-snippets",target:"_blank",rel:"noopener noreferrer"},Ne=e("li",null,[o("在 "),e("code",null,"VSCode"),o(" 中修改代码，运行结果自动发生变化")],-1),We=c('<blockquote><p>让 <code>HBuilder X</code> 作为中介，我们在 VSCode 中写代码 -&gt; 为了提高自己的开发体验（比如 API 提示等），可以安装插件 -&gt; 安装一个<code>uni-helper</code>插件，其它三个插件自动安装</p></blockquote><p>💡：uniapp 的 uni_modules 目录需要提交到 Git 吗？</p><p>需要提交！</p><h3 id="_7-创建与配置-tabbar" tabindex="-1"><a class="header-anchor" href="#_7-创建与配置-tabbar" aria-hidden="true">#</a> <mark>7）创建与配置 tabBar</mark></h3><p>目前，项目的运行以及开发环境都搞定了，就下来我们要做的就是开发这个项目！</p><blockquote><p>先搞定这个项目的结构 -&gt; 也就是 tabBar 切换 -&gt; uniapp 模仿微信小程序，也就是创建姿势，跟微信小程序一样</p></blockquote><h4 id="_1、创建页面" tabindex="-1"><a class="header-anchor" href="#_1、创建页面" aria-hidden="true">#</a> <mark>1、创建页面</mark></h4><blockquote><p>把默认的页面删了，由于安装了插件，VSCode 也可以右键目录名创建页面 -&gt; 但建议还是用 HBuilder 创建页面</p></blockquote><ol><li>删除 <code>pages</code> 下的 <code>index</code> 文件夹</li><li>在 <code>pages</code> 文件夹处，右键 -&gt; 选择新建页面</li><li>确认新建页面的信息</li><li>点击创建按钮完成新建</li><li>循环以上顺序，依次完成 <code>hot</code>、<code>hot-video</code>、<code>my</code> 三个页面的创建</li></ol><p><img src="'+b+'" alt="新建页面"></p><p>效果：</p><p><img src="'+k+'" alt="创建页面"></p><h4 id="_2、配置-pages-json" tabindex="-1"><a class="header-anchor" href="#_2、配置-pages-json" aria-hidden="true">#</a> <mark>2、配置 <code>pages.json</code></mark></h4><ol><li><p>删除 <code>index</code> 路径</p></li><li><p>新建 <code>tabBar</code> 节点</p></li><li><p>复制 <strong>资源</strong> 文件夹下 <code>tab-icons</code> 文件夹到 <code>static</code> 文件夹中 -&gt; 删掉原先存在的图片</p></li><li><p>编写<code>tabBar</code>代码</p></li><li><p>如果修改完成之后，依然得到了以下错误，那么可以在 <code>HBuilder X</code> 中重新运行项目到微信开发者工具解决 -&gt; 这是小程序开发者工具的 bug（无法更新已经删除了文件这种情况，似乎有缓存啊） -&gt; 重新运行项目就可以解决这个 bug 了</p><p><img src="'+f+'" alt="bug"></p></li></ol><p>完整<code>tabBar</code>代码：</p><p><img src="'+x+'" alt="代码"></p><p>效果：</p><p><img src="'+v+'" alt="效果"></p><h3 id="_8-警告与错误处理" tabindex="-1"><a class="header-anchor" href="#_8-警告与错误处理" aria-hidden="true">#</a> <mark>8）警告与错误处理</mark></h3><h4 id="_1、解决-【sitemap-索引情况提示】的警告问题" tabindex="-1"><a class="header-anchor" href="#_1、解决-【sitemap-索引情况提示】的警告问题" aria-hidden="true">#</a> <mark>1、解决 【sitemap 索引情况提示】的警告问题</mark></h4><p><img src="'+q+'" alt="警告问题"></p>',21),Ee={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html",target:"_blank",rel:"noopener noreferrer"},Pe=c('<p>而如果想要解决这个警告也非常简单，因为一般情况项目不需要被微信索引，所以我们只需要 <strong>关闭</strong> 默认索引功能即可！</p><p><img src="'+w+'" alt="索引问题"></p><blockquote><p>双击打开 <code>manifest.json</code> -&gt; 点击源码视图 -&gt; 下翻找到 <code>mp-weixin</code> 配置节点 -&gt; 在 <code>settings</code> 下新增 <code>&quot;checkSiteMap&quot; : false</code></p></blockquote><h4 id="_2、解决-cannot-read-property-forceupdate-of-undefined-的错误" tabindex="-1"><a class="header-anchor" href="#_2、解决-cannot-read-property-forceupdate-of-undefined-的错误" aria-hidden="true">#</a> <mark>2、解决 <code> Cannot read property &#39;forceUpdate&#39; of undefined</code> 的错误</mark></h4><p><img src="'+I+'" alt="forceUpdate"></p><p>这个错误的原因非常简单 -&gt; 因为我们没有为项目配置 <code>AppID</code> 的原因，所以只需要完成 <code>AppID</code> 配置即可。 -&gt; 我们说过开发一个微信小程序项目，首先得有微信开发者工具，其次得有<code>AppId</code></p><p><img src="'+y+'" alt="AppID"></p><hr><p>错误处理完成后，就可以进入到我们的页面开发了！</p><h3 id="_9-热搜页面分析" tabindex="-1"><a class="header-anchor" href="#_9-热搜页面分析" aria-hidden="true">#</a> <mark>9）热搜页面分析</mark></h3><p>整个项目分为三大模块，我们首先去开发第一个模块——热搜模块</p><p>我们会把「热搜模块」分成四部分去进行开发：</p><p><img src="'+D+'" alt="热搜页面"></p><h3 id="_10-认识-vue-文件结构与-logo-图片展示" tabindex="-1"><a class="header-anchor" href="#_10-认识-vue-文件结构与-logo-图片展示" aria-hidden="true">#</a> <mark>10）认识 <code>.vue</code> 文件结构与 logo 图片展示</mark></h3><h4 id="_1、-vue-文件结构" tabindex="-1"><a class="header-anchor" href="#_1、-vue-文件结构" aria-hidden="true">#</a> <mark>1、<code>.vue</code> 文件结构</mark></h4><p><img src="'+L+'" alt="文件结构"></p><ol><li><code>template</code>：定义当前页面的结构。相当于 <code>wxml</code></li><li><code>script</code>：定义当前页面的逻辑。相当于 <code>js</code></li><li><code>style</code>：定义当前页面的样式。相当于 <code>wxss</code><ol><li>为 <code>style</code> 标签增加 <code>scoped</code> 属性：表示当前样式只在当前页面生效</li></ol></li></ol><h4 id="_2、logo-图片展示" tabindex="-1"><a class="header-anchor" href="#_2、logo-图片展示" aria-hidden="true">#</a> <mark>2、logo 图片展示</mark></h4><p>注意点：</p><ul><li>路径以<code>@</code>开头 -&gt; <code>@</code>表示项目的根路径，也就是从项目的根路径开始找文件 -&gt; <code>src=&quot;@/static/images/logo.png&quot;</code></li><li>可以用全局样式变量，因为我们用了<code>scss</code> -&gt; 无须导入这个<code>uni.scss</code> -&gt; uniapp 帮我们自动引入了，我们可以直接使用这些全局样式变量</li><li>logo 图片 -&gt; 不要拉伸 -&gt; <code>mode=&quot;aspectFit&quot;</code></li></ul><p>代码：</p><p><img src="'+H+'" alt="代码"></p><p>效果：</p><p><img src="'+S+'" alt="效果"></p><p>👇：logo 处理完成，处理搜索框</p><h3 id="_11-创建搜索框组件" tabindex="-1"><a class="header-anchor" href="#_11-创建搜索框组件" aria-hidden="true">#</a> <mark>11） 创建搜索框组件</mark></h3><ul><li>创建自定义组件的方式跟在微信小程序开发者工具里边所创建的姿势是一模一样的</li><li>组件的结构和页面的结构是一样的 -&gt; 都是<code>.vue</code>文件，里边分为三块</li><li>组件定义好后，可以直接使用，无需注册 -&gt; 微信小程序需要在页面配置里边注册，而 uni-app 则不需要</li></ul><p>做法：</p><ol><li><p>创建 <code>components</code> 文件夹</p></li><li><p>右键<code>components</code>文件夹 -&gt; 新建组件</p><p><img src="'+C+'" alt="创建组件"></p></li><li><p>明确当前 <code>my-search</code> 组件的能力（暂时不需要考虑太多之后的能力）</p><ol><li>具备输入框的样式</li><li>不可进行输入 -&gt; 本质上是一个按钮，只是看起来像输入框罢了</li><li><code>placeholder</code> 内容可以在父组件定义 -&gt; 不是在组件内写死的</li></ol></li><li><p>代码实现</p><ol><li>第一点和第二点的能力 -&gt; 用 CSS 即可实现</li><li>第三点能力 -&gt; 父向子传值 -&gt; 使用<code>props</code> -&gt; 小程序是用<code>properties</code></li></ol></li></ol>',29),Qe={href:"https://github.com/ppambler/imooc-uni-app/commit/651bcb6",target:"_blank",rel:"noopener noreferrer"},Fe=c('<p>目前这个<code>my-search</code>组件的功能是非常非常简单的，后边会赋予<code>my-search</code>更多的一些能力，这样它就会变得非常非常的复杂了</p><p>比如：</p><p><img src="'+B+'" alt="my-search 组件"></p><h3 id="_12-tabs-组件-创建并分析-my-tabs-组件" tabindex="-1"><a class="header-anchor" href="#_12-tabs-组件-创建并分析-my-tabs-组件" aria-hidden="true">#</a> <mark>12）tabs 组件 - 创建并分析 <code>my-tabs</code> 组件</mark></h3>',4),ze=e("li",null,[o("创建 "),e("code",null,"my-tabs"),o(" 组件")],-1),$e=e("code",null,"my-tabs",-1),Ue=e("code",null,"my-tabs",-1),Ge=e("li",null,[o("可在父组件中定制 "),e("code",null,"my-tabs"),o(" 样式 -> 比如下划线颜色")],-1),Je=e("li",null,[o("可在父组件中设置展示数据 -> 每个 "),e("code",null,"tab"),o(" 的内容是啥")],-1),Re=e("li",null,"可在父组件中设置默认的激活项（选中项） -> 选中高亮等",-1),Ke=e("li",null,"由此分析，定义出以下代码：",-1),Ye={href:"https://github.com/ppambler/imooc-uni-app/commit/78017c6d0d9735b9f3657e2edc5e9445706b3306",target:"_blank",rel:"noopener noreferrer"},Ze=c('<blockquote><p>啥叫通用的组件？ -&gt; 这个项目里边能用，其它项目里边导入该组件也能用它 -&gt; 说白了就是「轮子」呗！ -&gt; 既然想要把<code>my-tabs</code>开发成一个轮子 -&gt; 那么<code>my-tabs</code>的复杂端将远远超过我们之前所开发的<code>my-search</code>组件 -&gt; 你可以认为<code>my-tabs</code>是我们这个项目中第一个比较复杂的自定义组件</p></blockquote><p>至此，我们指定了三个可定制的内容</p><p>本小节我们创建了<code>my-tabs</code>组件 -&gt; 分析了<code>my-tabs</code>组件中所具备的能力</p><p>👇：<code>my-tabs</code>组件中的内容开发</p><h3 id="_13-tabs-组件-封装网络请求" tabindex="-1"><a class="header-anchor" href="#_13-tabs-组件-封装网络请求" aria-hidden="true">#</a> <mark>13）tabs 组件 - 封装网络请求</mark></h3><p>要使用<code>my-tabs</code>，就需要把<code>tabs</code>的数据给展示出来 -&gt; 想要展示<code>tabs</code>数据，就得调用封装的接口来获取数据 -&gt; 接口文档：<code>热搜 -&gt; 热搜文章类型</code></p><p>发请求在微信小程序里边是<code>wx.request</code>，那在 uni-app 里边呢？ -&gt; <code>uni.request</code></p><ol><li>创建 <code>utils</code> 文件夹</li><li>创建 <code>request.js</code> ，封装请求对象</li><li>创建 <code>api</code> 文件夹 -&gt; 放置所有的网络请求的相关方法</li><li>创建 <code>hot.js</code> 文件，封装 <code>hot</code> 相关的请求方法：<code>getHotTabs</code></li><li>在<code>hot.vue</code>里边使用<code>getHotTabs</code> -&gt; 在<code>loadHotTabs</code>方法里边发起请求 <ol><li>在哪里调用<code>loadHotTabs</code>方法？ -&gt; 在<code>created</code>里边：组件实例配置完成，但 DOM 未渲染，我们可以在这个钩子里边进行网络请求，配置响应式数据 -&gt; 这跟 Vue 是一样的</li></ol></li></ol>',8),eo={href:"https://github.com/ppambler/imooc-uni-app/commit/9f83cb531893318f8be934806020859303e163f8",target:"_blank",rel:"noopener noreferrer"},oo=e("p",null,"至此，一个基本的网络请求代码就已经完成了！",-1),io=e("h3",{id:"_14-tabs-组件-进行基本的数据展示",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_14-tabs-组件-进行基本的数据展示","aria-hidden":"true"},"#"),o(),e("mark",null,"14）tabs 组件 - 进行基本的数据展示")],-1),to={href:"https://uniapp.dcloud.io/component/scroll-view",target:"_blank",rel:"noopener noreferrer"},co=c('<ul><li><code>scroll-x</code>：允许横向滚动 -&gt; 默认值是<code>false</code></li><li><code>scroll-with-animation</code>：在设置滚动条位置时使用动画过渡 -&gt; 默认值是<code>false</code></li></ul><ol><li>在 <code>hot</code> 中使用<code>my-tabs</code>组件 -&gt; 父子通信 -&gt; 传递两个参数： <ol><li><code>tabData</code>：tabs 数据源</li><li><code>defaultIndex</code>：当前的切换 index</li></ol></li><li>在 <code>my-tabs</code> 组件中展示 <ol><li><code>scroll-view</code></li><li><code>&lt;block v-for=&quot;(item, index) in tabData&quot; :key=&quot;index&quot;&gt;&lt;/block&gt;</code> -&gt; uni-app 遵循 vue 的 <code>v-for</code> 指令，小程序是<code>wx:for=&quot;🟡🟡arr🟡🟡&quot;</code>，默认变量名是<code>item</code>，下标是<code>index</code></li></ol></li></ol><p>效果：</p><p><img src="'+T+'" alt="效果"></p>',4),lo={href:"https://github.com/ppambler/imooc-uni-app/commit/bd56aef",target:"_blank",rel:"noopener noreferrer"},ao=e("h3",{id:"_15-tabs-组件-美化样式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_15-tabs-组件-美化样式","aria-hidden":"true"},"#"),o(),e("mark",null,"15）tabs 组件 - 美化样式")],-1),po=e("blockquote",null,[e("p",null,"这个样式的实现过程是很丑陋的…… -> 我很难理解为啥要嵌套那么多层……")],-1),ro=e("p",null,[e("img",{src:j,alt:"tabs 组件"})],-1),so={href:"https://github.com/ppambler/imooc-uni-app/commit/f58beb5",target:"_blank",rel:"noopener noreferrer"},no=c('<p>头两个能力已经实现了，并且把数据给展示出来了，那么现在第三个能力「在父组件中选中项」 -&gt; 这该如何实现呢？目前，我们已经给了这个激活项一个对应的<code>props</code>（<code>defaultIndex</code>）了 -&gt; 有了这个<code>props</code>该如何实现激活项呢？</p><p>在开始下一小节前，请先自己去实现一遍（唯有自己尝试实现一遍，你才会发现这里边所存在的问题） -&gt; 实现失败有失败的问题，实现成功也有成功的问题 -&gt; 带着问题去看下一小节，唯有这样你才会收获更多！</p><p>要实现的效果：</p><p><img src="'+V+'" alt="效果"></p><h3 id="_16-tabs-组件-设置激活项" tabindex="-1"><a class="header-anchor" href="#_16-tabs-组件-设置激活项" aria-hidden="true">#</a> <mark>16）tabs 组件 - 设置激活项</mark></h3><p>自己实现一遍：</p><ol><li>判断<code>defaultIndex</code>是否和<code>index</code>相等 -&gt; 相等即给<code>item</code>添加一个<code>active</code>类</li><li>写样式 -&gt; 如何才能有下划线？</li><li>点击某个 tab ，更新 <code>defaultIndex</code>的值 -&gt; 如何为<code>my-tabs</code>组件绑定点击事件？ -&gt; 子向父传参</li><li>下划线的滑动效果如何实现呢？</li></ol><p>注意点：</p><ul><li>父组件传递的数据，我们不应该在子组件中进行修改</li><li>uni-app 的点击事件用<code>@click</code>，微信小程序则是用<code>bind:tap</code><ul><li>用来更新<code>activeIndex</code>的值</li><li>并且向外界通知一个<code>tabClick</code>事件</li></ul></li><li>数据监听器用<code>watch</code>，微信小程序则是用<code>observers</code><ul><li>监听<code>defaultIndex</code>这个数据 -&gt; 必须添加<code>immediate: true</code>，表示<code>defaultIndex</code>第一次赋值（默认值或者父传递过来的数据）也要被监听到 -&gt; 为了更新<code>activeIndex</code>的值而服务 -&gt; 这就是「父组件传递的数据」不应该在子组件中进行修改</li></ul></li><li>发送事件通知用<code>$emit</code> ，微信小程序则是用<code>triggerEvent </code></li></ul><p>关于老师的代码实现：<code>active</code>的切换是在子组件内部通过修改<code>activeIndex</code>来完成的，而我的是在父组件通过修改<code>defaultIndex</code>的值来完成的</p>',10),mo={href:"https://github.com/ppambler/imooc-uni-app/commit/2035bf5",target:"_blank",rel:"noopener noreferrer"},uo=c('<p>实现效果：</p><p><img src="'+X+'" alt="效果"></p><p>👇：实现激活项下边的滑块效果</p><h3 id="_17-tabs-组件-定义滑块" tabindex="-1"><a class="header-anchor" href="#_17-tabs-组件-定义滑块" aria-hidden="true">#</a> <mark>17）tabs 组件 - 定义滑块</mark></h3><ul><li>使用<code>style</code>添加内联样式</li><li>定义了一个<code>slider</code>数据，它旗下有个<code>left</code>属性，用来指定这个滑块距离左侧的距离是多少，默认是<code>0</code></li></ul><p><img src="'+A+'" alt="定义滑块"></p>',6),ho={href:"https://github.com/ppambler/imooc-uni-app/commit/b7a37ff",target:"_blank",rel:"noopener noreferrer"},go=c('<p>👇：实现滑块的滚动效果</p><h3 id="_18-tabs-组件-实现滑块的滚动-01" tabindex="-1"><a class="header-anchor" href="#_18-tabs-组件-实现滑块的滚动-01" aria-hidden="true">#</a> <mark>18）tabs 组件 - 实现滑块的滚动 01</mark></h3><p>想要实现滑块的滚动：</p><ol><li>确定滚动的时机 -&gt; 也就是滑块什么时候发生滚动 -&gt; 监听激活项的变化 + tab 的点击事件处理时</li><li>计算滑块滚动的距离 -&gt; 也就是<code>this.slider.left</code>的值</li></ol><p>如何计算滑块滚动的距离？</p><p><img src="'+M+`" alt="滑块的滚动距离"></p><p>我们要知道<code>tabItem</code>的宽度，<code>tabItem</code>的<code>left</code>，slider 的<code>width</code></p><p>一个标准的数学公式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>left <span class="token operator">=</span> tabItem<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token punctuation">(</span>tabItem<span class="token punctuation">.</span>width <span class="token operator">-</span> slider<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+O+'" alt="slider left"></p><blockquote><p>这个公式似曾相识</p></blockquote><h3 id="_19-tabs-组件-实现滑块的滚动-02" tabindex="-1"><a class="header-anchor" href="#_19-tabs-组件-实现滑块的滚动-02" aria-hidden="true">#</a> <mark>19）tabs 组件 - 实现滑块的滚动 - 02</mark></h3><ol><li>slider 的<code>width</code>很容易确定，因为这是固定的 -&gt; 添加默认配置数据：<code>defaultConfig</code><ol><li>配置下划线的宽高以及颜色 -&gt; 添加到 <code>view.underLine</code>的<code>style</code></li></ol></li><li>创建一个内部维护的数据对象<code>tabList</code>，相较于父组件传过来的<code>tabData</code>，每个<code>item</code>多了一个<code>_slider</code>属性，该属性有个<code>left</code>属性，存储的是滑块距离左侧的距离值</li><li>监听<code>tabData</code>的变化，再次强调，设置了<code>immediate:true</code>，第一次的初始值，也是会执行它的<code>handler</code>的，所以在<code>updateTabWidth</code>和<code>tabToIndex</code>会有一个判断<code>tabList</code>是否为空数组的语句 <ol><li>第一次执行<code>updateTabWidth</code>没啥反应 -&gt; 因为此时<code>tabData</code>为空，所以<code>tabList</code>也为空</li><li>第二次执行<code>updateTabWidth</code>，获取每个 <code>tabItem</code> DOM 元素的信息，计算每个 <code>tabItem</code> 距离左侧的距离，也就是给<code>tabList</code>里边的每个<code>item</code>添加一个<code>_slider.left</code> -&gt; 因为父组件传递了<code>tabData</code>，所以<code>tabData</code>不为空 -&gt; 默认会有一次计算「滑块」的位置，比如初始的第一次</li></ol></li><li>切换<code>tabItem</code> -&gt; 点击事件触发 -&gt; 更新<code>this.slider.left</code>的值，好让<code>view.underLine</code>的<code>transform</code>根据这个<code>this.slider.left</code>产生水平位移</li></ol><p>一些小技巧：</p><ul><li>什么时候可以获取 DOM 元素？ -&gt; 可以在<code>handler</code>里边用<code>setTimeout</code> -&gt; <code>$nextTick()</code>兼容性不好</li><li>获取 DOM 元素时：给每个<code>tabItem</code>添加了<code>:id=&quot;&#39;_tab_&#39; + index&quot;</code></li><li>获取 DOM 的固定写法： <ul><li><code>const query = uni.createSelectorQuery().in(this);</code></li><li><code>query.select(&quot;#_tab_&quot; + index).boundingClientRect((res) =&gt; { // 获取每个元素在这个页面的空间信息 }).exec()</code></li></ul></li></ul><p><img src="'+N+'" alt="tab Item"></p><hr><p>效果：</p><p><img src="'+W+'" alt="效果"></p>',19),_o={href:"https://github.com/ppambler/imooc-uni-app/commit/94618da",target:"_blank",rel:"noopener noreferrer"},bo=c('<h3 id="_20-tabs-组件-scrollview-的点击位移" tabindex="-1"><a class="header-anchor" href="#_20-tabs-组件-scrollview-的点击位移" aria-hidden="true">#</a> <mark>20）tabs 组件 - scrollView 的点击位移</mark></h3><p>需求：当【选中项】发生变化时，希望 <code>scrollView</code> 也进行对应的位移 -&gt; 说白了，想选最后一个，不让用自己拖动这个 <code>scroll</code> 视图容器</p><p>用代码模拟我们用鼠标滑动的滚动视图容器的效果</p><p><img src="'+E+'" alt="位移"></p><p>关键代码：</p><ul><li><code>:scroll-left=&quot;scrollLeft&quot;</code></li><li><code>this.scrollLeft = this.activeIndex * this.defaultConfig.underLineWidth;</code></li></ul>',6),ko={href:"https://github.com/ppambler/imooc-uni-app/commit/a97b8ce",target:"_blank",rel:"noopener noreferrer"},fo=c('<h3 id="_21-tabs-组件-增加可配置项" tabindex="-1"><a class="header-anchor" href="#_21-tabs-组件-增加可配置项" aria-hidden="true">#</a> <mark>21）tabs 组件 - 增加可配置项</mark></h3><p>需求：可在父组件中定制 <code>my-tabs</code> 样式</p><p><img src="'+P+'" alt="指定 my-tabs 样式"></p><p>做法：</p><ol><li>给<code>data</code>的<code>defaultConfig</code>追加几项有关样式的配置</li><li>监听<code>props</code>——<code>config</code> -&gt; 让内部维护的数据对象<code>defaultConfig</code>跟父组件传递过来的数据合并一下 -&gt; 说白了，子组件内部默认的样式配置作为兜底值</li><li>用<code>style</code>属性指定每个<code>tabItem</code>的样式</li></ol>',5),xo={href:"https://github.com/ppambler/imooc-uni-app/commit/7af3f0f",target:"_blank",rel:"noopener noreferrer"},vo=c('<hr><p>至此，我们就已经完成了<code>tabs</code>组件的开发了 -&gt; 整个<code>tabs</code>组件从创建开始到最后完成，总共经历了 9 小节内容</p><p><code>tabs</code> 组件是我们这个项目中第一个复杂的组件，并且我们希望把这个<code>tabs</code>组件做成一个轮子，可以满足更多应用的需求 -&gt; 所以我们不光要实现功能就完事儿了，我们还要提供定制化的一些特性（比如样式），这样的话，才能让我们这个组件来满足各个项目的各个场景里边去</p><h3 id="_22-list-组件-分析-list-组件" tabindex="-1"><a class="header-anchor" href="#_22-list-组件-分析-list-组件" aria-hidden="true">#</a> <mark>22）List 组件 - 分析 List 组件</mark></h3><p>这是首页的最后一个功能！</p><p>分析完成品里边 List 组件的效果，得出我们要做以下几个步骤才能实现它：</p><ol><li>使用 mock 数据（假数据），构建 List 的基本结构 -&gt; 此时后端那边还没有接口</li><li>美化 item 样式</li><li>根据 tab 的切换，获取真实数据</li><li>渲染真实数据</li><li>让 List 具备左右切换的能力 -&gt; 通过 swiper 改造 List</li><li>完成 list 与 tabs 的联动的能力 -&gt; 也就是完成 swiper 和 tabs 的联动效果 -&gt; tabs 切换，list 视图也切换，list 视图左右滑，tabs 也会自动跟着切换</li></ol><h3 id="_23-list-组件-使用-mock-数据-构建-list-的基本结构" tabindex="-1"><a class="header-anchor" href="#_23-list-组件-使用-mock-数据-构建-list-的基本结构" aria-hidden="true">#</a> <mark>23）List 组件 - 使用 mock 数据，构建 List 的基本结构</mark></h3><blockquote><p>组件的根元素 -&gt; 控制同类盒子之间的间隙；盒子容器 -&gt; 控制盒子的外观；内容容器 -&gt; 控制元素</p><p>有多个子元素就用一个容器把它们给包裹了</p></blockquote><p>把每个<code>item</code>项抽离成单独的组件——<code>hot-list-item</code></p><p>使用假数据把组件的基本结构给渲染出来</p><p><img src="'+Q+'" alt="hot-list-item"></p><p><code>item</code>的结构划分：</p><p><img src="'+F+'" alt="结构划分"></p><p>左侧展示的索引图标，而且每个<code>item</code>都有，并且都不一样，所以我们可以把它封装成一个组件——<code>hot-ranking</code></p><p>注意，这个图标只是图片，这个图片是包含数字内容的</p><hr><p><img src="'+z+'" alt="结构"></p><p>目前这个结构有了，就是样式长得太丑了：</p><p><img src="'+$+'" alt="样式太丑"></p>',20),qo={href:"https://github.com/ppambler/imooc-uni-app/commit/d4a1fb9",target:"_blank",rel:"noopener noreferrer"},wo=e("h3",{id:"_24-list-组件-美化-item-样式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_24-list-组件-美化-item-样式","aria-hidden":"true"},"#"),o(),e("mark",null,"24）List 组件 - 美化 item 样式")],-1),Io=e("p",null,"效果：",-1),yo=e("p",null,[e("img",{src:U,alt:"效果"})],-1),Do={href:"https://github.com/ppambler/imooc-uni-app/commit/8f07d00",target:"_blank",rel:"noopener noreferrer"},Lo=c('<h3 id="_25-list-组件-根据-tab-的切换-获取真实数据" tabindex="-1"><a class="header-anchor" href="#_25-list-组件-根据-tab-的切换-获取真实数据" aria-hidden="true">#</a> <mark>25）List 组件 - 根据 tab 的切换，获取真实数据</mark></h3><blockquote><p>所谓的真实数据指的是后端的接口已经写好了！你可以根据这个接口的定义去获取数据，之前的假数据只是为了完成这个<code>List</code>组件的结构以及样式！</p></blockquote><ol><li>监听<code>tab</code>切换 <ol><li><code>my-tabs</code>组件 -&gt; 发送了一个<code>tabClick</code>通知</li><li>父组件接收这个通知 -&gt; 修改激活项 -&gt; 让子组件此刻激活的<code>index</code>和父组件的<code>currentIndex</code>绑定</li></ol></li><li>发送数据请求 -&gt; 获取热搜文章列表 <ol><li><code>hot.js</code>封装请求接口</li><li>父组件定义一个方法<code>loadHotListFromTab</code> -&gt; 该方法的作用是「获取 List 列表数据」 -&gt; 什么时候调用这个方法 -&gt; 在调用<code>loadHotTabs</code>的时候，因为，我们获取 list 数据时，需要 tab 中对应的 id -&gt; 这是初始化列表的第一次数据请求</li></ol></li><li>缓存请求得到的数据 -&gt; 第一次请求，那就把这次请求得来的数据给缓存下来 -&gt; 切换旧的，不会再次发送请求 <ol><li>这个 tab 从未获取过列表数据 -&gt; loading</li><li>这个 tab 已经获取过列表数据 -&gt; 直接渲染</li></ol></li></ol><p>关键点：</p><ul><li>缓存数据源的定义：<code>listData: {}</code> -&gt; <code>key</code> 是 <code>tabItem</code> 的 <code>id</code>，<code>value</code>是这个<code>tabItem</code>所对应的<code>list</code>数据</li></ul><p>注意点：</p><ul><li>父组件要监听子组件发布过来的事件 -&gt; 微信小程序通过<code>bind</code>监听事件，uniapp 遵循 vue 规则，通过 <code>@</code> 监听事件</li><li>加载动画 -&gt; uni-app 提供了一个<code>uni-load-more</code>组件 -&gt; 用来专门展示加载动画的组件</li></ul><p>效果：</p><p><img src="'+G+'" alt="效果"></p>',9),Ho={href:"https://github.com/ppambler/imooc-uni-app/commit/4e3b44f",target:"_blank",rel:"noopener noreferrer"},So=c('<p>👇：渲染真实数据</p><h3 id="_26-list-组件-渲染真实数据" tabindex="-1"><a class="header-anchor" href="#_26-list-组件-渲染真实数据" aria-hidden="true">#</a> <mark>26）List 组件 - 渲染真实数据</mark></h3><ol><li>替换掉假的数据源：<code>v-for=&quot;(item, index) in 50&quot;</code> -&gt; <code>v-for=&quot;(item, index) in listData[currentIndex]&quot;</code></li><li>把每个<code>list</code>数据传给 List 组件 -&gt; 给 List 组件定义两个<code>props</code>：<code>data</code>（循环列表的 <code>item</code> 数据）、<code>ranking</code>（排名次序数据）</li><li>父组件<code>hot</code>传递数据给了子组件<code>list</code> -&gt; 子组件得把数据给显示出来 -&gt; 根据接口文档来确定有哪些数据需要被展示：比如<code>title</code>、<code>nickname</code></li><li>样式美化 -&gt; 简介最多展示两行 -&gt; 这个样式经常被用到 -&gt; 抽离出一个<code>styles</code>文件夹，在这个文件夹下边创建一个<code>global.scss</code> -&gt; 定义公共样式的地方 -&gt; 展示两行的样式是固定的 CSS 写法 -&gt; 需要做兼容处理 -&gt; 在<code>main.js</code>引入公共样式 -&gt; 谁要添加这个类？ <ol><li>标题</li><li>简介</li></ol></li><li>处理排名，也就是给<code>hot-ranking</code>组件添加<code>props</code><ol><li>根据不同的排名，显示不同的背景图片，图片分为：1、2、3、其它，这四种 <ol><li>使用计算属性 -&gt; 根据传递过来的排名数据，来决定渲染的是哪张背景图 -&gt; JS 加载图片用<code>require</code></li></ol></li><li>处理排名的文本颜色 -&gt; 用<code>:class</code><ol><li>前三名是白色</li><li>非前三名是黑色</li></ol></li></ol></li></ol><p>效果：</p><p><img src="'+J+'" alt="效果"></p>',5),Co={href:"https://github.com/ppambler/imooc-uni-app/commit/2967c66",target:"_blank",rel:"noopener noreferrer"},Bo=c("<p>前四步已经完成：</p><ol><li>使用 mock 数据（假数据），构建 List 的基本结构 -&gt; 此时后端那边还没有接口</li><li>美化 item 样式</li><li>根据 tab 的切换，获取真实数据</li><li>渲染真实数据</li></ol><p>接下来实现：</p><ol><li>让 list 拥有左右切换的能力</li><li>让 list 和 tabs 有联动效果</li></ol><p>💡：关于文本的截断</p>",5),To={href:"https://github.com/happylindz/blog/issues/12",target:"_blank",rel:"noopener noreferrer"},jo={href:"https://blog.csdn.net/qq_23375733/article/details/99713759",target:"_blank",rel:"noopener noreferrer"},Vo=c('<h3 id="_27-list-组件-通过-swiper-改造-list" tabindex="-1"><a class="header-anchor" href="#_27-list-组件-通过-swiper-改造-list" aria-hidden="true">#</a> <mark>27）List 组件 - 通过 swiper 改造 List </mark></h3><p>想要让 <code>list</code> 具备【横向翻页】的效果，那么可以使用 <code>swiper</code> 对其进行改造！</p><ol><li>定义一个<code>swiper</code>组件 -&gt; 具备滚动能力： <ol><li>每一个<code>swiper-item</code>下边都是一个遍历完成的一个个<code>hot-list-item</code> -&gt; 循环次数由<code>listData</code>决定 -&gt; 此时用的是<code>tabIndex</code>属性（<code>tabData</code>的<code>0~6</code>），而不是之前的<code>currentIndex</code>属性，因为<code>swiper</code>滑动的时候，也是需要变化的 -&gt; 需要给<code>swiper</code>组件指定<code>current</code>属性（值是<code>currentIndex</code>，也就是我们点击某个<code>tab</code>可以切换列表数据），它决定当前展示哪个 <code>swiperItem</code>，不然这个<code>tabIndex</code>永远为<code>0</code></li><li><code>swiper-item</code>的数量取决于<code>my-tabs</code>里边的<code>tabItem</code>数量 -&gt; <code>tabData</code>决定 -&gt; <code>v-for</code>处理一下</li></ol></li></ol><p><img src="'+R+'" alt="swiper"></p><blockquote><p><code>current</code>属性：默认值是<code>0</code>，表示当前所在滑块的 <code>index</code></p></blockquote><p>效果：</p><p><code>swiper-item</code>默认展示第一个 <code>list</code> 的数据，其它 6 个 <code>swiper-item</code>，你在滑动的时候，你会发现这是空的：</p><p><img src="'+K+'" alt="空的"></p><p>当你第一次点击其它<code>tab</code>时，会加载这个<code>tab</code>对应的<code>list</code>数据，这也就意味着，这个「空」就被填上了这个<code>list</code>数据！</p><p><img src="'+Y+'" alt="有数据"></p><p>要把这些「空」都填完，你得把把其余的没有点过的<code>tab</code>都给点一遍……这样左右滑的时候都会看到有数据存在了！ -&gt; 为啥这样点就会有数据？ -&gt; 因为我们点击<code>tab</code>，就是在请求这个<code>tab</code>所对应的<code>list</code>数据啊，而这写数据会被缓存到<code>listData</code>中</p>',11),Xo={href:"https://github.com/ppambler/imooc-uni-app/commit/09572be",target:"_blank",rel:"noopener noreferrer"},Ao=c('<p>目前存在的问题：</p><ol><li><code>list</code>列表的高度展示错误 -&gt; 也就是列表数据没有展示全</li><li>切换 tab 时，list 的渲染出现卡顿问题</li></ol><p><img src="'+Z+'" alt="问题"></p><p>应该是 list 的数据渲染完再滑？还是滑完后再渲染？ -&gt; 等大风小了再走，还是不管大风直接走呢？</p><h3 id="_28-list-组件-解决列表高度展示错误的问题" tabindex="-1"><a class="header-anchor" href="#_28-list-组件-解决列表高度展示错误的问题" aria-hidden="true">#</a> <mark>28）List 组件 - 解决列表高度展示错误的问题</mark></h3><ul><li>原因：没有给 <code>swiper</code> 指定高度</li><li>解决方案：指定高度即可</li></ul><p>可这个高度该给多少呢？<code>1000px</code>？<code>2000px</code>？</p><p><img src="'+ee+'" alt="固定高度"></p><p><img src="'+oe+'" alt="剩余数据"></p><p>你要知道每个<code>tabs</code>所对应的<code>list</code>数据的高度是不一样的！ -&gt; 这个接口给出来的每个<code>tab</code>都是<code>20</code>条数据，不过我们假设都不一样！</p><p>最终的解决方案：计算出每个 <code>listItem</code> 的高度，然后叠加到一起，就可以得到 <code>swiper</code> 的高度了！</p><p>这个方案的实现逻辑：</p>',12),Mo=c("<li>定义数据 <ol><li><code>currentSwiperHeight</code>：当前 <code>swiper</code> 的高度</li><li><code>swiperHeightData</code>：缓存高度的计算结果：以 <code>index</code> 为 <code>key</code>，对应的 <code>swiper</code> 的高度 为 <code>val</code> -&gt; 每次计算太耗性能了，你得把计算结果给缓存下来</li></ol></li>",1),Oo=e("code",null,"getCurrentSwiperHeight",-1),No=e("code",null,"swiper",-1),Wo=e("code",null,"item",-1),Eo={href:"https://uniapp.dcloud.io/api/ui/nodes-info?id=createselectorquery",target:"_blank",rel:"noopener noreferrer"},Po=e("ol",null,[e("li",null,"获取节点信息有固定的代码写法")],-1),Qo=e("li",null,[o("拿到所有 "),e("code",null,"item"),o(" 的高度 -> 来自一个个的节点信息")],-1),Fo=e("li",null,"把所有的高度累加",-1),zo=c("<li>什么时候调用这个方法？ -&gt; 当渲染完成数据之后，再去计算高度 <ol><li><code>this.$nextTick</code> 存在一定的兼容性问题，所以更加推荐使用传统的方式 <code>setTimeout</code></li><li>在<code>getHotListFromTab</code>里边的<code>setTimeout</code>的回调里调用 <ol><li>拿到<code>getCurrentSwiperHeight</code>的结果值，也就是说<code>swiper</code>的高度</li><li>把这个高度放入<code>swiperHeightData</code>缓存中 -&gt; 当前选中的<code>tabItem</code>索引值作为<code>key</code>，而对应的<code>value</code>就是这个高度值</li></ol></li></ol></li><li>使用这个缓存高度：<code>currentSwiperHeight</code></li>",2),$o=e("p",null,"注意：",-1),Uo=e("p",null,[e("img",{src:ie,alt:"注意"})],-1),Go=e("p",null,"效果：",-1),Jo=e("p",null,[e("img",{src:te,alt:"效果"})],-1),Ro={href:"https://github.com/ppambler/imooc-uni-app/commit/d93a4a9",target:"_blank",rel:"noopener noreferrer"},Ko=c('<h3 id="_29-list-组件-解决-切换-tab-时的-list-的卡顿问题" tabindex="-1"><a class="header-anchor" href="#_29-list-组件-解决-切换-tab-时的-list-的卡顿问题" aria-hidden="true">#</a> <mark>29）List 组件 - 解决 切换 <code>tab</code> 时的 <code>list</code> 的卡顿问题</mark></h3><p>💡：为什么会出现这个卡顿问题？</p><p>原因：swiper 动画未完成时，就获取数据，渲染 DOM</p><p>具体来说就是：点击 tab 切换 -&gt; 修改<code>currentIndex</code> -&gt; <code>currentIndex</code>绑定到了<code>swiper</code>的<code>current</code>属性 -&gt; 也就说 tab 一切换，<code>swiper</code>就会发生对应的切换/滑动效果 -&gt; 在发生切换效果时，<code>swiper</code>会执行一个动画效果，但是我们的切换动画和我们的数据获取渲染列表是同步进行的，也就说 swiper 动画未完成时，就获取数据，渲染 DOM -&gt; 所以这就导致了卡顿问题？</p><p>💡：如何解决呢？</p><p>有了原因之后，这解决方案就非常简单了！</p><p>解决方案：swiper 动画完成之后，再去获取数据，渲染 DOM</p><p>💡：如何监听 swiper 的动画完成？</p><ol><li>对<code>swiper</code>绑定一个<code>animationfinish</code>事件 -&gt; 表示我们当前动画完成之后的回调 -&gt; <code>onSwiperEnd</code></li><li><code>onSwiperEnd</code>这个方法的逻辑： <ol><li>在这个方法里边请求列表数据，原先在<code>onTabClick</code>里边的获取列表数据的方式就不需要了</li><li>判断是否有缓存再去获取列表数据 -&gt; <code>loadHostListFromTab</code>里边的判断缓存不需要了，直接获取数据即可</li><li>没有缓存：获取数据，直接<code>return</code> -&gt; <code>e.detail.current</code>也可以拿到当前切换的<code>currentIndex</code></li><li>有缓存：未<code>return</code>，则证明存在数据缓存，存在数据缓存，则同时存在 <code>height</code> 的缓存数据 -&gt; 设置<code>currentSwiperHeight</code>这个高度值</li></ol></li></ol><p>效果：</p><p><img src="'+ce+'" alt="效果"></p>',11),Yo={href:"https://github.com/ppambler/imooc-uni-app/commit/cf9ac94",target:"_blank",rel:"noopener noreferrer"},Zo=c('<p>至此：</p><ul><li>问题 1：list 列表的高度展示错误</li><li>问题 2：切换 tab 时，list 的卡顿问题</li></ul><p>这两个问题就已经全部搞定了</p><p>这也就意味着让 list 具备左右切换的能力也已经全部搞定了</p><p>六个步骤已经完成了其中的五个步骤 -&gt; 我们需要完成第六步：「list 与 tabs 联动的能力」，也就是完成它们俩之间的联动效果</p><h3 id="_30-list-组件-swiper-和-tabs-联动" tabindex="-1"><a class="header-anchor" href="#_30-list-组件-swiper-和-tabs-联动" aria-hidden="true">#</a> <mark>30）List 组件 - <code>swiper</code> 和 <code>tabs</code> 联动</mark></h3><p>所谓的联动能力：</p><ul><li><code>tabs</code> 切换时，<code>swiper</code> 联动切换 -&gt; 这一步已经完成了，点击某个<code>tab</code>，<code>swiper</code>会自动滑动到相应的<code>list</code></li><li><code>swiper</code> 切换时，<code>tabs</code> 联动切换 -&gt; 这一步未完成</li></ul><p>实现逻辑：</p><ol><li>监听<code>swiper</code>切换的事件 -&gt; <code>@change</code> -&gt; 通过<code>e.detail.current</code>获取切换完成后此时的<code>swiper</code>下标 -&gt; <code>onSwiperChange</code></li><li><code>onSwiperChange</code>：更新<code>currentIndex</code>的值</li></ol><p>效果：</p><p><img src="'+de+'" alt="效果"></p>',12),ei={href:"https://github.com/ppambler/imooc-uni-app/commit/2a44591",target:"_blank",rel:"noopener noreferrer"},oi=c('<p>目前的问题：激活的<code>tabItem</code>，其底部没有那个滑块跟随着</p><h3 id="_31-list-组件-tabs-中滑块跟随滚动" tabindex="-1"><a class="header-anchor" href="#_31-list-组件-tabs-中滑块跟随滚动" aria-hidden="true">#</a> <mark>31）List 组件 - tabs 中滑块跟随滚动</mark></h3><p>为啥不跟着滚动？ -&gt; 分析一下这个原因</p><p>我们知道滑块的滚动依赖<code>my-tabs</code>组件里边的<code>tabToIndex</code>这个方法来进行计算的</p><p>当<code>activeIndex</code>发生切换的时候 -&gt; 我们需要重新调用这个<code>tabToIndex</code></p><p>实现逻辑：</p><ul><li><code>hot.vue</code> -&gt; <code>currentIndex</code>变化，<code>defaultIndex</code>这个传给<code>my-tabs</code>组件的<code>props</code>更新了</li><li><code>my-tabs</code> -&gt; <code>watch</code> -&gt; <code>defaultIndex</code> -&gt; <code>handler</code> -&gt; <code>tabToIndex()</code>（注意，第一次<code>tabList</code>为空时，直接返回就好了）</li></ul><p>效果：</p><p><img src="'+le+'" alt="效果"></p>',9),ii={href:"https://github.com/ppambler/imooc-uni-app/commit/904c315",target:"_blank",rel:"noopener noreferrer"},ti=c('<p>至此，我们的第六步代码就已经完成了，整个<code>list</code>组件的功能就已经全部搞定了</p><p>不过，目前还有一些小问题，比如：</p><ul><li>滚动 <code>list</code> 到底部，希望有吸顶的效果</li><li>热度希望展示成<code>4k</code>这样的效果，而不是<code>4000</code></li></ul><p><img src="'+ae+'" alt="问题"></p><blockquote><p>我发现一个问题，<code>list</code>的数据都缓存了，<code>swiper</code>的<code>animationfinish</code>事件还是会被触发 -&gt; 我突然明白这个动画指的是<code>swiperItem</code>左右切换的动画，而不是<code>loading</code>动画</p></blockquote><h3 id="_32-完成-tabs-的吸顶效果" tabindex="-1"><a class="header-anchor" href="#_32-完成-tabs-的吸顶效果" aria-hidden="true">#</a> <mark>32）完成 <code>tabs</code> 的吸顶效果</mark></h3><p>目前，<code>hot</code>这首页的主要功能就已经完成了，剩下的都是一些边边角角的修复</p><p>💡：功能补充：让 <code>tabs</code> 具备吸顶的效果</p><ol><li>给<code>my-tabs</code>标签包装一层<code>view.tab-sticky</code></li><li>给<code>tab-sticky</code>这个类添加样式</li></ol>',9),ci={href:"https://github.com/ppambler/imooc-uni-app/commit/5964f85",target:"_blank",rel:"noopener noreferrer"},di=c('<p>💡：功能补充：控制列表滚动位置</p><p>这是啥功能？</p><p><img src="'+pe+'" alt="控制列表滚动位置"></p><h3 id="_33-控制列表滚动位置" tabindex="-1"><a class="header-anchor" href="#_33-控制列表滚动位置" aria-hidden="true">#</a> <mark>33）控制列表滚动位置</mark></h3><ol><li>当用户滚动页面之后</li><li>切换 tabs 时，让页面的滚动位置返回为 tabs 吸顶的位置</li></ol><blockquote><p>这个交互我不是很认可啊，我对比华为的应用市场 App 软件，和极客时间的 App，都发现每个<code>tabItem</code>所对应的<code>list</code>列表的滚动位置是会保存的，也就是第一个<code>tabItem</code>，你在<code>1000px</code>高度处，你切换到第二个<code>tabItem</code>，此时你滚动到<code>2000px</code>高度处，你再切回来，这第一个<code>tabItem</code>还是在<code>1000px</code>高度处 -&gt; 不过，那个打卡小程序，也没有做这样的效果！</p></blockquote><p>实现逻辑：</p><ol><li>定义一个<code>currentPageScrollTop</code>数据：表示当前的滚动距离</li><li>监听页面的滚动：<code>onPageScroll</code> -&gt; 这是关于 uni-app 的页面生命周期 <ol><li><code>130px</code>这个位置正好是触发吸顶的位置</li><li>通过<code>uni.pageScrollTo</code>控制列表的滚动位置</li></ol></li></ol>',8),li={href:"https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f",target:"_blank",rel:"noopener noreferrer"},ai={href:"https://github.com/ppambler/imooc-uni-app/commit/15e0bfb",target:"_blank",rel:"noopener noreferrer"},pi=c('<p>👇：搞定这两个补充功能后，接下来处理热度显示的问题</p><h3 id="_34-list-组件-处理热度的显示" tabindex="-1"><a class="header-anchor" href="#_34-list-组件-处理热度的显示" aria-hidden="true">#</a> <mark>34）List 组件 - 处理热度的显示</mark></h3><p>用过滤器</p><p>实现逻辑：</p><ol><li>创建一个<code>filters</code>目录 -&gt; 包含所有的过滤器 <ol><li>创建一个<code>index.js</code> -&gt; 暴露一个<code>hotNumber</code>方法 -&gt; 用来把大于<code>1000</code>的字符串数字转化成以<code>k</code>结尾的字符串数字</li></ol></li><li>注册过滤器的最佳实践 -&gt; <code>main.js</code> -&gt; 会把所有过滤器都给注册了</li><li>使用过滤器 -&gt; <code>hot-list-item.vue</code></li></ol>',5),ri={href:"https://github.com/ppambler/imooc-uni-app/commit/5bb696e",target:"_blank",rel:"noopener noreferrer"},si=c('<p>效果：</p><p><img src="'+re+'" alt="效果"></p><p>至此，我们这个首页的功能开发就基本完成了！</p><h3 id="_35-总结" tabindex="-1"><a class="header-anchor" href="#_35-总结" aria-hidden="true">#</a> <mark>35）总结 </mark></h3><p>用了 36 节，4 个多小时！</p><p>这个首页内容是我们接触 uni-app 后所完成的第一个比较复杂的页面 -&gt; 这个页面的复杂度只要体现在<code>tabs</code>和<code>list</code>这两个位置</p><p><img src="'+se+'" alt="复杂页面"></p><p>首页内容完成：</p><ol><li>对 <code>uniapp</code> 进行了基础的了解 -&gt; uni-app 结合了微信小程序语法和 Vue 语法的一个结合体</li><li>创建 <code>imooc-blog</code> 的项目</li><li>完成了 <code>tabbar</code> 的搭建 -&gt; 小程序里边的搭建规则</li><li>了解了 <code>.vue</code> 的单文件组件 -&gt; 由哪几部分组成？ -&gt; 在这种文件里边，我们实现了很多的页面以及对应的组件</li><li>分析了首页的模块组成</li><li>封装了 <code>request</code> <code>API</code> 请求模块 -&gt; 使用 Promise 自己封装，而不是网络上现成的库</li><li>实现了复杂组件 <code>tabs</code>和<code>list</code>组件 -&gt; 在实现的过程中，抛出了很多问题，通过思考这些问题，然后解决这些问题，这会让你收获很多！</li><li>完成了<code>tabs</code> 和 基于 <code>swiper</code> 的列表联动</li></ol><p>👇：完成新的页面：慕课搜索页面</p>',10);function ni(mi,ui){const i=l("ExternalLinkIcon");return a(),p("div",null,[me,e("p",null,[e("a",ue,[o("点击这里直接进入 uniapp 官网"),t(i)])]),he,e("ol",null,[e("li",null,[ge,o(" 同样提供了一个专门的开发工具 "),_e,o(" -> "),e("a",be,[o("HBuilderX 下载页面"),t(i)])]),ke]),fe,e("ol",null,[xe,e("li",null,[o("打开插件地址："),e("a",ve,[o("https://ext.dcloud.net.cn/plugin?id=2046"),t(i)]),o(" -> 要登录账号，没有账号，那就注册 "),qe]),we,Ie,ye]),De,e("blockquote",null,[e("p",null,[e("a",Le,[o("【报 Bug】无法打开微信小程序开发者工具 - DCloud 问答"),t(i)])])]),He,e("ol",null,[Se,Ce,e("li",null,[o("在 "),Be,o(" 中安装插件： "),e("ol",null,[e("li",null,[e("a",Te,[o("uni-helper"),t(i)]),o(" - 让开发者在 VSCode 中开发 "),je,o(" 的体验尽可能好。")]),e("li",null,[e("a",Ve,[o("uni-app-snippets"),t(i)]),o(" - 支持 uni-app 基本能力的代码片段，包括组件和 API")]),e("li",null,[e("a",Xe,[o("uni-app-schemas"),t(i)]),o(" - 支持 uni-app "),Ae,o(" 和 "),Me,o(" 简单的格式校验")]),e("li",null,[e("a",Oe,[o("uni-ui-snippets"),t(i)]),o(" - 支持 uni-ui 组件代码片段")])])]),Ne]),We,e("p",null,[o("微信小程序默认开启了索引功能，但是因为我们没有配置索引策略，导致出现了这么一个警告的问题。具体情况可以参考："),e("a",Ee,[o("https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html"),t(i)])]),Pe,e("p",null,[o("代码："),e("a",Qe,[o("创建搜索框组件 · ppambler/imooc-uni-app@651bcb6"),t(i)])]),Fe,e("ol",null,[ze,e("li",null,[o("分析 "),$e,o(" 组件的能力 -> 希望创建一个通用的 "),Ue,o(" 组件，可以满足各个应用中的需求 -> 既然是通用的，内容就不能写死了 "),e("ol",null,[Ge,Je,Re,Ke,e("li",null,[e("a",Ye,[o("Demo"),t(i)])])])])]),Ze,e("blockquote",null,[e("p",null,[e("a",eo,[o("Demo"),t(i)])])]),oo,io,e("p",null,[o("文档："),e("a",to,[o("scroll-view - uni-app 官网"),t(i)])]),co,e("blockquote",null,[e("p",null,[e("a",lo,[o("Demo"),t(i)])])]),ao,po,ro,e("blockquote",null,[e("p",null,[e("a",so,[o("Demo"),t(i)])])]),no,e("blockquote",null,[e("p",null,[e("a",mo,[o("Demo"),t(i)])])]),uo,e("blockquote",null,[e("p",null,[e("a",ho,[o("Demo"),t(i)])])]),go,e("blockquote",null,[e("p",null,[e("a",_o,[o("Demo"),t(i)])])]),bo,e("blockquote",null,[e("p",null,[e("a",ko,[o("Demo"),t(i)])])]),fo,e("blockquote",null,[e("p",null,[e("a",xo,[o("Demo"),t(i)])])]),vo,e("blockquote",null,[e("p",null,[e("a",qo,[o("Demo"),t(i)])])]),wo,Io,yo,e("blockquote",null,[e("p",null,[e("a",Do,[o("Demo"),t(i)])])]),Lo,e("blockquote",null,[e("p",null,[e("a",Ho,[o("Demo"),t(i)])])]),So,e("blockquote",null,[e("p",null,[e("a",Co,[o("Demo"),t(i)])])]),Bo,e("ul",null,[e("li",null,[e("a",To,[o("纯 CSS 实现多行文字截断 · Issue #12 · happylindz/blog"),t(i)])]),e("li",null,[e("a",jo,[o("CSS 单（多）行文本超过部分显示省略号，解决数字或英文不换行问题"),t(i)])])]),Vo,e("blockquote",null,[e("p",null,[e("a",Xo,[o("Demo"),t(i)])])]),Ao,e("ol",null,[Mo,e("li",null,[o("定义一个方法："),Oo,o(" -> 用来帮我们计算当前 "),No,o(" 的高度 "),e("ol",null,[e("li",null,[o("拿到所有的 "),Wo,o(" -> 这是一个异步操作（"),e("a",Eo,[o("节点信息 - uni-app 官网"),t(i)]),o("） "),Po]),Qo,Fo])]),zo]),$o,Uo,Go,Jo,e("blockquote",null,[e("p",null,[e("a",Ro,[o("Demo"),t(i)])])]),Ko,e("blockquote",null,[e("p",null,[e("a",Yo,[o("Demo"),t(i)])])]),Zo,e("blockquote",null,[e("p",null,[e("a",ei,[o("Demo"),t(i)])])]),oi,e("blockquote",null,[e("p",null,[e("a",ii,[o("Demo"),t(i)])])]),ti,e("blockquote",null,[e("p",null,[e("a",ci,[o("Demo"),t(i)])])]),di,e("blockquote",null,[e("p",null,[o("文档："),e("a",li,[o("生命周期 - uni-app 官网"),t(i)])])]),e("blockquote",null,[e("p",null,[e("a",ai,[o("Demo"),t(i)])])]),pi,e("blockquote",null,[e("p",null,[e("a",ri,[o("Demo"),t(i)])])]),si])}const gi=d(ne,[["render",ni],["__file","index.html.vue"]]);export{gi as default};
