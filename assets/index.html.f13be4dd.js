import{_ as i,r as d,o,c as p,a as n,b as t,d as s,e}from"./app.26c798e2.js";const l="/article/images/android/kotlin/5.png",r="/article/images/android/kotlin/6.png",c={},u=e(`<h2 id="android-常用布局容器" tabindex="-1"><a class="header-anchor" href="#android-常用布局容器" aria-hidden="true">#</a> Android 常用布局容器</h2><ul><li>Android 的 UI 可以分为两类，一类叫做 ViewGroup 容器,一类叫做 View 视图</li><li>ViewGroup 容器：(LinearLayout,RelativeLayout,FrameLayout)都是常用常见的容器.</li><li>View 视图：(TextView,Button,ImageView)都是常用常见的视图.</li></ul><h3 id="_1-基础布局容器" tabindex="-1"><a class="header-anchor" href="#_1-基础布局容器" aria-hidden="true">#</a> 1.基础布局容器</h3><ul><li><p><strong>LinearLayout</strong>线性布局:横着或竖着按顺序排列</p></li><li><p><strong>RelativeLayout</strong>相对布局:起始坐标时屏幕左上角，以同级或上级为参考系定位位置(以屏幕的左上角为常考点来摆放它们的位置)</p></li><li><p><strong>FrameLayout</strong>帧布局:像千层饼一样，一层压着一层(同样以屏幕的左上角为常考点来确定它们的位置)</p></li><li><p>ConstraintLayout 约束布局:google 于 2016 年新发布的一种布局方式，它不在 android 的基础 api 包里，需要额外引入</p></li><li><p>AbsoluteLayout 绝对布局（以屏幕左上角为参考系，定位自己的位置，从 android 2.2 版本后废弃）</p></li><li><p>GridLayout 网格布局（可以指定行数列数，子控件自动根据行列数进行分配位置，于 android 4.0 后新增进 api 中）</p></li><li><p>TableLayout 表格布局（类似于网格布局，以一个 TableRow 标签定义为一行或一列）</p></li></ul><h3 id="_2-线性布局-linearlayout" tabindex="-1"><a class="header-anchor" href="#_2-线性布局-linearlayout" aria-hidden="true">#</a> 2.线性布局 LinearLayout</h3><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>orientation</td><td>1.vertical:垂直排列 2.horizontal:水平排列(从左到右)</td><td>也就是这个线性布局到底是水平方向逐个排列还是垂直方向逐个排列</td></tr><tr><td>layout_width layout_height</td><td>1.match_parent:填充父容器的剩余空间 2.wrap_content:根据子视图宽高自适应自己的宽高 3.自定义大小 50dp</td><td>layout_width 和 layout_height 是 android 中控件的必要属性，规定了控件的宽度和高度，这个两个属性的值可以是指定的值，也可以根据内容自适应，还可以填充整个剩余空间</td></tr><tr><td>background</td><td>#ff0000 红色</td><td>填充背景色</td></tr><tr><td>gravity</td><td>1.center：所有子视图相对于父容器居中显示 2.horizontal_center:所有子容器的横向方向上相对父容器居中显示 3.vertical_center:所有子视图的纵向方向上相对父容器居中显示</td><td>决定子控件相对该父容器的位置(对齐方式的表示)</td></tr><tr><td>layout_gravity</td><td>1.center：该容器相对于它的父容器居中显示 2.horizontal_center:该容器横向方向上相对它的父容器居中显示 3.vertical_center:该容器纵向方向上相对它的父容器居中显示</td><td>决定该容器相对它的父容器的位置</td></tr><tr><td>weight</td><td></td><td>按比例分配父容器剩余的宽度或高度</td></tr></tbody></table><blockquote><p>提示：</p></blockquote><ul><li><p>button 高版本改变背景色要用 android:backgroundTint 属性</p></li><li><p>android:layout_gravity 如果对齐方式和 android:orientation 方向一致就会失效</p></li><li><p>在父类中使用 子类相较与父类的布局 android:gravity 子控件使用 android:layout_gravity</p></li><li><p>orientation=&quot;vertical&quot;时 layout_weight 等比分配高度使用 orientation=&quot;horizontal&quot;时 layout_weight 等比分配宽度</p></li><li><p>layout_weight 则 layout_width 失效当 layout_width=“0dp” layout_weight=数字越大宽度越长</p></li></ul><h3 id="_3-相对布局-relativelayout" tabindex="-1"><a class="header-anchor" href="#_3-相对布局-relativelayout" aria-hidden="true">#</a> 3. 相对布局 RelativeLayout</h3><ul><li><p>相对布局在摆放子视图位置时，按照指定的参考系来摆放子视图的位置，默认以屏幕左上角(0,0)位置作为参考系摆放位置</p></li><li><p>相对于父元素 7 个常用属性</p></li></ul><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_alignParentTop</td><td>true/false</td><td>是否相对于父容器的顶部</td></tr><tr><td>layout_alignParentBottom</td><td>true/false</td><td>是否相对于父容器的底部</td></tr><tr><td>layout_alignParentLeft</td><td>true/false</td><td>是否相对于父容器的左边</td></tr><tr><td>layout_alignParentRight</td><td>true/false</td><td>是否相对于父容器的右边</td></tr><tr><td>layout_centerHorizontal</td><td>true/false</td><td>是否相对于父容器的水平方向居中</td></tr><tr><td>layout_centerVertical</td><td>true/false</td><td>是否相对于父容器的垂直方向居中</td></tr><tr><td>layout_centerInParent</td><td>true/false</td><td>是否相对于父容器的水平和垂直方向居中</td></tr></tbody></table><ul><li>相对于兄弟元素 4 个常用属性</li></ul><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_above</td><td>@id/控件 id</td><td>是否相对于指定控件的上方</td></tr><tr><td>layout_below</td><td>@id/控件 id</td><td>是否相对于指定控件的下方</td></tr><tr><td>layout_toLeftOf</td><td>@id/控件 id</td><td>是否相对于指定控件的左边</td></tr><tr><td>layout_toRightOf</td><td>@id/控件 id</td><td>是否相对于指定控件的右边</td></tr></tbody></table><ul><li>相对于兄弟元素的对齐方式</li></ul><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_alignTop</td><td>@id/控件 id</td><td>是否相对于指定控件的顶部对齐</td></tr><tr><td>layout_alignBottom</td><td>@id/控件 id</td><td>是否相对于指定控件的底部对齐</td></tr><tr><td>layout_alignLeft</td><td>@id/控件 id</td><td>是否相对于指定控件的左边对齐</td></tr><tr><td>layout_alignRight</td><td>@id/控件 id</td><td>是否相对于指定控件的右边对齐</td></tr></tbody></table><h3 id="_4-帧布局-framelayout" tabindex="-1"><a class="header-anchor" href="#_4-帧布局-framelayout" aria-hidden="true">#</a> 4. 帧布局 FrameLayout</h3><ul><li><p>组件的默认位置都是左上角，组件之间可以重叠。像千层饼一样，一层压着一层 可以设置上下左右的对齐、水平垂直居中、设置方式与线性布局相似。</p></li><li><p>常用属性</p></li></ul><table><thead><tr><th>属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>layout_gravity</td><td>center/center_vertical/center_horizontal</td><td>设置组件在父容器中的位置</td></tr><tr><td>layout_marginLeft</td><td>具体的数值 100dp</td><td>左侧外间距</td></tr><tr><td>layout_marginTop</td><td>具体的数值 100dp</td><td>顶部外间距</td></tr><tr><td>layout_marginRight</td><td>具体的数值 100dp</td><td>右侧外间距</td></tr><tr><td>layout_marginBottom</td><td>具体的数值 100dp</td><td>底部外间距</td></tr></tbody></table><h2 id="materialbutton" tabindex="-1"><a class="header-anchor" href="#materialbutton" aria-hidden="true">#</a> MaterialButton</h2><ul><li>MaterialButton 是 Google 于 SDK28 推出的新控件，当遇到按钮需要圆角、或者描边等，就不必使用 xml 文件或者 Github 上找第三方库实现</li></ul><h4 id="_1-1-依赖引入" tabindex="-1"><a class="header-anchor" href="#_1-1-依赖引入" aria-hidden="true">#</a> 1.1 依赖引入</h4><ul><li>添加依赖 我的项目默认添加了 material 1.4.0</li><li>Project 文件模式下 app—&gt; bulid.gradle</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>implementation <span class="token string">&#39;com.google.android.material:material:1.3.0&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>app 的 theme 主题修改</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># app—&gt;src----&gt;main----&gt;AndroidManifest.xml</span>

android:theme<span class="token operator">=</span><span class="token string">&quot;@style/Theme.项目名&quot;</span>
<span class="token operator">&lt;</span>--<span class="token operator">!</span>点击进入这个theme文件--<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>--<span class="token operator">!</span>进入一个themes.xml文件--<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>style <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;Theme.项目名&quot;</span> <span class="token assign-left variable">parent</span><span class="token operator">=</span><span class="token string">&quot;xxx&quot;</span><span class="token operator">&gt;</span>
<span class="token comment"># 改为</span>
<span class="token operator">&lt;</span>style <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;Theme.项目名&quot;</span> <span class="token assign-left variable">parent</span><span class="token operator">=</span><span class="token string">&quot;Theme.MaterialComponents.Light.NoActionBar&quot;</span><span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-继承关系" tabindex="-1"><a class="header-anchor" href="#_1-2-继承关系" aria-hidden="true">#</a> 1.2 继承关系</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>java.lang.Object
 ↳android.view.View
  ↳android.widget.TextView
   ↳android.widget.Button
    ↳androidx.appcompat.widget.AppCompatButton
     ↳com.google.android.material.button.MaterialButton
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-关键属性" tabindex="-1"><a class="header-anchor" href="#_1-3-关键属性" aria-hidden="true">#</a> 1.3 关键属性</h4><table><thead><tr><th>属性</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>app:cornerRadius</td><td>圆角大小</td><td>设置按钮的圆角大小</td></tr><tr><td>app:strokeColor</td><td>描边颜色</td><td>设置按钮的描边颜色</td></tr><tr><td>app:strokeWidth</td><td>描边宽度</td><td>设置按钮的描边宽度</td></tr><tr><td>app:icon</td><td>图标 icon</td><td>设置按钮的图标</td></tr><tr><td>app:iconGravity</td><td>图标位置</td><td>设置按钮的图标位置 start,end.textStart,textEnd</td></tr><tr><td>app:backgroundTint</td><td>背景色</td><td>设置按钮的背景色</td></tr><tr><td>app:backgroundTintMode</td><td>背景模式</td><td>设置按钮的背景模式 add,multiply,screen,src_atop,src_in,src_over</td></tr><tr><td>app:iconTint</td><td>图标颜色</td><td>设置按钮的图标颜色</td></tr><tr><td>app:iconPadding</td><td>图标间距</td><td>设置按钮的图标间距</td></tr><tr><td>app:iconSize</td><td>图标大小</td><td>设置按钮的图标大小</td></tr><tr><td>app:rippleColor</td><td>水波纹色</td><td>设置按钮的水波纹颜色</td></tr><tr><td>app.iconTintMode</td><td>图标模式</td><td>设置按钮的图标模式</td></tr></tbody></table><ul><li><p>根节点添加 app 命名空间</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>xmlns:app<span class="token operator">=</span><span class="token string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_1-4-注意事项" tabindex="-1"><a class="header-anchor" href="#_1-4-注意事项" aria-hidden="true">#</a> 1.4 注意事项</h4><ul><li><p>去除阴影: MD 控件默认有阴影效果，但是有时候我们并不想要按钮有阴影，那么这时候可以指定 style 为 style=&quot;@style/Widget.MaterialComponents.Button.UnelevatedButton&quot; 这样就能去掉阴影，让视图看起来扁平化</p></li><li><p>闪退: 修改 APP 主题</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>android:theme<span class="token operator">=</span><span class="token string">&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="materialbuttontogglegroup" tabindex="-1"><a class="header-anchor" href="#materialbuttontogglegroup" aria-hidden="true">#</a> MaterialButtonToggleGroup</h3><h4 id="_1-1-继承关系" tabindex="-1"><a class="header-anchor" href="#_1-1-继承关系" aria-hidden="true">#</a> 1.1 继承关系</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>java.lang.Object
   ↳android.view.View
        ↳android.view.ViewGroup
             ↳android.widget.LinearLayout
                  ↳com.google.android.material.button.MaterialButtonToggleGroup

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>只有第一个子元素的最左边角和最后一个子元素的最右边角才能保留它们的形状外观圆角大小 app:cornerRadius 修改圆角</li></ul><h4 id="_1-2-公开属性" tabindex="-1"><a class="header-anchor" href="#_1-2-公开属性" aria-hidden="true">#</a> 1.2 公开属性</h4><table><thead><tr><th>属性</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>app:checkedButton</td><td>默认选中</td><td>按钮 ID</td></tr><tr><td>app:singleSelection</td><td>是否单项选择</td><td>true(单选)/false(多选)</td></tr><tr><td>app:selectionRequired</td><td>是否必选</td><td>true(必选)/false(非必选)</td></tr></tbody></table><h4 id="_1-3-tab-切换监听" tabindex="-1"><a class="header-anchor" href="#_1-3-tab-切换监听" aria-hidden="true">#</a> 1.3 tab 切换监听</h4><ul><li>MaterialButtonToggleGroup 继承 LinearLayout 可以使用 weight</li><li>在 comps_material_button.xml 写布局 在 MainActivity.kt 写监听</li></ul><h2 id="textview-文本控件" tabindex="-1"><a class="header-anchor" href="#textview-文本控件" aria-hidden="true">#</a> TextView 文本控件</h2><h3 id="_1-常用属性" tabindex="-1"><a class="header-anchor" href="#_1-常用属性" aria-hidden="true">#</a> 1. 常用属性</h3><table><thead><tr><th>属性</th><th>属性值示例</th><th>说明</th></tr></thead><tbody><tr><td>android:id</td><td>@+id/tv</td><td>设置一个组件 id，通过 findViewById()的方法获取到该对象，然后进行相关设置</td></tr><tr><td>android:text</td><td>@string/xxx</td><td>设置文本内容</td></tr><tr><td>android:textSize</td><td>20sp</td><td>设置文本大小</td></tr><tr><td>android:textColor</td><td>#ff0000</td><td>设置文本颜色</td></tr><tr><td>android:gravity</td><td>center</td><td>设置文本对齐方式</td></tr><tr><td>android:background</td><td>#ff0000</td><td>设置文本背景色</td></tr><tr><td>android:padding</td><td>10dp</td><td>设置文本内边距</td></tr><tr><td>android:paddingLeft</td><td>10dp</td><td>设置文本左内边距</td></tr><tr><td>android:paddingTop</td><td>10dp</td><td>设置文本上内边距</td></tr><tr><td>android:paddingRight</td><td>10dp</td><td>设置文本右内边距</td></tr><tr><td>android:paddingBottom</td><td>10dp</td><td>设置文本下内边距</td></tr><tr><td>android:drawableLeft</td><td>@mipmap/ic_launcher</td><td>设置文本左边图标</td></tr><tr><td>android:drawableTop</td><td>@mipmap/ic_launcher</td><td>设置文本上边图标</td></tr><tr><td>android:drawableRight</td><td>@mipmap/ic_launcher</td><td>设置文本右边图标</td></tr><tr><td>android:drawableBottom</td><td>@mipmap/ic_launcher</td><td>设置文本下边图标</td></tr><tr><td>android:drawablePadding</td><td>10dp</td><td>设置文本图标与文本之间的间距</td></tr><tr><td>android:drawableTint</td><td>#ffffff</td><td>图片着色数</td></tr><tr><td>android:ellipsize</td><td>end</td><td>设置文本超出显示范围时的显示方式</td></tr><tr><td>android:maxLines</td><td>1</td><td>设置文本最大显示行数</td></tr><tr><td>android:inputType</td><td>text</td><td>设置文本输入类型</td></tr><tr><td>android:hint</td><td>请输入用户名</td><td>设置文本提示内容</td></tr><tr><td>android:password</td><td>true</td><td>设置文本是否以密码形式显示</td></tr><tr><td>android:scrollHorizontally</td><td>true</td><td>设置文本是否水平滚动</td></tr><tr><td>android:scrollbars</td><td>horizontal</td><td>设置文本滚动条显示方式</td></tr><tr><td>android:linksClickable</td><td>true</td><td>设置文本是否可点击</td></tr><tr><td>android:autoLink</td><td>web</td><td>设置文本自动识别链接</td></tr><tr><td>android:lineSpacingExtra</td><td>10dp</td><td>设置文本行间距</td></tr><tr><td>android:lineSpacingMultiplier</td><td>1.5</td><td>设置文本行间距倍数</td></tr><tr><td>android:maxLength</td><td>10</td><td>设置文本最大长度</td></tr><tr><td>android:singleLine</td><td>true</td><td>设置文本是否单行显示</td></tr><tr><td>android:shadowColor</td><td>#ff0000</td><td>设置文本阴影颜色</td></tr><tr><td>android:shadowDx</td><td>10</td><td>设置文本阴影水平偏移量</td></tr><tr><td>android:shadowDy</td><td>10</td><td>设置文本阴影垂直偏移量</td></tr><tr><td>android:shadowRadius</td><td>10</td><td>设置文本阴影半径</td></tr><tr><td>android:textStyle</td><td>bold</td><td>设置文本字体样式</td></tr></tbody></table><h2 id="imageview-图片控件" tabindex="-1"><a class="header-anchor" href="#imageview-图片控件" aria-hidden="true">#</a> ImageView 图片控件</h2><h3 id="_1-常见属性" tabindex="-1"><a class="header-anchor" href="#_1-常见属性" aria-hidden="true">#</a> 1.常见属性</h3><table><thead><tr><th>属性</th><th>属性值示例</th><th>说明</th></tr></thead><tbody><tr><td>android:src</td><td>@mipmap/ic_launcher</td><td>设置图片资源</td></tr><tr><td>android:alpha</td><td>0.5[0.0~1.0]</td><td>设置透明度</td></tr><tr><td>android:backgroun</td><td>@drawable/background</td><td>给 ImageView 设置背景色、背景图片</td></tr><tr><td>android:scaleType</td><td>center</td><td>设置图片缩放类型</td></tr></tbody></table><ul><li>注意： 同时设置 src 和 background。background 在下，src 在上</li></ul><h3 id="_2-常见缩放类型" tabindex="-1"><a class="header-anchor" href="#_2-常见缩放类型" aria-hidden="true">#</a> 2.常见缩放类型</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>fitXY</td><td>把原图按照指定的大小在 View 中显示，拉伸显示图片，不保持原比例，填满 ImageView</td></tr><tr><td>centerCrop</td><td>常用，等比放大居中显示以填满整个 ImageView 为目的，将原图的中心对准 ImageView 的中心，等比例放大原图，直到填满 ImageView 为止（指的是 ImageView 的宽和高都要填满），原图超过 ImageView 的部分作裁剪处理。</td></tr><tr><td>centerInside</td><td>以原图完全显示为目的，将图片的内容完整居中显示，通过按比例缩小原图的长(宽)等于或小于 ImageView 的长(宽)。如果原图的长宽本身就小于 ImageView 的长宽，则原图不作任何处理，居中显示在 ImageView</td></tr><tr><td>fitCenter</td><td>把原图按比例扩大或缩小到 ImageView 的 ImageView 的高度，居中显示</td></tr><tr><td>matrix</td><td>不改变原图的大小，从 ImageView 的左上角开始绘制原图，原图超过 ImageView 的部分作裁剪处理。</td></tr><tr><td>center</td><td>保持原图的大小，显示在 ImageView 的中心。当原图的长(宽)大于 ImageView 的长(宽)，超过部分裁剪处理。</td></tr><tr><td>fitStart</td><td>把原图按比例扩大(缩小)到 ImageView 的高度，显示在 ImageView 的上部分位置</td></tr><tr><td>fitEnd</td><td>把原图按比例扩大(缩小)到 ImageView 的高度，显示在 ImageView 的下部分位置</td></tr></tbody></table><h3 id="效果图" tabindex="-1"><a class="header-anchor" href="#效果图" aria-hidden="true">#</a> 效果图</h3><p><img src="`+l+'" alt="效果图"></p><h2 id="recyclerview-高级-ui-控件" tabindex="-1"><a class="header-anchor" href="#recyclerview-高级-ui-控件" aria-hidden="true">#</a> RecyclerView 高级 UI 控件</h2><p><img src="'+r+`" alt=" RecyclerView 高级 UI 控件"></p><ul><li>四层回收、复用机制可以让页面在滑动的时候非常顺滑</li></ul><h3 id="_1-列表布局-linearlayoutmanager" tabindex="-1"><a class="header-anchor" href="#_1-列表布局-linearlayoutmanager" aria-hidden="true">#</a> 1. 列表布局 LinearLayoutManager</h3><h4 id="_1-1-纵向列表" tabindex="-1"><a class="header-anchor" href="#_1-1-纵向列表" aria-hidden="true">#</a> 1.1 纵向列表</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span>
    <span class="token comment">// 文本 布局方向 是否反转</span>
    FragmentHomeBinding<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span>layoutManager <span class="token operator">=</span> <span class="token function">LinearLayoutManager</span><span class="token punctuation">(</span>context <span class="token punctuation">,</span> LinearLayoutManager<span class="token punctuation">.</span>VERTICAL <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    FragmentHomeBinding<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span>adapter <span class="token operator">=</span> <span class="token function">MyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-横向列表" tabindex="-1"><a class="header-anchor" href="#_1-2-横向列表" aria-hidden="true">#</a> 1.2 横向列表</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span>
    <span class="token comment">// 文本 布局方向 是否反转</span>
    FragmentHomeBinding<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span>layoutManager <span class="token operator">=</span> <span class="token function">LinearLayoutManager</span><span class="token punctuation">(</span>context <span class="token punctuation">,</span> LinearLayoutManager<span class="token punctuation">.</span>HORIZONTAL <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    FragmentHomeBinding<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span>adapter <span class="token operator">=</span> <span class="token function">MyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>共同部分</p><ul><li><p>step1: 编写列表 item 的布局样式 item_view_linear_vertical.xml</p></li><li><p>step2: 完善 fragment_home.xml</p><ul><li>确保 app–&gt;build.gradle 中 dependencies 有引用</li></ul></li><li><p>step3: 完善 MainActivity.kt</p><ul><li>确保 MainActivity.kt 中有引用</li><li>关联 fragment_home.xml</li><li>recycler_view.layoutManager</li><li>recycler_view.adapter</li></ul></li></ul></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>
    <span class="token keyword">class</span> <span class="token function">MyViewHolder</span><span class="token punctuation">(</span><span class="token keyword">val</span> view<span class="token operator">:</span> View<span class="token punctuation">)</span><span class="token operator">:</span>RecyclerView<span class="token punctuation">.</span><span class="token function">ViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">val</span> binding <span class="token operator">=</span> ItemViewLinearVerticalBinding<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//内部类可以访问外部类的对象 为了拿到context</span>
    <span class="token keyword">inner</span> <span class="token keyword">class</span>  MyAdapter<span class="token operator">:</span>RecyclerView<span class="token punctuation">.</span>Adapter<span class="token operator">&lt;</span>MyViewHolder<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//创建对应的ViewHolder对象</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> ViewGroup<span class="token punctuation">,</span> viewType<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> MyViewHolder <span class="token punctuation">{</span>
        <span class="token comment">//资源文件id ViewGroup attachToRoot</span>
        <span class="token keyword">val</span> itemView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_view_linear_vertical<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">MyViewHolder</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//完成数据的绑定</span>
    <span class="token annotation builtin">@SuppressLint</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;SetTextI18n&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> MyViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//载入图片的三种方式</span>
        <span class="token comment">/*holder.itemView.item_image.setImageResource(R.drawable.android_icon)
        holder.itemView.item_image.setImageDrawable(ContextCompat.getDrawable(context!!,R.drawable.android_icon))
        holder.itemView.item_image.setImageBitmap(BitmapFactory.decodeResource(context!!.resources , R.drawable.android_icon))*/</span>
        <span class="token function">with</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">{</span>
            binding<span class="token punctuation">.</span>itemImage<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>android_icon<span class="token punctuation">)</span>
            binding<span class="token punctuation">.</span>itemTitle<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;这是第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">position<span class="token operator">+</span><span class="token number">1</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个标题&quot;</span></span>
            binding<span class="token punctuation">.</span>itemMessage<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;这是第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">position<span class="token operator">+</span><span class="token number">1</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个内容，这是第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">position</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个内容，这是第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">position</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个内容，这是第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">position</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 个内容&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//告诉列表有多少数据</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：</p></blockquote>`,63),k=n("li",null,"with(holder) 代替 holder.itemView",-1),h={href:"https://www.jianshu.com/p/2989a927f5df",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"context!! 代表 context 这个字段对象不为空",-1),m=e(`<h3 id="_2-网格布局-gridlayoutmanager" tabindex="-1"><a class="header-anchor" href="#_2-网格布局-gridlayoutmanager" aria-hidden="true">#</a> 2. 网格布局 GridLayoutManager</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//HomeFragment被解析为view对象时会回调这个方法</span>
<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span>
    <span class="token comment">// 文本 几列</span>
    FragmentDashboardBinding<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span>layoutManager <span class="token operator">=</span>
        <span class="token function">GridLayoutManager</span><span class="token punctuation">(</span>context <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    FragmentDashboardBinding<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span>adapter <span class="token operator">=</span> <span class="token function">MyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-瀑布流布局-staggeredgridlayoutmanager" tabindex="-1"><a class="header-anchor" href="#_3-瀑布流布局-staggeredgridlayoutmanager" aria-hidden="true">#</a> 3.瀑布流布局 StaggeredGridLayoutManager</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span>
        <span class="token comment">// 几列 方向</span>
        FragmentNotificationsBinding<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span>layoutManager <span class="token operator">=</span>
            <span class="token function">StaggeredGridLayoutManager</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">,</span> StaggeredGridLayoutManager<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span>
        FragmentNotificationsBinding<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">.</span>recyclerView<span class="token punctuation">.</span>adapter <span class="token operator">=</span> <span class="token function">MyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-view-binding" tabindex="-1"><a class="header-anchor" href="#_4-view-binding" aria-hidden="true">#</a> 4.view-binding</h3><ul><li>可以直接使用布局中的控件 id 来操作 view 控件, 不用再 findViewById。大大提高工作效率，减少模板代码量</li><li>需要在根目录下的 build.gradle 添加 kotlin-android-extensions 插件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
plugins <span class="token punctuation">{</span>
    <span class="token function">id</span> <span class="token string">&#39;com.android.application&#39;</span>
    <span class="token function">id</span> <span class="token string">&#39;kotlin-android&#39;</span>
    <span class="token function">id</span> <span class="token string">&#39;kotlin-android-extensions&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment"># app/build.gradle 中开启</span>
android <span class="token punctuation">{</span>
    <span class="token punctuation">..</span>.
    buildFeatures <span class="token punctuation">{</span>
        viewBinding <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,8),b={href:"https://blog.csdn.net/white1148/category_11379150.html",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.imooc.com/learn/1307",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/xmllein/ap-first",target:"_blank",rel:"noopener noreferrer"};function y(_,f){const a=d("ExternalLinkIcon");return o(),p("div",null,[u,n("ul",null,[k,n("li",null,[n("a",h,[t("LayoutInflater 与 attachToRoot 杂谈笔记"),s(a)])]),v]),m,n("ul",null,[n("li",null,[n("a",b,[t("white1148 博客"),s(a)])]),n("li",null,[n("a",g,[t("2021Android 从零入门到实战(Kotlin 版) 视频"),s(a)])]),n("li",null,[n("a",w,[t("github 源码"),s(a)])])])])}const V=i(c,[["render",y],["__file","index.html.vue"]]);export{V as default};
