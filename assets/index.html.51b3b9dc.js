import{_ as t,r as o,o as l,c as i,a as n,b as s,d as a,e as p}from"./app.26c798e2.js";const r={},d=n("h2",{id:"rest-client",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rest-client","aria-hidden":"true"},"#"),s(" REST Client")],-1),c=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),s(" 简介")],-1),u={href:"https://github.com/Huachao/vscode-restclient",target:"_blank",rel:"noopener noreferrer"},v={href:"https://marketplace.visualstudio.com/items?itemName=humao.rest-client",target:"_blank",rel:"noopener noreferrer"},m=p(`<h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><ul><li>在文本编辑器中就可以直接发送请求和查看返回</li><li>支持环境变量</li><li>可以直接发送 curl 命令</li><li>管理请求历史：可以保存请求历史，方便下次使用</li><li>生成代码：可以将请求转换为多种语言的代码</li><li>支持多种请求方式：GET、POST、PUT、DELETE、HEAD、OPTIONS、PATCH、TRACE</li><li>Cookie 管理：可以管理请求的 Cookie</li><li>变量管理：可以管理请求的变量</li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><ul><li>创建一个 <code>.http</code> 文件，输入请求内容，显示<code>Send Request</code> 然后点击，就能发送 get 请求。</li></ul><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://www.baidu.com</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>发送多个请求， 用 <code>###</code> 分割</li></ul><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>### get 请求并查看响应结果
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://www.baidu.com</span> <span class="token http-version property">HTTP/1.1</span></span>

### post 请求并查看响应结果
<span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">https://www.baidu.com</span> <span class="token http-version property">HTTP/1.1</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>强大的变量</p><ul><li><p>内置变量(常用)</p><ul><li><code>{{$guid}}</code>：生成一个 GUID</li><li><code>{{$randomInt min max}}</code>：生成一个指定范围内的随机整数</li><li><code>{{$randomGuid}}</code>：生成一个随机 GUID</li><li><code>{{$timestamp}}</code>：生成一个时间戳</li><li><code>{{$datetime}}</code>：生成一个当前时间</li><li><code>{{$isoDate}}</code>：生成一个 ISO 格式的当前时间</li><li><code>{{$newGuid}}</code>：生成一个新的 GUID</li><li><code>{{$randomInt}}</code>：生成一个随机整数</li><li><code>{{$randomInt min}}</code>：生成一个大于等于 min 的随机整数</li><li><code>{{$randomInt min max}}</code>：生成一个指定范围内的随机整数</li><li><code>{{$randomDouble}}</code>：生成一个随机浮点数</li><li><code>{{$randomDouble min}}</code>：生成一个大于等于 min 的随机浮点数</li><li><code>{{$randomDouble min max}}</code>：生成一个指定范围内的随机浮点数</li><li><code>{{$randomString length}}</code>：生成一个指定长度的随机字符串</li><li><code>{{$randomString length chars}}</code>：生成一个指定长度和字符集的随机字符串</li><li><code>{{$randomBytes length}}</code>：生成一个指定长度的随机字节</li></ul></li><li><p>文件中自定义变量</p></li></ul><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>@base_url = https://www.baidu.com

### get 请求并查看响应结果 使用变量
GET {{base_url}} HTTP/1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置多环境变量：在 vscode 的设置文件 settings.json 配置多环境变量</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;rest-client.environmentVariables&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;$shared&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pkslow&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;local&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;hostname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost:8080&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{{$shared password}}&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;production&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;hostname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localhost:8081&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{{$shared password}}&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加了两个环境 local 和 production，其中$shared 的变量是大家都可以引用的。</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>### post 请求并查看响应结果
<span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">https://{{hostname}}/login</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span>
<span class="token application-json">
<span class="token punctuation">{</span>
  <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{{password}}&quot;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>获取其它请求返回体的值为变量: 使用 <code>@</code> 符号。</p></li><li><p>先通过 login 请求来获取 Token，然后再把拿到的 Token 作为请求头发送其它请求。这个 Token 肯定是每次登陆都不一样的，如果每次都要获取，然后复制，再粘贴到后面请求中，就会非常麻烦。REST Client 为这种场景提供了便利的办法，我们来看看怎么使用吧。</p></li><li><p>登录获取 token</p></li></ul><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>### post 登录获取token
# @name loginAdmin
<span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">https://{{hostname}}/login</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/json</span></span>
<span class="token application-json">
<span class="token punctuation">{</span>
  <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{{password}}&quot;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>添加一行 <code># @name loginAdmin</code></p></li><li><p>请求返回数据格式为 直接<code>token</code>, 可以通过<code>{{loginAdmin.response.body.*}}</code>来引用变量</p></li><li><p><code>{{requestName.(response|request).(body|headers).(*|JSONPath|XPath|Header Name)}}</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJwa3Nsb3ciLCJyb2xlcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTYyMjI3OTMxMCwiZXhwIjoxNjIyMjc5OTEwfQ.h-fwUEOPx_tttlBOR8cXMHJWy2n6ath7lTqzfdAX87c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>### get 请求并查看响应结果 使用变量
@token = {{loginAdmin.response.body.*}}
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://{{hostname}}/api/v1/users</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Authorization</span><span class="token punctuation">:</span> <span class="token header-value">Bearer {{token}}</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果返回体为如下：</p></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJwa3Nsb3ciLCJyb2xlcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTYyMjI3OTMxMCwiZXhwIjoxNjIyMjc5OTEwfQ.h-fwUEOPx_tttlBOR8cXMHJWy2n6ath7lTqzfdAX87c&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以通过 <code>{{loginAdmin.response.body.$.token}}</code> 来引用变量</li></ul><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>### get 请求并查看响应结果 使用变量
@token = {{loginAdmin.response.body.$.token}}
<span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">https://{{hostname}}/api/v1/users</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Authorization</span><span class="token punctuation">:</span> <span class="token header-value">Bearer {{token}}</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,9),h={href:"https://github.com/Huachao/vscode-restclient",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.pkslow.com/archives/vscode-rest-client",target:"_blank",rel:"noopener noreferrer"};function b(g,q){const e=o("ExternalLinkIcon");return l(),i("div",null,[d,c,n("ul",null,[n("li",null,[n("a",u,[s("REST Client"),a(e)]),s(" 是一个用于测试 RESTful API 的插件，可以在 VSCode 中直接发送 HTTP 请求并查看响应结果。")]),n("li",null,[n("a",v,[s("REST Client vscode"),a(e)])])]),m,n("ul",null,[n("li",null,[n("a",h,[s("REST Client github 地址"),a(e)])]),n("li",null,[n("a",k,[s("https://www.pkslow.com/archives/vscode-rest-client"),a(e)])])])])}const T=t(r,[["render",b],["__file","index.html.vue"]]);export{T as default};
