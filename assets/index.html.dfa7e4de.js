import{_ as e,r as p,o,c as i,a as n,b as s,d as c,e as a}from"./app.26c798e2.js";const l={},u=a(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><ul><li>老项目是 OC 语言实现了，引用了 Swift 框架。</li><li>新项目是 Swift 实现的，引用了 OC 框架，目前微信 SDK，支付宝 SDK 等都是 OC 实现 所以还需要学习一些相关知识。</li></ul><h2 id="如何实现" tabindex="-1"><a class="header-anchor" href="#如何实现" aria-hidden="true">#</a> 如何实现</h2><ul><li>通过官方提供桥接文件这种机制实现。</li></ul><h2 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性" aria-hidden="true">#</a> 兼容性</h2><ul><li>不论是 OC 项目调用 Swift，还是反过来都无法使用所有语法。 <ul><li>例如：OC 项目调用 Swift，无法使用 Swift 的泛型，枚举，结构体等。</li><li>反过来，Swift 项目调用 OC，无法使用 OC 的宏定义，指针等。</li><li>但是，可以使用桥接文件，将 OC 的头文件引入到 Swift 项目中，这样就可以使用 OC 的所有语法了。</li><li>但是，如果是 Swift 项目调用 OC，OC 项目调用 Swift，都可以使用桥接文件，但是，OC 项目调用 Swift，无法使用 Swift 的泛型，枚举，结构体等。</li></ul></li></ul><h2 id="oc-调用-swift" tabindex="-1"><a class="header-anchor" href="#oc-调用-swift" aria-hidden="true">#</a> OC 调用 Swift</h2><ul><li><p>创建<code>Swift</code>文件，类继承<code>NSObject</code>，方法和字段前面加<code>@objc</code>，如果不加<code>OC</code>中无法调用，但编译不报错。</p></li><li><p>创建桥接文件，第一次创建 Swift 文件时，会提示是否创建桥接文件，可以点击自动创建；又可以稍后手动创建，手动创建，还要开启在<code>target-Build Settings-All</code>中，找到<code>Defines Module</code>，设置为<code>Yes</code>；同样在 <code>Swift</code> 项目中第一次创建 <code>OC</code> 文件时也会提示。</p></li><li><p>在要使用 <code>Swift</code> 类的文件中调入自动生成的 <code>Swift</code> 兼容文件，和桥接文件。</p></li><li><p>Swift 文件</p></li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">//  目的是测试在OC中调用这个类的方法和字段</span>
<span class="token comment">//  一个Swift如果要在OC中使用，必须继承NSObject</span>
<span class="token comment">//  其他内容（方法，字段）如果要在OC中使用，前面必须加@objc</span>
<span class="token comment">//  注意：更改完代码，一定要要编译，OC那边才能引用</span>

<span class="token keyword">import</span> <span class="token class-name">Foundation</span>

<span class="token keyword">class</span> <span class="token class-name">TestSwiftObject</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span> <span class="token punctuation">{</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">var</span> var1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;这是变量1&quot;</span></span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">let</span> let1<span class="token punctuation">:</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;这是常量&quot;</span></span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">static</span> <span class="token keyword">let</span> staticLet<span class="token punctuation">:</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;这是静态常量&quot;</span></span>

    <span class="token comment">/// 静态计算属性</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token keyword">var</span> staticComputer1<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">get</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">10</span>
            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;这是静态的计算属性</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/// 静态计算属性</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">open</span> <span class="token keyword">var</span> computer1<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">get</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">*</span><span class="token number">12</span>
            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;这是计算属性</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/// 懒加载字段</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> lazyField1<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">*</span><span class="token number">12</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;TestSwiftObject lazyField1 这里的逻辑只会执行一次&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;这是懒加载字段</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">/// 静态登录方法</span>
    <span class="token comment">/// - Parameters:</span>
    <span class="token comment">///   - name: &lt;#name description#&gt;</span>
    <span class="token comment">///   - age: &lt;#age description#&gt;</span>
    <span class="token comment">/// - Returns: &lt;#description#&gt;</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;TestSwiftObject login </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token comment">/// 静态登录方法，方法的参数名省略了</span>
    <span class="token comment">/// - Parameters:</span>
    <span class="token comment">///   - name: &lt;#name description#&gt;</span>
    <span class="token comment">///   - age: &lt;#age description#&gt;</span>
    <span class="token comment">/// - Returns: &lt;#description#&gt;</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">login2</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token omit keyword">_</span> age<span class="token punctuation">:</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;TestSwiftObject login2 </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token comment">/// 登录方法</span>
    <span class="token comment">/// - Parameters:</span>
    <span class="token comment">///   - name: &lt;#name description#&gt;</span>
    <span class="token comment">///   - age: &lt;#age description#&gt;</span>
    <span class="token comment">/// - Returns: &lt;#description#&gt;</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">login11</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;TestSwiftObject login11 </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token comment">/// 登录方法，方法的参数名省略了</span>
    <span class="token comment">/// - Parameters:</span>
    <span class="token comment">///   - name: &lt;#name description#&gt;</span>
    <span class="token comment">///   - age: &lt;#age description#&gt;</span>
    <span class="token comment">/// - Returns: &lt;#description#&gt;</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">login12</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token omit keyword">_</span> age<span class="token punctuation">:</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;TestSwiftObject login12 </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>要使用导入桥接文件</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//导入桥接文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;TestOCUseSwift-Bridging-Header.h&quot;</span></span>

<span class="token comment">//如果当前项目有Swift文件，需要在targets的Build Settings将Defines Module设置为YES</span>
<span class="token comment">//然后编译项目，就会自动生成该文件，这个文件在Xcode中看不到，但可以直接引用</span>
<span class="token comment">//引用以后，才能在当前文件使用当前项目的Swift源码里面的内容</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;TestOCUseSwift-Swift.h&quot;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 Swift 类</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">//-------------方法测试</span>
<span class="token comment">//调用Swift类中的静态方法</span>
<span class="token class-name">NSString</span> <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">TestSwiftObject</span> loginWithName<span class="token punctuation">:</span>@<span class="token string-literal"><span class="token string">&quot;这是名称&quot;</span></span> age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;%@&quot;</span></span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Swift类中的静态方法，方法参数名称省略了</span>
result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name">TestSwiftObject</span> login2<span class="token punctuation">:</span>@<span class="token string-literal"><span class="token string">&quot;这是名称2&quot;</span></span> <span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;%@&quot;</span></span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//调用Swift类中的实例方法</span>
<span class="token class-name">TestSwiftObject</span> <span class="token operator">*</span>testObject <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token class-name">TestSwiftObject</span> alloc<span class="token punctuation">]</span> <span class="token keyword">init</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
result <span class="token operator">=</span> <span class="token punctuation">[</span>testObject login11WithName<span class="token punctuation">:</span>@<span class="token string-literal"><span class="token string">&quot;这是名称11&quot;</span></span> age<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;%@&quot;</span></span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//调用Swift类中的实例方法，方法参数名称省略了</span>
result <span class="token operator">=</span> <span class="token punctuation">[</span>testObject login12<span class="token punctuation">:</span>@<span class="token string-literal"><span class="token string">&quot;这是名称12&quot;</span></span> <span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;%@&quot;</span></span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//-------------字段</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;静态常量字段：%@&quot;</span></span><span class="token punctuation">,</span><span class="token class-name">TestSwiftObject</span><span class="token punctuation">.</span>staticLet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;常量：%@&quot;</span></span><span class="token punctuation">,</span>testObject<span class="token punctuation">.</span>let1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;变量：%@&quot;</span></span><span class="token punctuation">,</span>testObject<span class="token punctuation">.</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//-------------计算属性</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;静态计算属性：%@&quot;</span></span><span class="token punctuation">,</span><span class="token class-name">TestSwiftObject</span><span class="token punctuation">.</span>staticComputer1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;计算属性：%@&quot;</span></span><span class="token punctuation">,</span>testObject<span class="token punctuation">.</span>computer1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//-------------懒加载字段</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;懒加载：%@&quot;</span></span><span class="token punctuation">,</span>testObject<span class="token punctuation">.</span>lazyField1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">&quot;懒加载：%@&quot;</span></span><span class="token punctuation">,</span>testObject<span class="token punctuation">.</span>lazyField1<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以看到能正常调用，像 Swift 中的枚举，结构体就不再演示了，目前是没法使用的，预计以后也不可能兼容。</li></ul><h2 id="oc-调用-swift-第三方框架" tabindex="-1"><a class="header-anchor" href="#oc-调用-swift-第三方框架" aria-hidden="true">#</a> OC 调用 Swift 第三方框架</h2>`,15),r={href:"https://github.com/danielgindi/Charts",target:"_blank",rel:"noopener noreferrer"},k=n("li",null,[n("p",null,"在桥接文件中导入第三方框架的头文件")],-1),d=a(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//在这个文件导入第三方Swift框架模块</span>
<span class="token operator">@</span>import Charts<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用： 例如折线图</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//显示一个折线图</span>

<span class="token comment">//设置代理，通过他可以监听一些事件</span>
_chartView<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>

<span class="token comment">//要显示的数据，例如：模拟爱学啊1~6月份，收入金额</span>
NSArray <span class="token operator">*</span>datas <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">[</span><span class="token operator">@</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token operator">@</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token operator">@</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token operator">@</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token operator">@</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token operator">@</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token operator">@</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

NSMutableArray <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableArray array<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>datas<span class="token punctuation">.</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建ChartDataEntry对象并将每个点对应的值与x轴 y轴进行绑定</span>
    <span class="token comment">//x就是月份，y就是值</span>
    ChartDataEntry <span class="token operator">*</span>entry <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ChartDataEntry alloc<span class="token punctuation">]</span> initWithX<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span> y<span class="token punctuation">:</span><span class="token punctuation">[</span>datas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> intValue<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>array addObject<span class="token punctuation">:</span>entry<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//创建一个集合并为这个集合赋值 label的值可为空</span>
LineChartDataSet <span class="token operator">*</span>set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>LineChartDataSet alloc<span class="token punctuation">]</span> initWithEntries<span class="token punctuation">:</span>array label<span class="token punctuation">:</span><span class="token string">@&quot;收入金额&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//创建容器</span>
LineChartData <span class="token operator">*</span>chartData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>LineChartData alloc<span class="token punctuation">]</span> initWithDataSet<span class="token punctuation">:</span>set<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">self</span><span class="token punctuation">.</span>chartView<span class="token punctuation">.</span>data <span class="token operator">=</span> chartData<span class="token punctuation">;</span>

<span class="token comment">//以动画的方式绘制折线，动画持续2.5秒</span>
<span class="token punctuation">[</span>_chartView animateWithXAxisDuration<span class="token punctuation">:</span><span class="token number">2.5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="swift-调用-oc" tabindex="-1"><a class="header-anchor" href="#swift-调用-oc" aria-hidden="true">#</a> swift 调用 OC</h2><ul><li>创建 OC 类</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// TestObject.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>Foundation<span class="token operator">/</span>Foundation<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>


NS_ASSUME_NONNULL_BEGIN

<span class="token comment">//普通宏，可以在 Siwft 中访问</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ICON_WIDTH</span> <span class="token expression"><span class="token number">1228</span></span></span>

<span class="token comment">//复杂宏</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCEREEN_WIDTH</span> <span class="token expression"><span class="token punctuation">[</span><span class="token punctuation">[</span>UIScreen mainScreen<span class="token punctuation">]</span> bounds<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width</span></span>

<span class="token comment">//这是一个常量</span>
<span class="token keyword">static</span> NSString \\<span class="token operator">*</span> <span class="token keyword">const</span> ICON_NAME <span class="token operator">=</span> <span class="token string">@&quot;ixuea&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">@interface</span> TestObject <span class="token punctuation">:</span> NSObject

<span class="token keyword">@property</span> <span class="token punctuation">(</span>strong<span class="token punctuation">,</span>nonatomic<span class="token punctuation">)</span> NSString \\<span class="token operator">*</span>var1<span class="token punctuation">;</span>

<span class="token comment">/// 静态登录方法</span>
<span class="token comment">/// @param name &lt;#name description#&gt;</span>
<span class="token comment">/// @param age &lt;#age description#&gt;</span>
<span class="token operator">+</span><span class="token punctuation">(</span>NSString _<span class="token punctuation">)</span>loginWithName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString _<span class="token punctuation">)</span>name age<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>age<span class="token punctuation">;</span>

<span class="token comment">/// 登录方法</span>
<span class="token comment">/// @param name &lt;#name description#&gt;</span>
<span class="token comment">/// @param age &lt;#age description#&gt;</span>
<span class="token operator">-</span><span class="token punctuation">(</span>NSString _<span class="token punctuation">)</span>login11WithName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString _<span class="token punctuation">)</span>name age<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>age<span class="token punctuation">;</span>

<span class="token keyword">@end</span>

NS_ASSUME_NONNULL_END

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// TestObject.m</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;TestObject.h&quot;</span></span>

<span class="token keyword">@implementation</span> TestObject

<span class="token operator">-</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>init<span class="token punctuation">{</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _var1 <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@&quot;%@ %@&quot;</span><span class="token punctuation">,</span><span class="token string">@&quot;这是变量1&quot;</span><span class="token punctuation">,</span>ICON_NAME<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">+</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>loginWithName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name age<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>age<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@&quot;TestObject static loginWithName %@ %d&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>login11WithName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name age<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>age<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@&quot;TestObject login11WithName %@ %d&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">@end</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导入头文件,<code>TestSwiftUseOC-Bridging-Header.h</code></li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>
<span class="token comment">//导入OC头文件，当前项目的，第三方框架的都要导入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;TestObject.h&quot;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用类</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">//调用OC类中的静态方法</span>
<span class="token keyword">var</span> result<span class="token operator">=</span><span class="token class-name">TestObject</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>withName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;这是名称&quot;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token comment">//调用OC类中的实例方法</span>
<span class="token keyword">let</span> testObject <span class="token operator">=</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> testObject<span class="token punctuation">.</span><span class="token function">login11</span><span class="token punctuation">(</span>withName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;这是名称11&quot;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token comment">//-------------字段</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;变量：</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">testObject<span class="token punctuation">.</span>var1</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;常量：</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token constant">ICON_NAME</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment">//-------------宏，只能访问普通的宏，复杂的宏不能访问</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;简单宏：</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token constant">ICON_WIDTH</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//print(&quot;访问复杂宏：\\(SCEREEN_WIDTH)&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="swift-调用-oc-第三方框架" tabindex="-1"><a class="header-anchor" href="#swift-调用-oc-第三方框架" aria-hidden="true">#</a> Swift 调用 OC 第三方框架</h2><ul><li>添加依赖: 例如这里使用微信 SDK 作为演示，目前微信 SDK 是 OC 实现了</li></ul><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment">#微信sdk，OC实现的</span>
<span class="token comment">#https://developers.weixin.qq.com/doc/oplatform/Mobile_App/Access_Guide/iOS.html</span>
pod <span class="token string-literal"><span class="token string">&#39;WechatOpenSDK&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在桥接文件中导入, <code>TestSwiftUseOC-Bridging-Header.h</code></li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//微信SDK</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>WechatOpenSDK<span class="token operator">/</span>WXApi<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">WXApi</span><span class="token punctuation">.</span><span class="token function">registerApp</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> universalLink<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18);function m(v,b){const t=p("ExternalLinkIcon");return o(),i("div",null,[u,n("ul",null,[n("li",null,[n("p",null,[s("通过 Pod 安装 Swift 第三方框架，例如："),n("a",r,[s("Charts"),c(t)]),s(" 框架，他是一个使用 Swift 语言编写的图表框架，他是兼容 OC 调用才能调用，所以并不是所有 Swift 框架都能在 OC 中使用，这一步是正常使用")])]),k]),d])}const w=e(l,[["render",m],["__file","index.html.vue"]]);export{w as default};
