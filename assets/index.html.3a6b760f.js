import{_ as r,r as s,o as i,c,a as e,b as a,d as o,e as t}from"./app.26c798e2.js";const p="/article/images/2021_uni-app/img/2021-12-31-16-49-24.png",d="/article/images/2021_uni-app/img/2021-12-31-17-54-12.png",l="/article/images/2021_uni-app/img/2021-12-31-17-55-40.png",h="/article/images/2021_uni-app/img/2021-12-31-18-01-45.png",m="/article/images/2021_uni-app/img/2021-12-31-18-06-04.png",u="/article/images/2021_uni-app/img/2021-12-31-18-16-04.png",_="/article/images/2021_uni-app/img/2021-12-31-18-21-57.png",g="/article/images/2021_uni-app/img/2021-12-31-18-36-56.png",k="/article/images/2021_uni-app/img/2021-12-31-19-03-01.png",b="/article/images/2021_uni-app/img/2021-12-31-19-14-48.png",f="/article/images/2021_uni-app/img/2021-12-31-19-17-24.png",v="/article/images/2021_uni-app/img/2021-12-31-19-18-13.png",x="/article/images/2021_uni-app/img/2021-12-31-19-23-31.png",q="/article/images/2021_uni-app/img/2021-12-31-19-28-50.png",H="/article/images/2021_uni-app/img/2021-12-31-19-38-08.png",y={},D=t('<h1 id="第-11-章-多平台适配" tabindex="-1"><a class="header-anchor" href="#第-11-章-多平台适配" aria-hidden="true">#</a> 第 11 章 多平台适配</h1><h3 id="_1-开篇" tabindex="-1"><a class="header-anchor" href="#_1-开篇" aria-hidden="true">#</a> <mark>1）开篇</mark></h3><p>在上一章中，我们知道了，当【慕课热搜】运行到 <code>h5</code> 端的时候，那么会出现一些问题，这些问题具体有：</p><ol><li><code>hot</code> 列表滚动，<code>tabs</code> 置顶效果消失</li><li>在火狐浏览器中，横线出现非常粗的滚动条</li><li>进行文章详情再返回，会出现 <code>ui</code> 错乱</li><li>文章详情无法展示</li><li>文章详情样式问题（现在无法看到）</li><li>热播视频全部无法播放</li><li>登录功能无法使用</li></ol><p>那么本章节中，我们就会专门来去处理这些问题。</p><p>这些问题处理的过程，也就是 <strong>项目适配到 <code>h5</code> 的过程。</strong></p><p>针对每个问题的处理，我们会分成三块来进行讲解，分别是：</p><ol><li>分析问题出现的原因</li><li>提出对应的解决方案</li><li>完成该问题的处理代码</li></ol><blockquote><p>这个问题为何会出现？ -&gt; 提出解决这个问题的方案 -&gt; 用代码解决之！</p></blockquote><p>那么一切准备就绪，接下来就进入我们本章节的内容吧。</p><h3 id="_2-uniapp-中的条件编译" tabindex="-1"><a class="header-anchor" href="#_2-uniapp-中的条件编译" aria-hidden="true">#</a> <mark>2）uniapp 中的条件编译</mark></h3>',11),L={href:"https://uniapp.dcloud.io/platform",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>我们可以通过：<strong>特殊的注释作为标记，将注释里面的代码编译到不同平台</strong>。</p><p>这样的注释主要有两种：</p><ol><li>以 <code>#ifdef %PLATFORM% </code> 开头，以 <code>#endif</code> 结尾：仅在某平台存在</li><li>以 <code>#ifndef %PLATFORM% </code> 开头，以 <code>#endif</code> 结尾：除了某平台均存在</li></ol><blockquote><p><code>if defined</code>和<code>if not defined</code>，前者是让代码只在这个平台有效，而后者则是让代码不在这个平台有效，而对于其它平台是有效的</p></blockquote><p>其中 <code>%PLATFORM% </code> 表示 <strong>平台名称</strong></p><blockquote><p>平台的取值有：<code>H5</code>、<code>MP-WEIXIN</code>、<code>VUE3</code>等</p></blockquote><p>比如说，我们可以在 <code>App.vue</code> 中，写下这样一行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* #ifdef H5 */</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前处于 H5 编译平台&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* #endif */</span>
    <span class="token comment">/* #ifndef H5 */</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前处于非 H5 编译平台&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* #endif */</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 <code>当前处于 H5 编译平台</code> 只会在 <strong>浏览器打印</strong></p><p><code>当前处于非 H5 编译平台</code> 只会在 <strong>非浏览器打印</strong></p>`,10),T=e("code",null,"%PLATFORM% ",-1),E={href:"https://uniapp.dcloud.io/platform",target:"_blank",rel:"noopener noreferrer"},N=e("p",null,"那么在了解了，条件编译的语法之后，接下来我们就可以处理 多平台适配相关的内容了。",-1),j=e("p",null,"💡：代码测试",-1),A=e("p",null,[e("img",{src:p,alt:"效果"})],-1),M={href:"https://github.com/ppambler/imooc-uni-app/commit/1f7a179",target:"_blank",rel:"noopener noreferrer"},R=t('<h3 id="_3-多平台适配-tabs-置顶效果消失" tabindex="-1"><a class="header-anchor" href="#_3-多平台适配-tabs-置顶效果消失" aria-hidden="true">#</a> <mark>3）多平台适配 - <code>tabs</code> 置顶效果消失</mark></h3><h4 id="_1、分析原因" tabindex="-1"><a class="header-anchor" href="#_1、分析原因" aria-hidden="true">#</a> <mark>1、分析原因</mark></h4><p>在控制台中检查 <code>tab-sticky</code> 的，我们可以发现 它的样式指定其实是没有问题的：</p><p><img src="'+d+'" alt="样式"></p><p><code>position: sticky</code> 依然生效，那么问题是出现在哪里呢？</p><p>当我们把页面进行滚动之后，然后再控制台查看 <code>tab-sticky</code> 的位置，此时我们就可以发现问题：</p><p><img src="'+l+'" alt="tab"></p><p><code>tab-sticky</code> 虽然吸顶了，但是它的吸顶位置为 <code>top:0</code> 。</p><p>这样的效果在 <strong>微信小程序是没有问题的</strong>，但是在 <strong>浏览器端就会被遮挡！</strong></p><h4 id="_2、解决方案" tabindex="-1"><a class="header-anchor" href="#_2、解决方案" aria-hidden="true">#</a> <mark>2、解决方案</mark></h4><p>明确了原因之后，想要处理这个问题就很容易了。我们只需要在 <strong>浏览器端调整 <code>top</code> 的位置就可以了。</strong></p><h4 id="_3、处理代码" tabindex="-1"><a class="header-anchor" href="#_3、处理代码" aria-hidden="true">#</a> <mark>3、处理代码</mark></h4><p><img src="'+h+'" alt="效果"></p>',13),V={href:"https://github.com/ppambler/imooc-uni-app/commit/fd960f9",target:"_blank",rel:"noopener noreferrer"},B=t('<h3 id="_4-多平台适配-火狐浏览器处理粗滚动条" tabindex="-1"><a class="header-anchor" href="#_4-多平台适配-火狐浏览器处理粗滚动条" aria-hidden="true">#</a> <mark>4）多平台适配 - 火狐浏览器处理粗滚动条</mark></h3><p><img src="'+m+'" alt="滚动条"></p><h4 id="_1、分析原因-1" tabindex="-1"><a class="header-anchor" href="#_1、分析原因-1" aria-hidden="true">#</a> <mark>1、分析原因</mark></h4><p>在浏览器中出现 <strong>粗滚动条</strong> 的原因是因为： <strong>浏览器对滚动条的处理问题</strong>。</p><h4 id="_2、解决方案-1" tabindex="-1"><a class="header-anchor" href="#_2、解决方案-1" aria-hidden="true">#</a> <mark>2、解决方案</mark></h4><p>隐藏浏览器滚动条</p><h4 id="_3、处理代码-1" tabindex="-1"><a class="header-anchor" href="#_3、处理代码-1" aria-hidden="true">#</a> <mark>3、处理代码</mark></h4><p><img src="'+u+'" alt="效果"></p>',8),F={href:"https://github.com/ppambler/imooc-uni-app/commit/d77bee7",target:"_blank",rel:"noopener noreferrer"},I=t('<h3 id="_5-多平台适配-ui-错乱-与-文章详情无法展示" tabindex="-1"><a class="header-anchor" href="#_5-多平台适配-ui-错乱-与-文章详情无法展示" aria-hidden="true">#</a> <mark>5）多平台适配 - <code>ui</code> 错乱 与 文章详情无法展示</mark></h3><h4 id="_1、分析原因-2" tabindex="-1"><a class="header-anchor" href="#_1、分析原因-2" aria-hidden="true">#</a> <mark>1、分析原因</mark></h4><p>在我们刚进入到首页的时候，我们的 <code>ui</code> 是没有任何问题的。但是当我们进入到 <strong>文章详情</strong> 在返回到首页时，我们就会发现：<strong><code>item</code> 的 <code>ui</code> 变得错乱了</strong></p><p><img src="'+_+`" alt="样式错乱"></p><p>那么想要去分析这个问题的原因，就需要到 <strong>文章详情</strong> 页面，看一下，看看 <strong>文章详情</strong> 究竟做了什么事情。</p><p>在 <strong>文章详情</strong> 中，我们之前使用过 <code>page-meta</code> 来去处理：<strong>微信小程序中文章详情文字过小的问题</strong>。</p><p>而现在在 <strong>浏览器端</strong> 之所以出现这些问题，就是因为 <code>page-meta</code> 导致的。</p><h4 id="_2、解决方案-2" tabindex="-1"><a class="header-anchor" href="#_2、解决方案-2" aria-hidden="true">#</a> <mark>2、解决方案</mark></h4><p>在 <code>h5</code> 中，不使用 <code>page-mate</code> ，只使用 <code>article-detail.scss</code> 中的</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">html</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 52px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即可</p><h4 id="_3、处理代码-2" tabindex="-1"><a class="header-anchor" href="#_3、处理代码-2" aria-hidden="true">#</a> <mark>3、处理代码</mark></h4><p><img src="`+g+'" alt="效果"></p>',13),O={href:"https://github.com/ppambler/imooc-uni-app/commit/ba7ec15",target:"_blank",rel:"noopener noreferrer"},z=t('<h3 id="_6-多平台适配-文章详情样式处理" tabindex="-1"><a class="header-anchor" href="#_6-多平台适配-文章详情样式处理" aria-hidden="true">#</a> <mark>6）多平台适配 - 文章详情样式处理</mark></h3><h4 id="_1、分析原因-3" tabindex="-1"><a class="header-anchor" href="#_1、分析原因-3" aria-hidden="true">#</a> <mark>1、分析原因</mark></h4><p>通过控制台查看，我们可以发现 <code>article-detail.scss</code> 文件的样式并没有生效，出现这个问题的原因，是因为当 <code>uni-app</code> 运行到浏览器端的时候，页面组件中 <code>style</code> 标签的引入会失效。</p><h4 id="_2、解决方案-3" tabindex="-1"><a class="header-anchor" href="#_2、解决方案-3" aria-hidden="true">#</a> <mark>2、解决方案</mark></h4><p>在 <code>main.js</code> 中统一引入</p><h4 id="_3、处理代码-3" tabindex="-1"><a class="header-anchor" href="#_3、处理代码-3" aria-hidden="true">#</a> <mark>3、处理代码</mark></h4><p><img src="'+k+'" alt="效果"></p>',7),W={href:"https://github.com/ppambler/imooc-uni-app/commit/50f1c1b",target:"_blank",rel:"noopener noreferrer"},C=t('<h3 id="_7-多平台适配-热播视频全部无法播放" tabindex="-1"><a class="header-anchor" href="#_7-多平台适配-热播视频全部无法播放" aria-hidden="true">#</a> <mark>7）多平台适配 - 热播视频全部无法播放</mark></h3><h4 id="_1、分析原因-4" tabindex="-1"><a class="header-anchor" href="#_1、分析原因-4" aria-hidden="true">#</a> <mark>1、分析原因</mark></h4><p>在浏览器中视频无法播放，并且会出现 <code>403</code> 的错误。</p><p>对于这一块，大家需要首先先明确 <code>403</code> 错误表示的是什么意思：</p><blockquote><p>403 错误是一种在网站访问过程中，常见的错误提示，表示资源不可用。 服务器理解客户的请求，但拒绝处理它，通常由于服务器上文件或目录的权限设置导致的 WEB 访问错误。</p></blockquote><p>简单来说就是：服务端不愿意处理你的请求。</p><p>在某些网站中，服务端只会处理 <strong>它信任的客户端请求，而不愿意处理它不认识的客户端的请求。</strong></p><p>而想要解决这个问题，我们就需要对 <strong>请求进行伪装</strong>，我们无法伪装成 <strong>他信任的人</strong>，但是我们可以 <strong>隐藏身份，让服务端不确定它是不是认识你。</strong> 这样在默认情况下，<strong>服务端就 “勉为其难” 的处理你的请求</strong>。</p><blockquote><p>不认识你就行了？</p></blockquote>',9),w={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referrer-Policy",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"no-referrer",-1),U=e("h4",{id:"_2、解决方案-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2、解决方案-4","aria-hidden":"true"},"#"),a(),e("mark",null,"2、解决方案")],-1),X=e("code",null,"index.html",-1),G=e("strong",null,"根模板",-1),J={href:"https://uniapp.dcloud.io/collocation/manifest?id=h5",target:"_blank",rel:"noopener noreferrer"},K=t('<li><p>添加 <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code> 标签</p></li><li><p>在 <code>manifest.json-&gt;h5-&gt;template</code> 节点中关联这个<code>html</code>文件的路径</p><p><img src="'+b+'" alt="节点配置"></p></li><li><p>重新编译项目到浏览器</p></li>',3),Q=t('<p>注意，这个项目在创建的时候，给了这个模板：</p><p><img src="'+f+'" alt="模板"></p><p>它的效果是：</p><p><img src="'+v+'" alt="效果"></p><p>拷贝官方的自定义模板就好了</p><h4 id="_3、处理代码-4" tabindex="-1"><a class="header-anchor" href="#_3、处理代码-4" aria-hidden="true">#</a> <mark>3、处理代码</mark></h4><p><img src="'+x+'" alt="效果"></p><p>不管是图片 403，还是视频 403，现在统统都没有了</p>',8),Y={href:"https://github.com/ppambler/imooc-uni-app/commit/b59e813",target:"_blank",rel:"noopener noreferrer"},Z=t('<h3 id="_8-多平台适配-一键登录功能" tabindex="-1"><a class="header-anchor" href="#_8-多平台适配-一键登录功能" aria-hidden="true">#</a> <mark>8）多平台适配 - 一键登录功能</mark></h3><h4 id="_1、分析原因-5" tabindex="-1"><a class="header-anchor" href="#_1、分析原因-5" aria-hidden="true">#</a> <mark>1、分析原因</mark></h4><p>在 <code>my-login</code> 中，只处理了 <strong>微信一键登录</strong> 的功能</p><p><img src="'+q+'" alt="一键登录"></p><h4 id="_2、解决方案-5" tabindex="-1"><a class="header-anchor" href="#_2、解决方案-5" aria-hidden="true">#</a> <mark>2、解决方案</mark></h4><p>按照接口，直接处理对应数据即可</p><p>给了一个模拟的用户信息，一般在 H5 端是让用户注册，让用户自己填信息！而微信小程序不需要注册，直接用该微信用户的信息就好了！</p><h4 id="_3、处理代码-5" tabindex="-1"><a class="header-anchor" href="#_3、处理代码-5" aria-hidden="true">#</a> <mark>3、处理代码</mark></h4><p><img src="'+H+'" alt="效果"></p>',9),$={href:"https://github.com/ppambler/imooc-uni-app/commit/4ac1980",target:"_blank",rel:"noopener noreferrer"},ee=t('<h3 id="_9-总结" tabindex="-1"><a class="header-anchor" href="#_9-总结" aria-hidden="true">#</a> <mark>9）总结</mark></h3><p>本章节中，我们处理了 <strong>多平台适配</strong> 的问题，其中的核心 <code>api</code> 就是 <strong><code>uni</code> 所提供的条件编译语法</strong></p><p>那么到现在为止【慕课热搜】已经可以在：</p><ol><li>微信小程序</li><li><code>h5</code></li></ol><p>进行运行了。这样其实就已经达到了我们的目的。</p><p>这里大家要注意，在实际的开发场景中，我们去进行 <strong>多平台适配</strong> 的时候，并不是适配的越多越好的。</p><blockquote><p>我们这里只适配了 H5 端 和 微信小程序</p></blockquote><p>为啥不是适配越多越好？</p><p>因为适配的越多，证明我们需要付出的成本越大。</p><p>所以，在实际开发场景里边，为了控制成本，通常我们会根据我们的应用属性，来决定我们的应用要适配哪些平台。</p><p>比如说：</p><p>如果你的应用是涉及到 <strong>支付</strong> 相关的，那么一般需要适配：</p><ul><li>微信小程序</li><li>支付宝小程序（适配支付宝小程序同样用条件编译语法来搞）</li></ul><p>如果是非支付相关的（如当前的这个慕课热搜项目），一般只需要：</p><ul><li>微信小程序</li><li><code>h5</code></li></ul><p>就可以了。</p>',16);function ae(ne,oe){const n=s("ExternalLinkIcon");return i(),c("div",null,[D,e("p",null,[a("想要搞定适配的功能，那么我们首先需要了解一个东西，那就是："),e("a",L,[a("条件编译"),o(n)])]),P,e("p",null,[a("具体的 "),T,a(" 取值，大家可以参考 "),e("a",E,[a("条件编译官方文档"),o(n)]),a(" ， 这里就不作一一的赘述了。")]),N,j,A,e("blockquote",null,[e("p",null,[e("a",M,[a("Demo"),o(n)])])]),R,e("blockquote",null,[e("p",null,[e("a",V,[a("Demo"),o(n)])])]),B,e("blockquote",null,[e("p",null,[e("a",F,[a("Demo"),o(n)])])]),I,e("blockquote",null,[e("p",null,[e("a",O,[a("Demo"),o(n)])])]),z,e("blockquote",null,[e("p",null,[e("a",W,[a("Demo"),o(n)])])]),C,e("p",null,[a("那么想要进行伪装，就需要使用到 "),e("a",w,[a("referrer"),o(n)]),a(" 的 "),S,a(" 指令")]),U,e("ol",null,[e("li",null,[e("p",null,[a("在项目的根目录创建 "),X,a(" 文件，作为 "),G,a("。（可参考："),e("a",J,[a("自定义模板"),o(n)]),a(" 相关文档）")])]),K]),Q,e("blockquote",null,[e("p",null,[e("a",Y,[a("Demo"),o(n)])])]),Z,e("blockquote",null,[e("p",null,[e("a",$,[a("Demo"),o(n)])])]),ee])}const re=r(y,[["render",ae],["__file","index.html.vue"]]);export{re as default};
