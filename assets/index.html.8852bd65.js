import{_ as s,r as p,o as i,c as r,a as e,b as o,d as n,e as t}from"./app.26c798e2.js";const l="/article/images/2021_uni-app/img/2021-12-29-15-05-56.png",c="/article/images/2021_uni-app/img/2021-12-29-18-09-15.png",d="/article/images/2021_uni-app/img/2021-12-29-19-13-49.png",u="/article/images/2021_uni-app/img/2021-12-29-19-42-43.png",m="/article/images/2021_uni-app/img/2021-12-29-20-09-02.png",_="/article/images/2021_uni-app/img/2021-12-29-21-12-44.png",h="/article/images/2021_uni-app/img/2021-12-29-23-38-10.png",g="/article/images/2021_uni-app/img/2021-12-29-23-46-12.png",k="/article/images/2021_uni-app/img/2021-12-29-23-47-53.png",b="/article/images/2021_uni-app/img/2021-12-30-18-21-49.png",v="/article/images/2021_uni-app/img/2021-12-30-19-14-51.png",f="/article/images/2021_uni-app/img/2021-12-30-19-20-28.png",q="/article/images/2021_uni-app/img/2021-12-30-20-42-15.png",y="/article/images/2021_uni-app/img/2021-12-30-21-50-17.png",x="/article/images/2021_uni-app/img/2021-12-30-23-44-54.png",D={},j=t('<h1 id="第-10-章-热播模块" tabindex="-1"><a class="header-anchor" href="#第-10-章-热播模块" aria-hidden="true">#</a> 第 10 章 热播模块</h1><h3 id="_1-开篇" tabindex="-1"><a class="header-anchor" href="#_1-开篇" aria-hidden="true">#</a> <mark>1）开篇</mark></h3><p>在本章节中我们将要完成【慕课热搜】中的最后一个模块【热播】。</p><p><img src="'+l+'" alt="效果"></p><p>【热播模块】分为两个页面：</p><ol><li>热播列表</li><li>热播详情</li></ol><p>对于【热播列表】而言，包含：</p><ol><li>下拉刷新 + 上拉加载更多</li><li>视频播放（<code>video</code> 组件）</li></ol><p>对于【热播详情】而言，包含：</p><ol><li>视频播放（<code>video</code> 组件）</li><li>分页的弹幕列表</li><li>发表弹幕</li><li>点赞 + 收藏</li></ol><p>所以说，对于【热播】模块而言，核心的点在于【视频播放】，也就是 <code>video</code> 组件的用法。</p><p>那么下面就让我们来开始【热播模块】的开发吧</p><blockquote><p>控制台出现「渲染层网络层错误」 -&gt; 这不是前端代码的问题，这是视频请求的问题！ -&gt; 我们可以忽略它</p></blockquote><h3 id="_2-热播列表-获取热播列表数据" tabindex="-1"><a class="header-anchor" href="#_2-热播列表-获取热播列表数据" aria-hidden="true">#</a> <mark>2）热播列表 - 获取热播列表数据</mark></h3><ol><li>定义接口：<code>api/video</code></li><li>在 <code>hot-video</code> 中获取数据</li></ol><p><img src="'+c+'" alt="效果"></p>',16),w={href:"https://github.com/ppambler/imooc-uni-app/commit/b6c14dd",target:"_blank",rel:"noopener noreferrer"},L=e("h3",{id:"_3-热播列表-渲染-ui-结构",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-热播列表-渲染-ui-结构","aria-hidden":"true"},"#"),o(),e("mark",null,"3）热播列表 - 渲染 UI 结构")],-1),V={href:"https://uniapp.dcloud.io/component/video",target:"_blank",rel:"noopener noreferrer"},I=e("p",null,"效果：",-1),N=e("p",null,[e("img",{src:d,alt:"效果"})],-1),B={href:"https://github.com/ppambler/imooc-uni-app/commit/b07a3aa",target:"_blank",rel:"noopener noreferrer"},E=t('<h3 id="_4-热播列表-列表的下拉刷新与上拉加载" tabindex="-1"><a class="header-anchor" href="#_4-热播列表-列表的下拉刷新与上拉加载" aria-hidden="true">#</a> <mark>4）热播列表 - 列表的下拉刷新与上拉加载</mark></h3><ol><li><code>hot-video</code>：在页面中使用 <code>mescroll</code> 比较简单（之前我们是在组件中使用） <ol><li>导入 <code>mescroll-body</code></li><li>导入 <code>mixin</code></li><li>注册 <code>mixin</code></li><li>实现回调方法</li></ol></li></ol><p><img src="'+u+'" alt="热播列表"></p>',3),C={href:"https://github.com/ppambler/imooc-uni-app/commit/cf950bb",target:"_blank",rel:"noopener noreferrer"},T=e("h3",{id:"_5-热播列表-点击进入详情页",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-热播列表-点击进入详情页","aria-hidden":"true"},"#"),o(),e("mark",null,"5）热播列表 - 点击进入详情页")],-1),U=e("p",null,[e("img",{src:m,alt:"详情页"})],-1),z={href:"https://github.com/ppambler/imooc-uni-app/commit/feda621",target:"_blank",rel:"noopener noreferrer"},R=t('<h3 id="_6-热播详情-渲染详情页面的视频组件" tabindex="-1"><a class="header-anchor" href="#_6-热播详情-渲染详情页面的视频组件" aria-hidden="true">#</a> <mark>6）热播详情 - 渲染详情页面的视频组件</mark></h3><p>没有获取单个视频的接口，我们需要把单个视频的数据传给热播详情页</p><p>因为在 <code>Uniapp</code> 中无法直接通过 <code>navigateTo</code> 方法，传递一个复杂的对象。 -&gt; <code>url</code> 参数是有大小限制的</p><p>在为了不影响 <strong>简洁数据流</strong> 的前提下，我们通过 <code>vuex</code> 来保存当前用户点击的 <code>video</code> 数据。</p><ol><li>创建 <code>store/video</code> 模块</li><li>在 <code>store/index</code> 中注册 <code>video</code> 模块</li><li>监听 <code>hot-video-item</code> 中 <code>info</code> 的点击事件，对父组件传递事件</li><li>在 <code>hot-video</code> 页面中进行跳转</li><li>在 <code>video-detail</code> 中获取 <code>video</code> 数据，同时构建页面</li></ol><p>效果：</p><p><img src="'+_+'" alt="效果"></p>',7),S={href:"https://github.com/ppambler/imooc-uni-app/commit/d31fbfa",target:"_blank",rel:"noopener noreferrer"},A=t(`<h3 id="_7-热播详情-展示视频弹幕" tabindex="-1"><a class="header-anchor" href="#_7-热播详情-展示视频弹幕" aria-hidden="true">#</a> <mark>7）热播详情 - 展示视频弹幕</mark></h3><p>想要展示视频弹幕，那么首先我们需要获取到 <strong>视频弹幕数据</strong></p><ol><li>定义 <code>api</code> 请求接口</li><li>在 <code>video-detail</code> 中调用该接口，并把获取到的数据通过 <code>danmu-list</code> 绑定到 <code>video</code> 组件中</li><li>注意：为了防止无法找到弹幕视频的情况，我们可以使用该数据来进行调试</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;8094282426594482339&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;2 首民谣《二泉映月》《爱情路上风雨多》句句独特，希望你会喜欢&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">author_avatar</span><span class="token operator">:</span> <span class="token string">&quot;https://pic.rmb.bdstatic.com/bjh/user/2d39834af3abb3648bf481159561c25f.jpeg?x-bce-process=image/resize,m_lfit,w_200,h_200&amp;autime=11152&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">poster_small</span><span class="token operator">:</span>
    <span class="token string">&quot;https://tukuimg.bdstatic.com/processed/2cfa34e3dc199083960fdc0281edd472.jpeg@s_0,w_660,h_370,q_80&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">poster_big</span><span class="token operator">:</span>
    <span class="token string">&quot;https://tukuimg.bdstatic.com/processed/2cfa34e3dc199083960fdc0281edd472.jpeg@s_0,w_660,h_370,q_80&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">poster_pc</span><span class="token operator">:</span>
    <span class="token string">&quot;https://tukuimg.bdstatic.com/processed/2cfa34e3dc199083960fdc0281edd472.jpeg@s_0,w_660,h_370,q_80,f_webp&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">source_name</span><span class="token operator">:</span> <span class="token string">&quot;小于歌唱&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">play_url</span><span class="token operator">:</span>
    <span class="token string">&quot;http://vd2.bdstatic.com/mda-mjackqq9kjp5tdpi/cae_h264_nowatermark/1633943179857973669/mda-mjackqq9kjp5tdpi.mp4?v_from_s=hkapp-haokan-hbe&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token string">&quot;06:37&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://haokan.hao123.com/v?vid=8094282426594482339&amp;pd=&amp;context=&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">show_tag</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">publish_time</span><span class="token operator">:</span> <span class="token string">&quot;2021 年 06 月 13 日&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">is_pay_column</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">like</span><span class="token operator">:</span> <span class="token string">&quot;163&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">comment</span><span class="token operator">:</span> <span class="token string">&quot;41&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">playcnt</span><span class="token operator">:</span> <span class="token string">&quot;3020&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fmplaycnt</span><span class="token operator">:</span> <span class="token string">&quot;3020 次播放&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fmplaycnt_2</span><span class="token operator">:</span> <span class="token string">&quot;3020&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">outstand_tag</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要把该数据指定到 <code>vuex</code> 的 <code>video</code> 模块下的 <code>videoData</code> 中，然后指定 <strong>编译模式到 <code>video-detail</code> 即可</strong></p><p>效果：</p><p><img src="`+h+'" alt="效果"></p>',7),F={href:"https://github.com/ppambler/imooc-uni-app/commit/e1f1e9a",target:"_blank",rel:"noopener noreferrer"},G=t('<h3 id="_8-热播详情-渲染全部弹幕模块" tabindex="-1"><a class="header-anchor" href="#_8-热播详情-渲染全部弹幕模块" aria-hidden="true">#</a> <mark>8）热播详情 - 渲染全部弹幕模块</mark></h3><p>弹幕的数据直接使用 <code>getVideoDanmuList</code> 的接口即可，如果想要实现分页功能，可以使用 <code>/video/comment/list</code> 接口获取分页的评论数据</p><p>提供了两个接口，一个是获取全部弹幕数据，也就是全部评论数据（选择这个），另一个则是分页获取（用于熟悉之前的分页评论功能，用作练习）</p><p>效果：</p><p><img src="'+g+'" alt="效果"></p>',5),H={href:"https://github.com/ppambler/imooc-uni-app/commit/acbcf62",target:"_blank",rel:"noopener noreferrer"},J=t('<p>💡：使用组件的意义？</p><p><img src="'+k+'" alt="意义"></p><h3 id="_9-热播详情-渲染底部功能区" tabindex="-1"><a class="header-anchor" href="#_9-热播详情-渲染底部功能区" aria-hidden="true">#</a> <mark>9）热播详情 - 渲染底部功能区</mark></h3><ul><li>此处的 <strong>底部功能区</strong> 与 文章详情的底部功能区一样，所以可以复用 <code>article-operate</code> 组件</li><li>功能区的 <code>placeholder</code> 与文章详情 <strong>不同</strong> ，可以通过 <code>props</code> 指定</li><li>在 <code>video-detail</code> 中指定 <code>placeholder</code></li></ul><p>效果：</p><p><img src="'+b+'" alt="效果"></p>',6),K={href:"https://github.com/ppambler/imooc-uni-app/commit/c2e44c6",target:"_blank",rel:"noopener noreferrer"},M=e("h3",{id:"_10-热播详情-发布弹幕",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_10-热播详情-发布弹幕","aria-hidden":"true"},"#"),o(),e("mark",null,"10）热播详情 - 发布弹幕")],-1),O={href:"https://uniapp.dcloud.io/api/media/video-context?id=createvideocontext",target:"_blank",rel:"noopener noreferrer"},P=e("li",null,"请求接口：用之前发送评论的接口",-1),Q=e("p",null,"效果：",-1),W=e("p",null,[e("img",{src:v,alt:"效果"})],-1),X={href:"https://github.com/ppambler/imooc-uni-app/commit/ff1dc81",target:"_blank",rel:"noopener noreferrer"},Y=t('<p>问题：发送三次弹幕，只展示一次弹幕 -&gt; 该<code>video</code>组件有 bug</p><p>我测试发现，不管发送几次，弹幕始终没有出现</p><h3 id="_11-热播详情-解决弹幕不显示的问题" tabindex="-1"><a class="header-anchor" href="#_11-热播详情-解决弹幕不显示的问题" aria-hidden="true">#</a> <mark>11）热播详情 - 解决弹幕不显示的问题</mark></h3><p><strong>原因：</strong></p><p>弹幕之所以不显示，是因为我们修改了 <code>danmuList</code> 的数据源导致的，这个问题其实为 <code>video</code> 组件的 <code>bug</code> 。</p><p><strong>解决方案：</strong></p><p>深拷贝 <code>danmuList</code> 到一个新的数组，用于展示 <strong>弹幕列表</strong></p><p>效果：</p><p><img src="'+f+'" alt="效果"></p>',9),Z={href:"https://github.com/ppambler/imooc-uni-app/commit/d8092c3",target:"_blank",rel:"noopener noreferrer"},$=t('<h3 id="_12-热播详情-定义弹幕的随机颜色值" tabindex="-1"><a class="header-anchor" href="#_12-热播详情-定义弹幕的随机颜色值" aria-hidden="true">#</a> <mark>12）热播详情 - 定义弹幕的随机颜色值</mark></h3><ol><li>在 <code>utils</code> 下创建一个新的 <code>js</code> 文件，用来定义 <strong>随机颜色方法</strong>：<code>getRandomColor</code></li><li>在 <code>video-detail</code> 中使用该方法</li></ol><p>效果：</p><p><img src="'+q+'" alt="效果"></p><blockquote><p>虽有弹幕都是彩色的，不管是默认已存在的，还是刚刚发的</p></blockquote>',5),ee={href:"https://github.com/ppambler/imooc-uni-app/commit/5689be9",target:"_blank",rel:"noopener noreferrer"},oe=t('<h3 id="_13-热播详情-处理弹幕列表数据加载动画" tabindex="-1"><a class="header-anchor" href="#_13-热播详情-处理弹幕列表数据加载动画" aria-hidden="true">#</a> <mark>13）热播详情 - 处理弹幕列表数据加载动画</mark></h3><p>当弹幕为空的时候，我们需要给用户一个提示。</p><p>以此，弹幕的状态可分为三种：</p><ol><li>数据加载中</li><li>无弹幕数据</li><li>有弹幕数据</li></ol><p>那么我们分别对这三种情况进行处理</p><p><img src="'+y+'" alt="弹幕状态"></p>',6),ae={href:"https://github.com/ppambler/imooc-uni-app/commit/945b45a",target:"_blank",rel:"noopener noreferrer"},ne=t('<h3 id="_14-热播详情-点赞、收藏的实现思路" tabindex="-1"><a class="header-anchor" href="#_14-热播详情-点赞、收藏的实现思路" aria-hidden="true">#</a> <mark>14）热播详情 - 点赞、收藏的实现思路</mark></h3><p>在前面我们让大家自己实现过 <strong>文章详情的 点赞和收藏 功能</strong>，并且在 <code>video-detail</code> 中我们复用了 收藏和点赞的组件，但是大家可以发现，此时 <strong>点赞与收藏</strong> 的功能无法在 <code>video-detail</code> 中进行使用。</p><p>出现这个问题的原因，是因为此时我们的 <code>videoData</code> 数据源，被保存到了 <code>vuex</code> 中。如果想要实现 <strong>点赞和收藏</strong> 的功能，那么需要在 <strong>监听到成功事件之后，修改 <code>vuex</code> 中的数据</strong></p><p>对于视频的点赞和收藏，并没有提供相应的接口，视频的<code>id</code>是用<code>id</code>字段，而文章的<code>id</code>是用<code>articleId</code>，而且即便你点赞和收藏成功了，页面一刷新这也就没了</p><p><img src="'+x+'" alt="点赞与收藏"></p>',5),te={href:"https://github.com/ppambler/imooc-uni-app/commit/2628828",target:"_blank",rel:"noopener noreferrer"},se=t('<h3 id="_15-总结" tabindex="-1"><a class="header-anchor" href="#_15-总结" aria-hidden="true">#</a> <mark>15）总结</mark></h3><p>那么到这里我们整个的 <strong>热播</strong> 功能就全部完成了。</p><p><strong>热播</strong> 功能的完成，也标记着我们整个 <strong>慕课热搜</strong> 业务功能全部搞定。</p><p>现在 <strong>慕课热搜</strong> 在微信小程序端运行的时候，我们可以发现无论是 <strong>功能 还是 业务</strong> 上，都是比较完善的。</p><p>但是，当我们把 <strong>慕课热搜</strong> 运行到浏览器端的时候，我们发现 <strong>应用会出现非常多的问题。</strong></p><p>比如：</p><ol><li><code>hot</code> 列表滚动，<code>tabs</code> 置顶效果消失</li><li>在火狐浏览器中，横线出现非常粗的滚动条</li><li>进行文章详情再返回，会出现 <code>ui</code> 错乱</li><li>文章详情无法展示</li><li>热播视频全部无法播放</li><li>登录功能无法使用</li></ol><p>等等问题。</p><p>那么这些问题，我们怎么处理呢？</p><p>请看下一章：《多平台适配》</p>',10);function pe(ie,re){const a=p("ExternalLinkIcon");return i(),r("div",null,[j,e("blockquote",null,[e("p",null,[e("a",w,[o("Demo"),n(a)])])]),L,e("p",null,[o("文档："),e("a",V,[o("video - uni-app 官网"),n(a)])]),I,N,e("blockquote",null,[e("p",null,[e("a",B,[o("Demo"),n(a)])])]),E,e("blockquote",null,[e("p",null,[e("a",C,[o("Demo"),n(a)])])]),T,U,e("blockquote",null,[e("p",null,[e("a",z,[o("Demo"),n(a)])])]),R,e("blockquote",null,[e("p",null,[e("a",S,[o("Demo"),n(a)])])]),A,e("blockquote",null,[e("p",null,[e("a",F,[o("Demo"),n(a)])])]),G,e("blockquote",null,[e("p",null,[e("a",H,[o("Demo"),n(a)])])]),J,e("blockquote",null,[e("p",null,[e("a",K,[o("Demo"),n(a)])])]),M,e("ul",null,[e("li",null,[o("发布弹幕需要用到 uni-app 提供方法："),e("a",O,[o("视频组件控制 - uni-app 官网"),n(a)])]),P]),Q,W,e("blockquote",null,[e("p",null,[e("a",X,[o("Demo"),n(a)])])]),Y,e("blockquote",null,[e("p",null,[e("a",Z,[o("Demo"),n(a)])])]),$,e("blockquote",null,[e("p",null,[e("a",ee,[o("Demo"),n(a)])])]),oe,e("blockquote",null,[e("p",null,[e("a",ae,[o("Demo"),n(a)])])]),ne,e("blockquote",null,[e("p",null,[e("a",te,[o("Demo"),n(a)])])]),se])}const ce=s(D,[["render",pe],["__file","index.html.vue"]]);export{ce as default};
