import{_ as t,r as o,o as c,c as p,a as n,b as a,d as e,e as i}from"./app.26c798e2.js";const l="/article/images/koa/1.jpg",u="/article/images/koa/2.jpg",d={},r=i(`<h2 id="koa-基础" tabindex="-1"><a class="header-anchor" href="#koa-基础" aria-hidden="true">#</a> Koa 基础</h2><h3 id="与express-区别" tabindex="-1"><a class="header-anchor" href="#与express-区别" aria-hidden="true">#</a> 与<code>express</code> 区别</h3><ul><li><code>express</code> 源码使用的是（es5）<code>callback</code>，<code>koa</code> 源码使用的是（es6）<code>async/await</code>，<code>koa</code> 源码更加简洁。</li><li><code>koa</code> 比较小巧，可以通过扩展来扩展功能，<code>express</code> 内置功能比较齐全。</li><li><code>koa</code> 没有内置路由，需要自己实现，<code>express</code> 内置了路由。</li><li><code>koa</code> 没有内置模板引擎，需要自己实现，<code>express</code> 内置了模板引擎。</li></ul><h3 id="上下文-context" tabindex="-1"><a class="header-anchor" href="#上下文-context" aria-hidden="true">#</a> 上下文(Context)</h3><ul><li><p><code>koa</code> 提供了一个<code>Context</code>对象，表示一次对话的上下文（包括<code>HTTP</code>请求和<code>HTTP</code>回复）。</p></li><li><p>通过加工这个对象，就可以控制返回给用户的内容。</p></li><li><p>koa 的实现其实就是封装了 http 模块，实现了一个全新的 ctx 上下文，该上下文中有原生的 req,res，也有 koa 自己封装的 request, response。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx <span class="token comment">// 这是 Context</span>
  ctx<span class="token punctuation">.</span>request <span class="token comment">// 这是 koa Request</span>
  ctx<span class="token punctuation">.</span>response <span class="token comment">// 这是 koa Response</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Context 隔离问题</li></ul><p><img src="`+l+`" alt="Context 隔离问题"></p><h3 id="请求" tabindex="-1"><a class="header-anchor" href="#请求" aria-hidden="true">#</a> 请求</h3><ul><li><code>koa</code> 将 <code>node</code> 的 <code>request</code> 对象封装到 <code>ctx.request</code> 中，没有直接将 <code>request</code> 对象暴露给用户，而是提供了一些常用的方法。 <ul><li><code>ctx.request.method</code>：获取请求方法</li><li><code>ctx.request.url</code>：获取请求地址</li><li><code>ctx.request.path</code>：获取请求路径</li><li><code>ctx.request.query</code>：获取查询字符串参数</li><li><code>ctx.request.querystring</code>：获取查询字符串</li><li><code>ctx.request.headers</code>：获取请求头</li><li><code>ctx.request.host</code>：获取请求域名</li><li><code>ctx.request.body</code>：获取请求体</li><li><code>ctx.request.files</code>：获取上传的文件</li><li><code>ctx.request.get()</code>：获取请求头</li><li><code>ctx.request.is()</code>：判断请求头的 <code>Content-Type</code> 类型</li><li><code>ctx.request.set()</code>：设置响应头</li><li><code>ctx.request.type</code>：获取请求类型</li><li><code>ctx.request.accepts()</code>：检查请求类型</li></ul></li></ul><h3 id="响应" tabindex="-1"><a class="header-anchor" href="#响应" aria-hidden="true">#</a> 响应</h3><ul><li><code>koa</code> 将 <code>node</code> 的 <code>response</code> 对象封装到 <code>ctx.response</code> 中，没有直接将 <code>response</code> 对象暴露给用户，而是提供了一些常用的方法。 <ul><li><code>ctx.response.body</code>：设置响应体</li><li><code>ctx.response.status</code>：设置响应状态码</li><li><code>ctx.response.set()</code>：设置响应头</li><li><code>ctx.response.redirect()</code>：重定向</li><li><code>ctx.response.attachment()</code>：设置响应头 Content-Disposition 为 attachment</li><li><code>ctx.response.type</code>：设置响应 Content-Type</li><li><code>ctx.response.lastModified</code>：设置响应头 Last-Modified</li><li><code>ctx.response.etag</code>：设置响应头 ETag</li><li><code>ctx.response.get()</code>：获取响应头</li><li><code>ctx.response.is()</code>：判断响应头的 Content-Type 类型</li></ul></li></ul><h3 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h3><ul><li><p>原理</p><ul><li><p><code>koa</code> 中间件机制就是函数组合的概念，将一组需要顺序执行的函数复合为一个函数，外层函数的参数实际上就是内层函数的返回值。</p></li><li><p>使用 <code>use</code> 来订阅中间件，使用 <code>callback</code> 来执行中间件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 相当于订阅</span>
<span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>middlewares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>首先将每个订阅的中间件存起来。</p></li><li><p>等待请求来的时候再处理，思路就是： 封装一个 dispatch 函数，然后将采用递归，从第一个中间件开始执行，将 dispatch 函数作为 next 传入，索引+1，当第一个中间件执行 next 的时候，就会执行 dispatch，执行第二个中间件，以此类推,直到所有中间件执行完毕。并且每个中间件都必须是返回 pormise 的函数，这样才能使用 await。</p></li></ul><p><img src="`+u+`" alt="中间件 compose"></p></li><li><p>koa 重要的是一个中间件的处理，koa 支持了 async + await 的中间件，像洋葱一样，可以等待中间件执行完毕之后往下走，而 express 不可以。</p></li><li><p>实现思路就是将所有中间件整合成一个 promise，然后从第一个中间件开始执行，索引+1，调用 next 的时候又会执行第二个中间件，索引+1，直到最后调用完毕，而且每个中间件都会被包装成 <code>promise.resolve</code> 去执行，这样就能搭配 <code>async</code> 和 <code>await</code>，等到所有中间件执行完毕又会一层一层往回执行，就相当于洋葱模型一样。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 洋葱模型</span>
<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">middlewares</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> fn <span class="token operator">=</span> middlewares<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
        <span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="写一个简单中间件" tabindex="-1"><a class="header-anchor" href="#写一个简单中间件" aria-hidden="true">#</a> 写一个简单中间件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 中间件一般都是返回一个函数，采用柯里化。</span>
<span class="token keyword">function</span> <span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      ctx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      ctx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 执行下一个中间件</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,17),k={href:"https://koajs.com/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://koa.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/koajs/koa",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/613106227",target:"_blank",rel:"noopener noreferrer"},b={href:"https://blog.csdn.net/lin_fightin/article/details/121962359",target:"_blank",rel:"noopener noreferrer"};function x(f,g){const s=o("ExternalLinkIcon");return c(),p("div",null,[r,n("ul",null,[n("li",null,[n("a",k,[a("Koa 官网"),e(s)])]),n("li",null,[n("a",v,[a("Koa 中文"),e(s)])]),n("li",null,[n("a",m,[a("koa github"),e(s)])]),n("li",null,[n("a",h,[a("Koa 源码学习"),e(s)])]),n("li",null,[n("a",b,[a("深入 node.js koa 原理，实现 koa"),e(s)])])])])}const w=t(d,[["render",x],["__file","index.html.vue"]]);export{w as default};
