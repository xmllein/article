import{_ as e,r as o,o as l,c as i,a as n,b as a,d as t,e as p}from"./app.26c798e2.js";const c="/article/images/android/kotlin/8.png",u={},r=p(`<h2 id="网络框架-okhttp-get-和-post-以及-gson-的简单使用" tabindex="-1"><a class="header-anchor" href="#网络框架-okhttp-get-和-post-以及-gson-的简单使用" aria-hidden="true">#</a> 网络框架 OKHttp get 和 post 以及 Gson 的简单使用</h2><ul><li>Android 在 6.0 之后也将内部的 HttpUrlConnection 的默认实现替换成了 OkHttp</li></ul><h3 id="_1-特点" tabindex="-1"><a class="header-anchor" href="#_1-特点" aria-hidden="true">#</a> 1.特点：</h3><ul><li>同时支持 HTTP1.1 与支持 HTTP2.0</li><li>同时支持同步与异步请求</li><li>无缝支持 HTTP/2</li><li>同时具备 HTTP 与 WebSocket 功能</li><li>拥有自动维护的 socket 连接池，减少握手次数</li><li>拥有队列线程池，轻松写并发</li><li>拥有 Interceptors(拦截器)，轻松处理请求与响应额外需求(例：请求失败重试、响应内容重定向等等)</li></ul><h3 id="_2-准备阶段" tabindex="-1"><a class="header-anchor" href="#_2-准备阶段" aria-hidden="true">#</a> 2.准备阶段</h3><h4 id="step1-添加网络访问权限" tabindex="-1"><a class="header-anchor" href="#step1-添加网络访问权限" aria-hidden="true">#</a> step1: 添加网络访问权限</h4><ul><li><p>在 AndroidManifest.xml 中添加</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.INTERNET<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="step2-添加依赖" tabindex="-1"><a class="header-anchor" href="#step2-添加依赖" aria-hidden="true">#</a> step2: 添加依赖</h4><ul><li><p>在 app/build.gradle 中添加</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>implementation <span class="token string">&#39;com.squareup.okhttp3:okhttp:4.9.0&#39;</span>
implementation <span class="token string">&#39;com.squareup.okhttp3:logging-interceptor:4.9.0&#39;</span>
implementation <span class="token string">&#39;com.google.code.gson:gson:2.8.5&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="step3-初始化" tabindex="-1"><a class="header-anchor" href="#step3-初始化" aria-hidden="true">#</a> step3: 初始化</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> client<span class="token operator">:</span>OkHttpClient  <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//builder构造者设计模式</span>
        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment">//连接超时时间</span>
        <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>  <span class="token comment">//写超时，也就是请求超时</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tips:</p><ul><li>object 对象的方法调用不用实例化，class 对象的方法调用需要实例化</li><li>object 对象在 APP 整个生命周期只有一份</li></ul><h3 id="_3-get-请求" tabindex="-1"><a class="header-anchor" href="#_3-get-请求" aria-hidden="true">#</a> 3. GET 请求</h3><ul><li>Android 分为主线程 和 子线程</li><li>主线程：APP 一启动后，Android framework 层会启动一个线程，主线程(UI 线程)</li><li>子线程 例如 new Thread().start()</li></ul><h4 id="_3-1-同步-get-请求" tabindex="-1"><a class="header-anchor" href="#_3-1-同步-get-请求" aria-hidden="true">#</a> 3.1 同步 GET 请求</h4><ul><li><p>同步 GET 的意思是一直等待 http 请求, 直到返回了响应. 在这之间会阻塞线程, 所以同步请求不能在 Android 的主线程中执行, 否则会报错 NetworkMainThreadException.</p></li><li><p>发送同步 GET 请求很简单：</p><ul><li><ol><li>创建 OkHttpClient 实例 client</li></ol></li><li><ol start="2"><li>通过 Request.Builder 构建一个 Request 请求实例 request</li></ol></li><li><ol start="3"><li>通过 client.newCall(request)创建一个 Call 的实例</li></ol></li><li><ol start="4"><li>Call 的实例调用 execute 方法发送同步请求</li></ol></li><li><ol start="5"><li>请求返回的 response 转换为 String 类型返回</li></ol></li></ul></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> FirstOKHttp<span class="token punctuation">{</span>
    <span class="token keyword">val</span> client<span class="token operator">:</span>OkHttpClient <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//builder构造者设计模式</span>
        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment">//连接超时时间</span>
        <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment">//读取超时</span>
        <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment">//写超时</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">//同步请求</span>
    <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url <span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//子线程  为了不让等待响应时影响整个app 一般放在子线程里执行</span>
        <span class="token function">Thread</span><span class="token punctuation">(</span>Runnable <span class="token punctuation">{</span>
            <span class="token comment">//构建请求体</span>
            <span class="token keyword">val</span> request<span class="token operator">:</span>Request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">//构造请求对象</span>
            <span class="token keyword">val</span> call<span class="token operator">:</span> Call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
            <span class="token comment">//发起同步请求execute——同步执行</span>
            <span class="token keyword">val</span> response <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">//execute执行完后</span>
            <span class="token keyword">val</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OkHttp&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;get response </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">body</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-异步-get-请求" tabindex="-1"><a class="header-anchor" href="#_3-2-异步-get-请求" aria-hidden="true">#</a> 3.2 异步 GET 请求</h4><ul><li>异步请求的步骤和同步请求类似，只是调用了 Call 的 enqueue 方法异步请求，结果通过回调 Callback 的 onResponse 方法及 onFailure 方法处理。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//异步请求  能够在主线程</span>
<span class="token keyword">fun</span> <span class="token function">getAsync</span><span class="token punctuation">(</span>url <span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//构建请求体</span>
    <span class="token keyword">val</span> request<span class="token operator">:</span>Request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//构造请求对象</span>
    <span class="token keyword">val</span> call<span class="token operator">:</span> Call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token comment">//发起异步请求enqueue——异步执行无返回值</span>
    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span>Callback<span class="token punctuation">{</span>
        <span class="token comment">//响应失败</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OkHttp&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;get response </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//响应成功</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OkHttp&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;get response </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">body</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>总结： <ul><li>看了两种不同的 Get 请求，基本流程都是先创建一个 OkHttpClient 对象，然后通过 Request.Builder()创建一个 Request 对象，OkHttpClient 对象调用 newCall()并传入 Request 对象就能获得一个 Call 对象。</li><li>而同步和异步不同的地方在于 execute()和 enqueue()方法的调用</li><li>调用 execute()为同步请求并返回 Response 对象</li><li>调用 enqueue()方法测试通过 callback 的形式返回 Response 对象</li></ul></li></ul><blockquote><p>注意：无论是同步还是异步请求，接收到 Response 对象时均在子线程中，onFailure，onResponse 的回调是在子线程中的,我们需要切换到主线程才能操作 UI 控件</p></blockquote><blockquote><p>Tips: 网络请求处理明文请求, 在 AndroidManifest.xml 中添加</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>
    <span class="token attr-name"><span class="token namespace">android:</span>usesCleartextTraffic</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-post-请求" tabindex="-1"><a class="header-anchor" href="#_4-post-请求" aria-hidden="true">#</a> 4.POST 请求</h3><ul><li>POST 请求与 GET 请求不同的地方在于 Request.Builder 的 post()方法，post()方法需要一个 RequestBody 的对象作为参数</li></ul><h4 id="_4-1-同步-post-请求" tabindex="-1"><a class="header-anchor" href="#_4-1-同步-post-请求" aria-hidden="true">#</a> 4.1 同步 POST 请求</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//同步post请求 不能在主线程中使用</span>
<span class="token keyword">fun</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//表单提交</span>
    <span class="token keyword">val</span> body <span class="token operator">=</span> FormBody<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;userId&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;1600932269&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;tagId&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;71&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> request<span class="token operator">:</span>Request <span class="token operator">=</span>
        Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">BASE_URL</span></span><span class="token string">/tag/toggleTagFollow&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>

    <span class="token function">Thread</span><span class="token punctuation">(</span>Runnable <span class="token punctuation">{</span>
        <span class="token keyword">val</span> response <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OKHTTP POST&quot;</span></span> <span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;post response </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-异步-post-请求-表单提交" tabindex="-1"><a class="header-anchor" href="#_4-2-异步-post-请求-表单提交" aria-hidden="true">#</a> 4.2 异步 POST 请求(表单提交)</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//异步POST 异步表单提交</span>
<span class="token keyword">fun</span> <span class="token function">postAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//表单提交</span>
    <span class="token keyword">val</span> body <span class="token operator">=</span> FormBody<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;userId&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;1600932269&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;tagId&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;71&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> request<span class="token operator">:</span>Request <span class="token operator">=</span>
        Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">BASE_URL</span></span><span class="token string">/tag/toggleTagFollow&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>

    <span class="token keyword">val</span> response <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span>Callback<span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OKHTTP POST&quot;</span></span> <span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;post onFailure </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OKHTTP POST&quot;</span></span> <span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;post onResponse </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异步表单文件上传" tabindex="-1"><a class="header-anchor" href="#异步表单文件上传" aria-hidden="true">#</a> 异步表单文件上传</h4><ul><li>Android6.0 及以后，读取外部存储卡的文件需要动态申请权限</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">postAsyncMultipart</span><span class="token punctuation">(</span>context<span class="token operator">:</span>Context<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//外部存储文件对象</span>
    <span class="token comment">//Android6.0及以后，读取外部存储卡的文件需要动态申请权限</span>
    <span class="token keyword">val</span> file <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getDownloadCacheDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;test.jpg&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;文件不存在&quot;</span></span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">val</span> body <span class="token operator">=</span> MultipartBody<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addFormDataPart</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key1&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;value1&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addFormDataPart</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key2&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;value2&quot;</span></span><span class="token punctuation">)</span>
            <span class="token comment">//后台接受参数的名称  要上传文件的本地文件名称</span>
        <span class="token punctuation">.</span><span class="token function">addFormDataPart</span><span class="token punctuation">(</span>
            <span class="token string-literal singleline"><span class="token string">&quot;file&quot;</span></span> <span class="token punctuation">,</span>
            <span class="token string-literal singleline"><span class="token string">&quot;file.jpg&quot;</span></span><span class="token punctuation">,</span>
            RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;application/octet-stream&quot;</span></span><span class="token punctuation">.</span><span class="token function">toMediaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>file<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">val</span> request<span class="token operator">:</span>Request <span class="token operator">=</span>
        Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;接口也是需要支持文件上传才可以使用&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">val</span> call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span>Callback<span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OKHTTP POST&quot;</span></span> <span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;postAsyncMultipart onFailure </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OKHTTP POST&quot;</span></span> <span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;postAsyncMultipart onResponse </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异步提交字符串" tabindex="-1"><a class="header-anchor" href="#异步提交字符串" aria-hidden="true">#</a> 异步提交字符串</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>
<span class="token comment">//传入的数据不是key,value 而是 字符串</span>
<span class="token keyword">fun</span> <span class="token function">postAsyncString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//字符串可以是纯文本也可以是Json类型的字符串</span>
    <span class="token comment">//JSON类型的字符串</span>
    <span class="token keyword">val</span> applicationJSON <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;application/json;charset=utf-8&quot;</span></span><span class="token punctuation">.</span><span class="token function">toMediaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> jsonObj <span class="token operator">=</span> <span class="token function">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    jsonObj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key1&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;value1&quot;</span></span><span class="token punctuation">)</span>
    jsonObj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key2&quot;</span></span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span>
    <span class="token comment">//val body = RequestBody.create(applicationJSON,jsonObj.toString())</span>

    <span class="token comment">//纯文本类型</span>
    <span class="token keyword">val</span> textPlain <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;text/plain;charset=utf-8&quot;</span></span><span class="token punctuation">.</span><span class="token function">toMediaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> textObj <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;username:username;password:password&quot;</span></span>
    <span class="token keyword">val</span> body <span class="token operator">=</span>
        RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>textPlain<span class="token punctuation">,</span>jsonObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


    <span class="token keyword">val</span> request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">BASE_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>

    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span>Callback<span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OKHTTP&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;postAsyncString onFailure </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OKHTTP&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;postAsyncString onResponse </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-拦截器" tabindex="-1"><a class="header-anchor" href="#_5-拦截器" aria-hidden="true">#</a> 5.拦截器</h3><ul><li>拦截器是 OkHttp 当中一个比较强大的机制，以解耦的形式可以监视、重写和重试调用请求</li></ul><h4 id="_5-1-自定义拦截器-logginginterceptor" tabindex="-1"><a class="header-anchor" href="#_5-1-自定义拦截器-logginginterceptor" aria-hidden="true">#</a> 5.1 自定义拦截器 LoggingInterceptor</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> LoggingInterceptor <span class="token operator">:</span> Interceptor<span class="token punctuation">{</span>
    <span class="token comment">//拦截</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">intercept</span><span class="token punctuation">(</span>chain<span class="token operator">:</span> Interceptor<span class="token punctuation">.</span>Chain<span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
        <span class="token keyword">val</span> time_start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//发出请求的时间戳</span>
        <span class="token keyword">val</span> request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//当前请求的request对象</span>
        <span class="token keyword">val</span> response <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token comment">//当前请求的response对象</span>

        <span class="token keyword">val</span> buffer <span class="token operator">=</span> <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        request<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>
        <span class="token keyword">val</span> requestBodyStr <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">readUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">//请求接口和请求接口值所携带的参数</span>
        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>
            <span class="token string-literal singleline"><span class="token string">&quot;OKHTTP&quot;</span></span> <span class="token punctuation">,</span>
            String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Sending request %s with params %s&quot;</span></span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span>requestBodyStr<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

        <span class="token comment">//响应流里面的数据 一但使用response.body?.string() 今后就不可拿response读取它的响应流这是由于OKHttp的工作原理决定的</span>
        <span class="token keyword">val</span> businessData <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?:</span><span class="token string-literal singleline"><span class="token string">&quot;response body null&quot;</span></span>
        <span class="token keyword">val</span> mediaType <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> newBody <span class="token operator">=</span> businessData<span class="token punctuation">.</span><span class="token function">toResponseBody</span><span class="token punctuation">(</span>mediaType<span class="token punctuation">)</span>
        <span class="token keyword">val</span> newResponse <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>newBody<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">val</span> time_end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">//响应接口 响应时间(1e6是科学计数法) 响应流数据</span>
        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>
            <span class="token string-literal singleline"><span class="token string">&quot;OKHTTP&quot;</span></span><span class="token punctuation">,</span>
            String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Received response for %s in $.1fms &gt;&gt;&gt; %s&quot;</span></span><span class="token punctuation">,</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token punctuation">(</span>time_end<span class="token operator">-</span>time_start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">,</span>businessData<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

        <span class="token keyword">return</span> newResponse
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用、</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> client<span class="token operator">:</span>OkHttpClient <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//builder构造者设计模式</span>
    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment">//连接超时时间</span>
    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment">//读取超时</span>
    <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment">//写超时</span>
    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">LoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//拦截器</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-内置拦截器-httplogginginterceptor" tabindex="-1"><a class="header-anchor" href="#_5-2-内置拦截器-httplogginginterceptor" aria-hidden="true">#</a> 5.2 内置拦截器 HttpLoggingInterceptor</h4><ul><li>HttpLoggingInterceptor 是 OkHttp 内置的一个拦截器，可以打印出请求和响应的信息，包括请求行、请求头、响应行、响应头、响应体等信息</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> client<span class="token operator">:</span>OkHttpClient
<span class="token keyword">init</span><span class="token punctuation">{</span>
    <span class="token keyword">val</span> httpLoggingInterceptor <span class="token operator">=</span> <span class="token function">HttpLoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    httpLoggingInterceptor<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span>HttpLoggingInterceptor<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>BODY<span class="token punctuation">)</span>

    client<span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//builder构造者设计模式</span>
        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment">//连接超时时间</span>
        <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment">//读取超时</span>
        <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment">//写超时</span>
        <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>httpLoggingInterceptor<span class="token punctuation">)</span> <span class="token comment">//拦截器</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-使用-gson-来解析网络请求响应" tabindex="-1"><a class="header-anchor" href="#_6-使用-gson-来解析网络请求响应" aria-hidden="true">#</a> 6.使用 Gson 来解析网络请求响应</h3><ul><li>Gson 是 Google 提供的一个 Java 库，可以将 Java 对象转换成 JSON 字符串，也可以将 JSON 字符串转换成 Java 对象</li><li>添加依赖</li></ul><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>implementation <span class="token string">&#39;com.google.code.gson:gson:2.8.6&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-1-json-与对象" tabindex="-1"><a class="header-anchor" href="#_6-1-json-与对象" aria-hidden="true">#</a> 6.1 JSON 与对象</h4><ul><li>将 JSON 转换为对象</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> json <span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">&quot;{\\&quot;uid\\&quot;:\\&quot;00001\\&quot;,\\&quot;userName\\&quot;:\\&quot;Freeman\\&quot;,\\&quot;telNumber\\&quot;:\\&quot;13000000000\\&quot;}&quot;</span></span>

<span class="token comment">//Gson对象啊</span>
<span class="token keyword">val</span> gson <span class="token operator">=</span> <span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> account <span class="token operator">=</span> gson<span class="token punctuation">.</span>fromJson<span class="token operator">&lt;</span>Account<span class="token operator">&gt;</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>Account<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将对象转换为 JSON</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//1.2将对象转换为JSON</span>
<span class="token keyword">val</span> accountJson <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;toJson : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">accountJson</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-json-与-list" tabindex="-1"><a class="header-anchor" href="#_6-2-json-与-list" aria-hidden="true">#</a> 6.2 JSON 与 List</h4><ul><li>将 JSON 转换为 List</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//2.1将JSON转换成集合</span>
<span class="token keyword">val</span> jsonList<span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;[{\\&quot;uid\\&quot;:\\&quot;00001\\&quot;,\\&quot;userName\\&quot;:\\&quot;Freeman\\&quot;,\\&quot;telNumber\\&quot;:\\&quot;13000000000\\&quot;}&quot;</span></span> <span class="token operator">+</span>
        <span class="token string-literal singleline"><span class="token string">&quot;,{\\&quot;uid\\&quot;:\\&quot;00002\\&quot;,\\&quot;userName\\&quot;:\\&quot;oooo\\&quot;,\\&quot;telNumber\\&quot;:\\&quot;12000000000\\&quot;}]&quot;</span></span>

<span class="token keyword">val</span> accountList<span class="token operator">:</span>List<span class="token operator">&lt;</span>Account<span class="token operator">&gt;</span> <span class="token operator">=</span>  gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonList <span class="token punctuation">,</span> <span class="token keyword">object</span> <span class="token operator">:</span>TypeToken<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Account<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;fromJson to list : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">accountList<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将 List 转换为 JSON</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//2.2将集合转换成JSON</span>
<span class="token keyword">val</span> accountJsonList <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>accountList<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;list to json : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">accountJsonList</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：Gson 在解析 JSON 时，如果 JSON 中的字段在 Java 对象中不存在，Gson 会忽略该字段，不会抛出异常</p></blockquote><blockquote><p>提示：</p></blockquote><ul><li>var 关键字是 variable 的简称，表示该变量可以被修改，，这种声明变量的方式和 java 中声明变量的方式一样。</li><li>val 关键字是 value 的简称，表示该变量一旦赋值后不能被修改，相当于 java 中的 final 变量。一个 val 创建的时候必须初始化，因为以后不能被改变。</li><li>{}对象形式 json 字串 []集合形式的 json 字串</li></ul><h3 id="jsontokotlin-插件" tabindex="-1"><a class="header-anchor" href="#jsontokotlin-插件" aria-hidden="true">#</a> JsonToKotlin 插件</h3>`,62),k=n("li",null,"通过 JsonToKotlin 插件可以将 JSON 字符串转换为 Kotlin 对象，这样就不用手动创建 Kotlin 对象了",-1),d={href:"https://plugins.jetbrains.com/plugin/9960-json-to-kotlin-class-jsontokotlinclass-",target:"_blank",rel:"noopener noreferrer"},v=p('<h2 id="restful-网路请求框-retrofit" tabindex="-1"><a class="header-anchor" href="#restful-网路请求框-retrofit" aria-hidden="true">#</a> RESTFUL 网路请求框 Retrofit</h2><ul><li>Retrofit 是一个高质量高效率的 HTTP 请求库。Retrofit 内部依赖于 OkHttp，它将 OKHttp 底层的代码和细节都封装了起来，功能上做了更多的扩展,比如返回结果的自动解析数据模型，网络引擎的切换，拦截器。</li></ul><h3 id="_1-注解" tabindex="-1"><a class="header-anchor" href="#_1-注解" aria-hidden="true">#</a> 1.注解</h3><ul><li>retrofit 注解驱动型上层网络请求框架，使用注解来简化请求，大体分为以下几类： <ul><li>用于标注网络请求方式的注解</li><li>标记网络请求参数的注解</li><li>用于标记网络请求和响应格式的注解</li></ul></li></ul><p><img src="'+c+`" alt="网络注解"></p><h3 id="_1-1-请求方法注解" tabindex="-1"><a class="header-anchor" href="#_1-1-请求方法注解" aria-hidden="true">#</a> 1.1 请求方法注解</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@GET</td><td>用于发送 get 请求</td></tr><tr><td>@POST</td><td>用于发送 post 请求</td></tr><tr><td>@PUT</td><td>用于发送 put 请求</td></tr><tr><td>@DELETE</td><td>用于发送 delete 请求</td></tr><tr><td>@HEAD</td><td>用于发送 head 请求</td></tr><tr><td>@OPTIONS</td><td>用于发送 options 请求</td></tr><tr><td>@PATCH</td><td>用于发送 patch 请求</td></tr><tr><td>@HTTP</td><td>用于发送自定义请求，需要指定 method、path、hasBody 等属性，method 为请求方式，path 为请求路径，hasBody 为是否有请求体</td></tr><tr><td>@HTTP(method = &quot;GET&quot;, path = &quot;users/{user}/repos&quot;, hasBody = false)</td><td>用于发送自定义请求，指定请求方式为 GET，请求路径为 users/{user}/repos，没有请求体</td></tr></tbody></table><h3 id="_1-2-请求头注解" tabindex="-1"><a class="header-anchor" href="#_1-2-请求头注解" aria-hidden="true">#</a> 1.2 请求头注解</h3><ul><li>既可以标记在方法上面也可以标记在参数里面 <table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Headers</td><td>用于标记请求头信息，可以标记在方法上面也可以标记在参数里面</td></tr><tr><td>@Header</td><td>用于标记请求头信息，只能标记在方法参数里面</td></tr></tbody></table></li></ul><h3 id="_1-3-请求参数注解" tabindex="-1"><a class="header-anchor" href="#_1-3-请求参数注解" aria-hidden="true">#</a> 1.3 请求参数注解</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Path</td><td>用于替换请求路径中的占位符，如：@GET(&quot;users/{user}/repos&quot;)</td></tr><tr><td>@Query</td><td>用于拼接在请求路径后面的查询参数，如：@GET(&quot;users/repos&quot;)</td></tr><tr><td>@QueryMap</td><td>用于拼接在请求路径后面的查询参数，如：@GET(&quot;users/repos&quot;)</td></tr><tr><td>@Field</td><td>用于 post 请求的表单字段，如：@POST(&quot;users/repos&quot;)</td></tr><tr><td>@FieldMap</td><td>用于 post 请求的表单字段，如：@POST(&quot;users/repos&quot;)</td></tr><tr><td>@Body</td><td>用于 post 请求的请求体，如：@POST(&quot;users/repos&quot;)</td></tr><tr><td>@Part</td><td>用于 post 请求的表单字段，如：@POST(&quot;users/repos&quot;)</td></tr><tr><td>@PartMap</td><td>用于 post 请求的表单字段，如：@POST(&quot;users/repos&quot;)</td></tr><tr><td>@Url</td><td>用于替换请求路径，如：@GET(&quot;users/repos&quot;)</td></tr></tbody></table><h3 id="_1-4-请求和响应格式注解" tabindex="-1"><a class="header-anchor" href="#_1-4-请求和响应格式注解" aria-hidden="true">#</a> 1.4 请求和响应格式注解</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@FormUrlEncoded</td><td>用于标记表单提交，如：@POST(&quot;users/repos&quot;)</td></tr><tr><td>@Multipart</td><td>用于标记表单提交，如：@POST(&quot;users/repos&quot;)</td></tr><tr><td>@Streaming</td><td>用于标记响应体为流，如：@GET(&quot;users/repos&quot;)</td></tr></tbody></table><h3 id="_2-开始使用" tabindex="-1"><a class="header-anchor" href="#_2-开始使用" aria-hidden="true">#</a> 2 开始使用</h3><h4 id="_2-1-添加依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-添加依赖" aria-hidden="true">#</a> 2.1 添加依赖</h4><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>implementation <span class="token string">&#39;com.squareup.retrofit2:retrofit:2.9.0&#39;</span>
implementation <span class="token string">&#39;com.squareup.retrofit2:converter-gson:2.9.0&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-创建-retrofit-实例" tabindex="-1"><a class="header-anchor" href="#_2-2-创建-retrofit-实例" aria-hidden="true">#</a> 2.2 创建 Retrofit 实例</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> FirstRetrofit <span class="token punctuation">{</span>
    <span class="token comment">//OkHttpClient 对象</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> okClient<span class="token operator">:</span>OkHttpClient <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//builder构建者设计模式</span>
        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment">//连接超时时间</span>
        <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>      <span class="token comment">//读取超时</span>
        <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>     <span class="token comment">//写超时</span>
        <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">LoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">//拦截器</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">//初始化</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> retrofit<span class="token operator">:</span>Retrofit <span class="token operator">=</span> Retrofit<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okClient<span class="token punctuation">)</span>    <span class="token comment">//配置OkHttp网络请求框架的对象</span>
        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;http://123.56.232.18:8080/serverdemo/&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment">//网络请求的域名</span>
        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//数据转换适配器</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">//发起网络请求</span>
    <span class="token comment">//public &lt;T&gt; T create(final Class&lt;T&gt; service)  java类型</span>
    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">create</span><span class="token punctuation">(</span>clazz<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span>T<span class="token punctuation">{</span>
        <span class="token keyword">return</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//网络请求接口</span>
<span class="token keyword">interface</span> ApiService<span class="token punctuation">{</span>
    <span class="token comment">//@Query 的 encoded发起网络请求是要不要对接口进行编码(防止中文乱码)</span>
    <span class="token comment">//@Query(value = &quot;userId&quot;, encoded = true) 是用来修饰 userId:String</span>
    <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;user/query&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token annotation builtin">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;userId&quot;</span></span><span class="token punctuation">,</span> encoded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> userId<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>Call<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-发起网络请求" tabindex="-1"><a class="header-anchor" href="#_2-3-发起网络请求" aria-hidden="true">#</a> 2.3 发起网络请求</h4><ul><li>异步用 enqueue()，同步用 execute()</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>  <span class="token keyword">val</span> apiService <span class="token operator">=</span> FirstRetrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ApiService<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>
  apiService<span class="token punctuation">.</span><span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1600933269&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span>Callback<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span><span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Retrofit&quot;</span></span><span class="token punctuation">,</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?:</span><span class="token string-literal singleline"><span class="token string">&quot;response is null&quot;</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span><span class="token punctuation">,</span> t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Retrofit&quot;</span></span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>message<span class="token operator">?:</span><span class="token string-literal singleline"><span class="token string">&quot;unknown reason&quot;</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>tips: onResponse 和 onFailure 的回调都是在主线程里面 可以直接操控 UI 控件</p></blockquote><h4 id="请求方法定义" tabindex="-1"><a class="header-anchor" href="#请求方法定义" aria-hidden="true">#</a> 请求方法定义</h4><ul><li>请求方法定义的时候，可以使用 Retrofit 的注解来标记请求的方式、请求的路径、请求的参数等信息</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//网络请求接口</span>
<span class="token keyword">interface</span> ApiService<span class="token punctuation">{</span>
    <span class="token comment">//@Query 的 encoded发起网络请求是要不要对接口进行编码(防止中文乱码)</span>
    <span class="token comment">//@Query(value = &quot;userId&quot;, encoded = true) 是用来修饰 userId:String</span>
    <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;user/query&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token annotation builtin">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;userId&quot;</span></span><span class="token punctuation">,</span> encoded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> userId<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>Call<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span>

    <span class="token comment">//使用@Headers添加多个请求头</span>
    <span class="token annotation builtin">@Headers</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;User-Agent:android&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;apikey:123456789&quot;</span></span><span class="token punctuation">)</span>
    <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;user/query&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">queryUser1</span><span class="token punctuation">(</span><span class="token annotation builtin">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;userId&quot;</span></span> <span class="token punctuation">,</span> encoded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> userId<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span>Call<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span>

    <span class="token comment">//多个参数的情况下可以使用@QueryMap，但只能用在GET请求上</span>
    <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;user/query&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">queryUser2</span><span class="token punctuation">(</span><span class="token annotation builtin">@QueryMap</span><span class="token punctuation">(</span>encoded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> queryMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token punctuation">,</span> String<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span>Call<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span>

    <span class="token comment">/**
     * 很多情况下，我们需要上传json格式的数据。当我们注册新用户的时候，因为用户注册时的数据相对较多
     * 并可能以后会变化，这时候，服务端可能要求我们上传json格式的数据。此时就要@Body注解来实现。
     * 直接传入实体,它会自行转化成Json, @Body只能用在POST请求上
     *
     * 字符串提交
     */</span>
    <span class="token annotation builtin">@POST</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;user/update&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">userUpdate</span><span class="token punctuation">(</span><span class="token annotation builtin">@Body</span> post<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span>Call<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span>

    <span class="token comment">/**
     * 表单提交（键值对提交）
     * 多用于post请求中表单字段,Filed和FieldMap需要FormUrlEncoded结合使用
     */</span>
    <span class="token annotation builtin">@POST</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token annotation builtin">@FormUrlEncoded</span>
    <span class="token keyword">fun</span> <span class="token function">executePost</span><span class="token punctuation">(</span><span class="token annotation builtin">@FieldMap</span> map<span class="token operator">:</span>Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span> User<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span>Call<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span>

    <span class="token comment">/**
     * 表单上传文件（键值对提交、同时上传文件）
     */</span>
    <span class="token annotation builtin">@Multipart</span>
    <span class="token annotation builtin">@FormUrlEncoded</span>
    <span class="token annotation builtin">@POST</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;upload/upload&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">register</span><span class="token punctuation">(</span>
        <span class="token annotation builtin">@Field</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;openId&quot;</span></span><span class="token punctuation">)</span> openId<span class="token operator">:</span>String<span class="token punctuation">,</span>
        <span class="token annotation builtin">@PartMap</span> map<span class="token operator">:</span>Map<span class="token operator">&lt;</span>String<span class="token operator">?</span> <span class="token punctuation">,</span> MultipartBody<span class="token punctuation">.</span>Part<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token operator">:</span>Call<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,26),m={href:"https://blog.csdn.net/white1148/category_11379150.html",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.imooc.com/learn/1307",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/xmllein/ap-first",target:"_blank",rel:"noopener noreferrer"};function f(h,q){const s=o("ExternalLinkIcon");return l(),i("div",null,[r,n("ul",null,[k,n("li",null,[n("a",d,[a("下载地址"),t(s)])])]),v,n("ul",null,[n("li",null,[n("a",m,[a("white1148 博客"),t(s)])]),n("li",null,[n("a",b,[a("2021Android 从零入门到实战(Kotlin 版) 视频"),t(s)])]),n("li",null,[n("a",g,[a("github 源码"),t(s)])])])])}const w=e(u,[["render",f],["__file","index.html.vue"]]);export{w as default};
