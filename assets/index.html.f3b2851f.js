import{_ as a,r as t,o as r,c as p,a as e,b as o,d as l,e as c}from"./app.26c798e2.js";const d="/article/images/2021_uni-app/img/2021-12-21-11-28-27.png",s="/article/images/2021_uni-app/img/2021-12-21-16-52-37.png",n="/article/images/2021_uni-app/img/2021-12-21-16-47-20.png",h="/article/images/2021_uni-app/img/2021-12-21-16-57-12.png",m="/article/images/2021_uni-app/img/2021-12-21-17-55-54.png",g="/article/images/2021_uni-app/img/2021-12-21-18-07-08.png",u="/article/images/2021_uni-app/img/2021-12-21-18-11-27.png",_="/article/images/2021_uni-app/img/2021-12-21-19-07-13.png",b="/article/images/2021_uni-app/img/2021-12-21-18-50-06.png",k="/article/images/2021_uni-app/img/2021-12-21-19-24-03.png",f="/article/images/2021_uni-app/img/2021-12-21-19-47-58.png",v="/article/images/2021_uni-app/img/2021-12-21-21-27-30.png",x="/article/images/2021_uni-app/img/2021-12-21-21-32-10.png",q="/article/images/2021_uni-app/img/2021-12-21-21-37-11.png",y="/article/images/2021_uni-app/img/2021-12-21-21-56-58.png",S="/article/images/2021_uni-app/img/2021-12-21-23-01-38.png",D="/article/images/2021_uni-app/img/2021-12-22-00-13-30.png",T="/article/images/2021_uni-app/img/2021-12-22-16-57-25.png",C="/article/images/2021_uni-app/img/2021-12-22-17-11-36.png",H="/article/images/2021_uni-app/img/2021-12-22-17-45-18.png",L="/article/images/2021_uni-app/img/2021-12-22-18-01-51.png",I="/article/images/2021_uni-app/img/2021-12-22-18-36-22.png",w="/article/images/2021_uni-app/img/2021-12-22-18-58-24.png",M="/article/images/2021_uni-app/img/2021-12-22-19-33-48.png",A="/article/images/2021_uni-app/img/2021-12-22-19-59-37.png",E="/article/images/2021_uni-app/img/2021-12-22-20-13-18.png",J="/article/images/2021_uni-app/img/2021-12-22-21-37-09.png",V="/article/images/2021_uni-app/img/2021-12-22-21-33-22.png",N="/article/images/2021_uni-app/img/2021-12-23-00-13-00.png",R={},j=c('<h1 id="_06-文章搜索页面" tabindex="-1"><a class="header-anchor" href="#_06-文章搜索页面" aria-hidden="true">#</a> 06-文章搜索页面</h1><h3 id="_1-开-篇-添加片头" tabindex="-1"><a class="header-anchor" href="#_1-开-篇-添加片头" aria-hidden="true">#</a> <mark>1）开 篇（添加片头）</mark></h3><p>在上一章中，我们完成了 <strong>热搜首页</strong> 的开发，虽然经历了 ”千辛万苦“ ，但是对大家来说，应该也是收获满满。</p><p>那么在这一章节，我们将会进入新的篇章，来到 <strong>文章搜索</strong> 页面的开发。那么在 <strong>文章搜索</strong> 的页面开发中，我们又会经历哪些 <strong>奇奇怪怪的 <code>bug</code> ，又将会获得哪些新的收获呢？</strong></p><p>让我们一起期待吧！</p><h3 id="_2-文章搜索-分析文章搜索页面" tabindex="-1"><a class="header-anchor" href="#_2-文章搜索-分析文章搜索页面" aria-hidden="true">#</a> <mark>2）文章搜索 - 分析文章搜索页面</mark></h3><p>在开发文章搜索页面之前，先来分析一下这个搜索页面都有哪些内容……</p><p><img src="'+d+'" alt="文章搜索"></p><p>整个搜索页面分为三块大的内容：</p><blockquote><p>首页 -&gt; 点击搜索框 -&gt; 慕课搜索页面 -&gt; 聚焦「搜索框」 -&gt; 搜索历史页面 -&gt; 往输入框输入内容或不输入内容，回车 -&gt; 搜索结果页面</p></blockquote><ol><li>【慕课热搜】 <ol><li>展示 8 个热搜内容</li></ol></li><li>【搜索历史】 <ol><li>按照【从后向前】的顺序，展示搜索历史</li><li>点击【小垃圾筒】可删除历史记录 -&gt; 可全部删除、可选择性删除</li></ol></li><li>【搜索结果】 <ol><li>不输入内容直接回车，按照当前的 <code>placeholder</code> 索引</li><li>输入内容，按照当前内容索引</li><li><code>item</code> 的展示分为三类 <ol><li>无图片展示</li><li>单个图片展示</li><li>三个图片展示</li></ol></li><li>item 中关键字高亮</li><li>具备下拉刷新，上拉加载更多</li><li>点击 【叉号】返回【搜索历史】</li><li>点击【取消】返回【慕课热搜】</li></ol></li></ol><p>以上这些内容，就是我们整个文章搜索页面之中所具备的一些能力，接下来的开发就是围绕这三大块来进行开发！</p><h3 id="_3-文章搜索-使用分包-创建-search-blog-页面" tabindex="-1"><a class="header-anchor" href="#_3-文章搜索-使用分包-创建-search-blog-页面" aria-hidden="true">#</a> <mark>3）文章搜索 - 使用分包，创建 <code>search-blog</code> 页面</mark></h3><p>创建文章搜索页面，即创建<code>search-blog</code>页面</p><p>但在创建这个页面的时候，我们将使用「分包」这个概念来创建我们的页面</p><h4 id="_1、分包" tabindex="-1"><a class="header-anchor" href="#_1、分包" aria-hidden="true">#</a> <mark>1、分包</mark></h4><p>💡：什么是分包？</p>',17),B={href:"https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html",target:"_blank",rel:"noopener noreferrer"},O=c('<p>简单来说，就是把一个完整的项目拆成了不同的几个子项目，或者你可以认为我们将一个大的 JS 文件按照模块拆成了几个小的 JS 文件 -&gt; 当我们去构建我们这个项目的时候，就可以把这些功能打包成不同的分包，也就是所谓的模块 -&gt; 当用户使用时就可以进行按需加载了</p><blockquote><p>把「小程序」看做是一个大的 JS 文件，把「子包」看做是小的模块，那么「啥是分包」就很好理解了</p></blockquote><p>💡：分包的好处</p><ul><li>可以优化小程序首次启动的下载时间 -&gt; 如本来要下载一个大的 JS 文件（<code>100 k</code>），现在把它拆成十个小模块（假设每个模块是<code>10 k</code>），可以看到 <code>10 k</code>的下载速度显然要比<code>100 k</code>的快！</li><li>在多人协作共同开发时，可以更好的解耦协作 -&gt; 10 个人改一个 JS 文件和一个人改一个 JS 文件 -&gt; 方便解耦协作</li></ul><p>微信小程序提供了分包的能力，而 uni-app 也对分包的功能进行了支持！</p><h4 id="_2、实现分包" tabindex="-1"><a class="header-anchor" href="#_2、实现分包" aria-hidden="true">#</a> <mark>2、实现分包</mark></h4><p>在 uni-app 中如何实现分包功能 ？</p><ol><li>打开 <code>pages.json</code>，新建 <code>subPackages</code> 节点 -&gt; 是一个数组，数组中每一个对象元素都是一个分包</li><li>节点中每个对象为一个分包，其中 <ol><li><code>root</code>：分包包名</li><li><code>name</code>：分包别名</li><li><code>pages</code>：分包下的关于别名的页面路径和窗口表现 <ol><li><code>path</code>：分包下的页面路径</li><li><code>style</code>：页面的样式</li></ol></li></ol></li><li>自己手动创建页面，小程序里边会根据这个<code>path</code>自动创建页面 <ol><li>新建一个<code>subpkg</code>目录 <ol><li>创建一个<code>pages</code>目录 -&gt; 存放当前所有的页面 <ol><li>右键，新建 uni-app 页面：<code>search-blog.vue</code> -&gt; 如果你对 uni-app 不爽，那你可以在 VS Code 里边通过之前安装的插件来新建页面</li></ol></li></ol></li></ol></li></ol>',8),P={href:"https://github.com/ppambler/imooc-uni-app/commit/fbfa7eb",target:"_blank",rel:"noopener noreferrer"},U=c('<p><img src="'+s+'" alt="分包"></p><blockquote><p>创建的<code>search-blog.vue</code>是子页面 -&gt; 这个文件在<code>subpkg/pages/search-blog/</code>里边，我们得手动创建它 -&gt; 你用 HbuilderX 创建这个页面时，会有不好的体验</p></blockquote><p>💡：如何验证我们当前的分包已经实现了？</p><p><img src="'+n+'" alt="验证分包情况"></p><p>微笑小程序开发者功能 -&gt; 详情 -&gt; 本地代码有：主包 + <code>/subpkg/</code>（分包）这两个包 -&gt; 这就证明我们的分包已经创建完成了</p><p>如果没生效，请注意是不是 uni-app 的编译问题！</p><hr><p>我看了这个项目最终完成时的分包代码：</p><p><img src="'+h+'" alt="分包"></p><p>这样岂不是只分了一个包？</p><p>👇：有了这个分包页面后，就可以来开发这个<code>search-blog</code>页面了</p><h3 id="_4-文章搜索-完成跳转-渲染搜索框" tabindex="-1"><a class="header-anchor" href="#_4-文章搜索-完成跳转-渲染搜索框" aria-hidden="true">#</a> <mark>4）文章搜索 - 完成跳转，渲染搜索框</mark></h3><p>定位到首页，完成页面跳转</p><ol><li><code>hot.vue</code> -&gt; <code>my-search</code>组件的包裹器<code>view</code>添加点击事件 -&gt; <code>@click=&quot;onToSearch&quot;</code></li><li>用户点击这个<code>view</code> -&gt; 触发<code>onToSearch</code> -&gt; 使用<code>uni.navigateTo({})</code>方法完成页面跳转 -&gt; 页面路径在分包路径下：<code>&#39;/subpkg/pages/search-blog/search-blog&#39;</code></li><li>在<code>search-blog</code>页面渲染搜索框 <ol><li><code>my-search</code>组件目前值拥有一个按钮，还没有输入的能力 -&gt; 我们需要赋予它新能力（下一节再赋予，这节只是让它渲染出来）</li><li>添加基础结构</li><li>添加基础样式 -&gt; 有吸顶效果</li></ol></li></ol><p>效果：</p><p><img src="'+m+'" alt="效果"></p>',16),X={href:"https://github.com/ppambler/imooc-uni-app/commit/6c7c95a",target:"_blank",rel:"noopener noreferrer"},Y=c('<h3 id="_5-文章搜索-为-my-search-组件赋予搜索的能力-1" tabindex="-1"><a class="header-anchor" href="#_5-文章搜索-为-my-search-组件赋予搜索的能力-1" aria-hidden="true">#</a> <mark>5）文章搜索 - 为 <code>my-search</code> 组件赋予搜索的能力-1</mark></h3><p>我们希望通过<code>my-search</code>组件来渲染我们的搜索框，但是就目前的这个<code>my-search</code>组件，它并不具备搜索能力</p><p>💡：如何给<code>my-search</code>赋予搜索的能力？</p><p>对于 uni-app 来说，它提供了一个<code>uni-search-bar</code>搜索栏组件</p>',4),$={href:"https://ext.dcloud.net.cn/plugin?id=866",target:"_blank",rel:"noopener noreferrer"},z=c('<p>这个搜索栏组件具备的功能：</p><p><img src="'+g+'" alt="功能"></p><p>从文档里边我们可以看到它的：</p><ul><li>兼容性</li><li>基本的使用姿势</li><li>API</li><li>事件</li><li>插槽（替换<code>icon</code>）</li></ul><p>我们之前创建这个项目的时候，选择了<code>uni-ui</code>，所以这个搜索栏组件已经被安装了</p><p><img src="'+u+'" alt="搜索栏组件"></p><p>因此，我们可以直接使用它</p><p>总之，我们可以利用它来完成我们的搜索功能</p><p>💡：实现逻辑</p><blockquote><p>为了好调试（不要每次都在<code>hot</code>页面点击然后进入页面），请修改编译模式，把<code>search-blog</code>页面作为启动页面</p></blockquote><ol><li>定位到<code>my-search.vue</code><ol><li>添加<code>uni-search-bar</code>组件标签</li><li>「搜索按钮」和「搜索输入框」不能同时展示 -&gt; 添加<code>isShowInput</code>这个<code>props</code></li><li>根据想要的效果 -&gt; 添加样式 -&gt; 由于这个组件在很多地方都要用，所以不要把样式给写死了 -&gt; 添加配置对象<code>config</code>这个<code>props</code>（有图标、背景色、边框等样式的配置） -&gt; 让父组件指定<code>my-search</code>的样式</li></ol></li><li>给<code>uni-search-bar</code>传递参数，如<code>radius</code>、<code>bgColor</code>等 <ol><li>添加插槽 -&gt; 指定图标：使用<code>uni-icons</code>组件，图标类型是<code>clear</code></li></ol></li><li>给<code>my-search-bar</code>添加宽度<code>100%</code>样式</li><li>改造输入框，让它符合最终实现效果 -&gt; 搜索框的交互 -&gt; 根据输入内容，点击按钮等，其底部会有视图切换 <ol><li>绑定<code>value</code>：<code>uni-search-bar</code>不使用双向数据绑定，因为会修改父组件传递过来的数据 -&gt; 毕竟我们定义了一个<code>value</code> props -&gt; 所以使用单向绑定</li><li>绑定事件 -&gt; 看文档了解这些事件有啥用</li></ol></li></ol>',11),F={href:"https://github.com/ppambler/imooc-uni-app/commit/536ef29",target:"_blank",rel:"noopener noreferrer"},G=c('<p>效果：</p><p><img src="'+_+'" alt="效果"></p><p>💡：<code>uni-icons</code>的效果</p><p><img src="'+b+'" alt="uni-icons"></p><h3 id="_6-文章搜索-为-my-search-组件赋予搜索的能力-2" tabindex="-1"><a class="header-anchor" href="#_6-文章搜索-为-my-search-组件赋予搜索的能力-2" aria-hidden="true">#</a> <mark>6）文章搜索 - 为 <code>my-search</code> 组件赋予搜索的能力-2 </mark></h3><p>💡：什么时候触发某个事件？</p><p><img src="'+k+'" alt="触发事件"></p><blockquote><p><code>confirm</code>在输入框内回车就会触发</p></blockquote><p>💡：让<code>my-search</code>组件具备非常强大的搜索输入框能力</p><p><code>my-search</code>组件输入内容 -&gt; 触发<code>onInput</code>事件 -&gt; 把这个事件的发生通知给父组件，并且把这次输入的内容传给父组件</p><p>父组件在使用<code>my-search</code>组件时添加<code>v-model</code></p><p>注意，可以使用这个<code>v-model</code>是有条件的（vue 中的基本知识）：</p><p><code>v-model</code>是 vue 中完成双向数据绑定的指令，如果说该指令想要应用到组件的绑定中，那么需要遵守以下条件：</p><ol><li>子组件中，也就是<code>my-search</code>组件中接收到的值必须以<code>value</code>命名</li><li>子组件中想要修改<code>value</code>时，必须要发送一个叫做<code>input</code>的事件</li></ol><p>满足以上两点，父组件就可以通过<code>v-model</code>指令把值直接传递给<code>value</code>这个<code>props</code>了</p>',15),K={href:"https://github.com/ppambler/imooc-uni-app/commit/1d3f529",target:"_blank",rel:"noopener noreferrer"},Q=c('<blockquote><p>这个代码的主要功能就是把子组件触发的事件抛给父组件这一层去处理 -&gt; 关键点：父子组件的双向数据绑定！</p></blockquote><p>💡：占位内容居中展示？</p><p><img src="'+f+`" alt="居中"></p><p>设计稿是居左展示</p><p>这个功能是无法通过<code>uni-search-bar</code>进行配置的，毕竟它没有提供可以让文本居中这样的一个属性</p><p>当组件无法提供给我们想要的能力的时候，那我们只能去修改这个组件了 -&gt; 也就是修改<code>uni-search-bar</code>的源代码</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.uni-searchbar__box</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 处理初始 searchbar 位置 */</span>
  <span class="token comment">/* 默认值是 center */</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们就完成了对整个搜索框的赋能，我们给<code>my-search</code>组件赋予了全新的能力：搜索输入框</p><p>本质就是间接给<code>uni-search-bar</code>组件添加非常多的配置项，以及对应的回调方法</p><p>并且，我们也可以通过<code>v-model</code>来完成父组件与子组件中绑定数据的双向绑定：</p><p>父组件<code>search-blog</code>：<code>&lt;my-search v-model=&quot;searchVal&quot;&gt;&lt;/my-search&gt;</code></p><p>子组件<code>my-search</code>：<code>value</code> + <code>this.$emit(&#39;input&#39;,val)</code></p><h3 id="_7-文章搜索-显示推荐搜索" tabindex="-1"><a class="header-anchor" href="#_7-文章搜索-显示推荐搜索" aria-hidden="true">#</a> <mark>7）文章搜索 - 显示推荐搜索</mark></h3><p>需要发送请求 -&gt; 看「返回默认搜索内容」这个接口</p><ol><li>创建<code>api/search.js</code> -&gt; 和搜索相关的接口都在这儿 <ol><li>添加<code>getDefaultText</code>函数</li></ol></li><li>在<code>search-blog.vue</code>里边定义<code>loadDefaultText</code>函数 -&gt; 用来加载数据 -&gt; 在<code>created</code>里边调用</li></ol><p><img src="`+v+'" alt="效果"></p>',16),W={href:"https://github.com/ppambler/imooc-uni-app/commit/c41574f",target:"_blank",rel:"noopener noreferrer"},Z=c('<h3 id="_8-文章搜索-创建三个业务组件" tabindex="-1"><a class="header-anchor" href="#_8-文章搜索-创建三个业务组件" aria-hidden="true">#</a> <mark>8）文章搜索 - 创建三个业务组件</mark></h3><p>创建我们开头所说的三个组件：</p><ul><li>慕课热搜</li><li>搜索历史</li><li>搜索结果</li></ul><p>毕竟我们整个文章搜索页面，说白了就是由这三个组件来组成的</p><p>目前这个代码的效果有个小问题：</p><p><img src="'+x+'" alt="抖动"></p><p>为啥会抖动？</p><p><img src="'+q+'" alt="抖动"></p><p>默认情况下是有<code>5px</code>，当你输入时，<code>text</code>变成了<code>input</code>，这<code>5px</code>就消失了</p><p>💡：创建三个组件</p><ul><li><code>search-hot-list</code>：搜索列表</li><li><code>search-history</code>：搜索历史</li><li><code>search-result-list</code>：搜索结果</li></ul><p>在<code>search-blog</code>页面里边渲染这三个基本组件</p><p><img src="'+y+'" alt="效果"></p>',13),ee={href:"https://github.com/ppambler/imooc-uni-app/commit/46f0424",target:"_blank",rel:"noopener noreferrer"},oe=c('<p>正常情况下，这三个组件可不会一同展示！</p><p>👇：控制这个三个组件的展示！</p><h3 id="_9-文章搜索-控制业务组件的展示效果" tabindex="-1"><a class="header-anchor" href="#_9-文章搜索-控制业务组件的展示效果" aria-hidden="true">#</a> <mark>9）文章搜索 - 控制业务组件的展示效果</mark></h3><p>按照不同的业务逻辑，分别展示这三个组件：</p><p><img src="'+S+'" alt="展示组件"></p><ul><li>默认展示「搜索列表」 -&gt; 点击了输入框的取消按钮时，也会展示「搜索列表」</li><li>输入框获取到焦点时，就会展示「搜索历史」 -&gt; 点击输入框清空按钮时，也会展示「搜索历史」</li><li>用户点击热搜列表 <code>item</code> 或者用户点击搜索历史 <code>item</code> 或者输入框回车或输入内容后回车，就会展示「搜索结果」页面</li></ul><p>组件的展示逻辑搞明白后，就得通过代码来实现这个展示逻辑了！</p><p>💡：实现过程</p><ol><li>通过一个数据<code>showType</code>来决定展示哪个组件 <ol><li>用<code>0</code>、<code>1</code>、<code>2</code>表示吗？ -&gt; 这很不清晰，得用常量</li><li><code>HOT_LIST</code>、<code> SEARCH_HISTORY</code>、<code>SEARCH_RESULT</code></li><li>默认值是：<code>HOT_LIST</code></li></ol></li><li>在 HTML 中使用常量（注意：<code>template</code>里边，只可以访问<code>data</code>中定义的数据） <ol><li>让这三个常量都作为<code>data</code></li></ol></li><li>控制<code>showType</code>的值 -&gt; 也就是那几个事件要干的事儿 <ol><li>失去焦点啥也不干 -&gt; 这个处理函数无用</li><li>注意这个<code>clear</code>事件 -&gt; 此时展示搜索结果，你点击清空按钮，也得返回搜索历史</li></ol></li></ol><p><img src="'+D+'" alt="实现过程"></p>',10),ce={href:"https://github.com/ppambler/imooc-uni-app/commit/f0bd78d",target:"_blank",rel:"noopener noreferrer"},ie=c('<p>👇：实现这三个组件</p><h3 id="_10-热搜列表-数据获取" tabindex="-1"><a class="header-anchor" href="#_10-热搜列表-数据获取" aria-hidden="true">#</a> <mark>10）热搜列表 - 数据获取</mark></h3><p>分析热搜列表的业务：</p><p><img src="'+T+'" alt="热搜列表"></p><p>如何实现？ -&gt; 获取热搜列表数据 -&gt; 看接口文档</p><p>效果：</p><p><img src="'+C+'" alt="效果"></p><blockquote><p>组件在被<code>v-if</code>切换时，是会销毁组件的！ -&gt; 所以这个请求也会重新发起 -&gt; 毕竟又重新渲染组件了！</p></blockquote>',8),le={href:"https://github.com/ppambler/imooc-uni-app/commit/6db312e",target:"_blank",rel:"noopener noreferrer"},ae=c('<p>👇：把获取到的数据进行一个基本的展示</p><h3 id="_11-热搜列表-数据展示" tabindex="-1"><a class="header-anchor" href="#_11-热搜列表-数据展示" aria-hidden="true">#</a> <mark>11）热搜列表 - 数据展示</mark></h3><ul><li>卡片展示样式 -&gt; 很多地方用到 -&gt; 定义到全局样式里边</li><li>渲染 HTML 和 对应的 CSS</li><li>HTML 结构 <ul><li>标题：<code>search-hot-title</code></li><li>列表：<code>search-hot-item</code><ul><li>使用<code>hot-ranking</code>组件</li><li>文本：单行展示</li><li>图标：<code>hot-icon</code> -&gt; 只展示前三个</li></ul></li></ul></li><li>样式实现</li></ul><p>效果：</p><p><img src="'+H+'" alt="效果"></p>',5),te={href:"https://github.com/ppambler/imooc-uni-app/commit/5472697",target:"_blank",rel:"noopener noreferrer"},re=c('<p>👇：对热搜列表中，关于<code>item</code>项的点击事件</p><h3 id="_12-热搜列表-热搜点击处理" tabindex="-1"><a class="header-anchor" href="#_12-热搜列表-热搜点击处理" aria-hidden="true">#</a> <mark>12）热搜列表 - 热搜点击处理</mark></h3><p>点击 item 项会有一个搜索效果 -&gt; 相当于是你往搜索输入框输入你所点击的这个 item 的标题</p><p>实现：</p><ol><li>给 item 项添加点击事件 -&gt; 我们不希望在这个子组件里边处理这个事件 -&gt; 而是交给父组件<code>search-blog</code>去处理 <ol><li>为啥这样做？ -&gt; 因为最终的搜索结果是在父组件里边进行的</li><li>抛出一个<code>onSearch</code>事件给父组件 -&gt; 参数是这个 item 的标题</li></ol></li><li>父组件监听这个<code>onSearch</code>事件 -&gt; 直接触发了那个<code>onSearchConfirm</code>回调</li></ol><p>效果：</p><p><img src="'+L+'" alt="效果"></p>',7),pe={href:"https://github.com/ppambler/imooc-uni-app/commit/e96f11f",target:"_blank",rel:"noopener noreferrer"},de=c('<p>至此，这个热搜列表就已经完成了 -&gt; 热搜列表是「文章搜索」中最简单的一个内容，只需要获取数据，然后展示数据，处理一下 item 事件就可以了</p><p>👇：处理搜索历史的业务逻辑</p><h3 id="_13-搜索历史-渲染基本结构" tabindex="-1"><a class="header-anchor" href="#_13-搜索历史-渲染基本结构" aria-hidden="true">#</a> <mark>13）搜索历史 - 渲染基本结构</mark></h3><p>换一种套路来写这个组件 -&gt; 分成两步来实现这个「搜索历史」：</p><ol><li>实现基本的 HTML 和 CSS</li><li>实现业务逻辑</li></ol><p>分析完成后的结果：</p><p><img src="'+I+'" alt="结果"></p><p>实现：</p><ol><li><code>search-history</code>： <ol><li><code>search-history-title-box</code><ol><li><code>search-history-title</code></li><li>逻辑判断，切换视图 -&gt; 默认不展示<code>×</code>按钮，展示「辣鸡箱」 <ol><li>辣鸡箱 icon</li><li>「全部删除」「完成」</li></ol></li></ol></li><li><code>search-history-box</code></li></ol></li><li>给假的搜索历史数据源</li></ol><p>效果：</p><p><img src="'+w+'" alt="效果"></p>',11),se={href:"https://github.com/ppambler/imooc-uni-app/commit/b0aa815",target:"_blank",rel:"noopener noreferrer"},ne=c('<p>至此，搜索历史的 HTML 就完成了，整个 HTML 非常简单，没有涉及到任何的业务逻辑</p><p>👇：把 HTML 对应的 CSS 搞定，再去看剩下的复杂内容</p><h3 id="_14-搜索历史-美化基本样式" tabindex="-1"><a class="header-anchor" href="#_14-搜索历史-美化基本样式" aria-hidden="true">#</a> <mark>14）搜索历史 - 美化基本样式</mark></h3><p>实现：</p><ol><li>把选择器先写下来</li><li>写样式</li></ol><p>效果：</p><p><img src="'+M+'" alt="效果"></p>',7),he={href:"https://github.com/ppambler/imooc-uni-app/commit/8c6faf2",target:"_blank",rel:"noopener noreferrer"},me=c('<p>👇：完成搜索历史的业务逻辑 -&gt; 会面临很多困难</p><h3 id="_15-搜索历史-保存历史数据到-searchdata" tabindex="-1"><a class="header-anchor" href="#_15-搜索历史-保存历史数据到-searchdata" aria-hidden="true">#</a> <mark>15）搜索历史 - 保存历史数据到 <code>searchData</code></mark></h3><p>完成搜索历史的切换逻辑</p><p>方案：把搜索历史保存到本地，而不是发送请求</p><p>💡：怎样的数据算是搜索历史数据？</p><p>当用户对该数据进行了搜索之后，那么该数据就算是搜索历史的数据了！</p><p>💡：实现</p><ol><li>在父组件存储搜索历史数据，而不是在原先的子组件 -&gt; 在子组件里边存储不方便！ -&gt; 父组件把数据传给子组件</li><li>用户在输入框内回车 -&gt; 调用<code>onSearchConfirm</code>方法 -&gt; 调用<code>saveSearchData</code>（保存这个输入内容到搜索历史数据中）</li><li>搜索旧数据，会把这个旧数据从历史记录里边删除，然后再重新放到左上角</li></ol><p><img src="'+A+'" alt="实现"></p><p>效果：</p><p><img src="'+E+'" alt="效果"></p>',11),ge={href:"https://github.com/ppambler/imooc-uni-app/commit/ad53557",target:"_blank",rel:"noopener noreferrer"},ue=c('<p>👇：实现<code>searchData</code>中的删除操作</p><h3 id="_16-搜索历史-处理-searchdata-的删除操作" tabindex="-1"><a class="header-anchor" href="#_16-搜索历史-处理-searchdata-的删除操作" aria-hidden="true">#</a> <mark>16）搜索历史 - 处理 <code>searchData</code> 的删除操作</mark></h3><p>删除分为两种：</p><ol><li>删除指定数据</li><li>删除全部数据</li></ol>',4),_e={href:"https://uniapp.dcloud.io/api/ui/prompt?id=showmodal",target:"_blank",rel:"noopener noreferrer"},be=c('<blockquote><p><code>uni.showModal</code>：显示模态弹窗，可以只有一个确定按钮，也可以同时有确定和取消按钮。类似于一个 API 整合了 html 中：alert、confirm。</p></blockquote><p>实现过程：</p><ol><li>子组件 -&gt; 给「全部删除」和搜索历史 item 绑定点击事件 <ol><li><code>onClearAll</code></li><li><code>onHistoryItemClick</code></li></ol></li><li><code>onClearAll</code>的逻辑： <ol><li><code>uni.showModal({})</code><ol><li>删除全部 -&gt; 确定 -&gt; 抛出<code>removeAllSearchData</code>通知 -&gt; 切换回「垃圾箱」</li><li>点击取消按钮 -&gt; 啥也不干</li></ol></li></ol></li><li><code>onHistoryItemClick</code>的逻辑： <ol><li>判断当前是否要删除？ -&gt; 是 -&gt; 证明有「<code>×</code>」按钮 -&gt; 抛出<code>removeSearchData</code>通知，传当前被点击的<code>item</code>索引</li></ol></li><li>父组件 -&gt; 接收到事件通知 <ol><li><code>removeSearchData</code>事件 -&gt; 从历史数据里边删除这条</li><li><code>removeAllSearchData</code>事件 -&gt; 清空历史数据</li></ol></li></ol><p>效果：</p><p><img src="'+J+'" alt="效果"></p>',5),ke={href:"https://github.com/ppambler/imooc-uni-app/commit/7f42650",target:"_blank",rel:"noopener noreferrer"},fe=c('<p>💡：抛出一个通知，会先执行这个通知所对应的事件处理函数</p><p><img src="'+V+'" alt="通知"></p><h3 id="_17-搜索历史-找出现在的问题" tabindex="-1"><a class="header-anchor" href="#_17-搜索历史-找出现在的问题" aria-hidden="true">#</a> <mark>17）搜索历史 - 找出现在的问题</mark></h3><p>到目前，我们已经完成了 <strong>搜索历史</strong> 的展示和删除的功能，但是还有一个 <strong>数据持久化</strong> 的功能未实现</p><p>未实现的功能我们先不着急，我们先回头看一下我们现在的代码</p><p><img src="'+N+'" alt="现在的问题"></p><blockquote><p>在现在的代码中，我们在 <code>search-blog</code> 中通过 <code>searchData</code> 保存了所有的搜索历史数据</p><p>而在真正的搜索历史页面中，反而是通过 <code>props</code> 接收了 <strong>父组件传递过来的数据</strong></p><p>把 <strong>添加、删除搜索历史的功能</strong>，都放到了 <code>search-blog</code> 页面里进行了实现，反而把 <strong>删除的激活</strong> 操作放到了 <code>search-history</code> 组件中</p></blockquote><p>这样的一系列操作，我们光描述都要花费上 <strong>一分钟</strong> 的时间，更不用说让别人去读你的代码了</p><p>如果我们在这样的代码基础之上，再去实现 <strong>数据持久化</strong> 的功能，那么咱们的代码就会的更加复杂，难以理解了</p><p>所以说，我们现在迫切需要做一件事情，那就是：<strong>让 <code>search-blog</code> 和 <code>search-history</code> 解耦，让 <code>searchData</code> 和 组件 解耦 ！</strong></p><p>那么这个事情，我们怎么做呢？</p><p>这里请允许我先卖一个关子</p><p>欲知后事如何，请见下一章《<strong>全局状态管理</strong>》</p><h3 id="_18-总结" tabindex="-1"><a class="header-anchor" href="#_18-总结" aria-hidden="true">#</a> <mark>18）总结</mark></h3><p>本章节中，我们完成了 <strong>部分</strong> 的文章搜索功能</p><ol><li>使用 <strong>分包</strong> 创建了 <code>search-blog</code> 页面</li><li>分析页面得到了 三个组件 <ol><li>热搜列表：<code>search-hot-list</code></li><li>搜索历史：<code>search-history</code></li><li>搜索结果：<code>search-result-list</code></li></ol></li><li>定义了规则，控制了三个组件的展示规律</li><li>完成了 <strong>热搜列表</strong> 的功能</li><li>在完成 <strong>搜索历史</strong> 时，遇到了问题：<strong><code>search-blog</code> 和 <code>search-history</code>、<code>searchData</code> 和 组件</strong> 之间（产生了）<strong>强耦合</strong> （关系）</li></ol><p>那我们该如何解决这个「强耦合」问题呢？</p><p>想要解决这个问题，那么我们需要用到一个新的东西，叫做 <strong>《全局状态管理工具》</strong>，那么这个东西怎么用呢？它有什么样的价值呢？</p><p>我们下一章再见！</p>',19);function ve(xe,qe){const i=t("ExternalLinkIcon");return r(),p("div",null,[j,e("p",null,[e("a",B,[o("分包"),l(i)]),o(" 指的是将小程序划分成不同的子包，在构建时打包成不同的分包，用户在使用时按需进行加载")]),O,e("blockquote",null,[e("p",null,[e("a",P,[o("Demo"),l(i)])])]),U,e("blockquote",null,[e("p",null,[e("a",X,[o("Demo"),l(i)])])]),Y,e("p",null,[o("文档："),e("a",$,[o("uni-search-bar 搜索栏 - DCloud 插件市场 "),l(i)])]),z,e("blockquote",null,[e("p",null,[e("a",F,[o("Demo"),l(i)])])]),G,e("blockquote",null,[e("p",null,[e("a",K,[o("Demo"),l(i)])])]),Q,e("blockquote",null,[e("p",null,[e("a",W,[o("Demo"),l(i)])])]),Z,e("blockquote",null,[e("p",null,[e("a",ee,[o("Demo"),l(i)])])]),oe,e("blockquote",null,[e("p",null,[e("a",ce,[o("Demo"),l(i)])])]),ie,e("blockquote",null,[e("p",null,[e("a",le,[o("Demo"),l(i)])])]),ae,e("blockquote",null,[e("p",null,[e("a",te,[o("Demo"),l(i)])])]),re,e("blockquote",null,[e("p",null,[e("a",pe,[o("Demo"),l(i)])])]),de,e("blockquote",null,[e("p",null,[e("a",se,[o("Demo"),l(i)])])]),ne,e("blockquote",null,[e("p",null,[e("a",he,[o("Demo"),l(i)])])]),me,e("blockquote",null,[e("p",null,[e("a",ge,[o("Demo"),l(i)])])]),ue,e("p",null,[o("文档："),e("a",_e,[o("交互反馈 - uni-app 官网"),l(i)])]),be,e("blockquote",null,[e("p",null,[e("a",ke,[o("Demo"),l(i)])])]),fe])}const Se=a(R,[["render",ve],["__file","index.html.vue"]]);export{Se as default};
