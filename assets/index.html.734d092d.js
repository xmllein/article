import{_ as p,r as e,o,c as i,a as n,b as a,d as t,e as l}from"./app.26c798e2.js";const c="/article/images/android/kotlin/1.png",u="/article/images/android/kotlin/2.png",r="/article/images/android/kotlin/3.png",k="/article/images/android/kotlin/4.png",d={},v=l('<h2 id="android-项目目录介绍" tabindex="-1"><a class="header-anchor" href="#android-项目目录介绍" aria-hidden="true">#</a> Android 项目目录介绍</h2><p><img src="'+c+'" alt="Android 项目目录介绍"></p><h2 id="kotlin-的特点" tabindex="-1"><a class="header-anchor" href="#kotlin-的特点" aria-hidden="true">#</a> kotlin 的特点</h2><ul><li><p><strong>富有表现力且简洁</strong>: 可以使用更少的代码实现更多的功能。少编写样板代码。在使用 Kotlin 的专业开发者中，有 67% 的人反映其工作效率有所提高。</p></li><li><p><strong>更安全的代码</strong>：Kotlin 有许多语言功能，可帮助避免 null 指针异常等常见编程错误。包含 Kotlin 代码的 Android 应用发生崩溃的可能性降低了 20%。</p></li><li><p><strong>可互操作</strong>：可以在 Kotlin 代码中调用 Java 代码，或者在 Java 代码中调用 Kotlin 代码。Kotlin 可完全与 Java 编程语言互操作，因此可以根据需要在项目中添加任意数量的 Kotlin 代码。</p></li><li><p><strong>结构化并发</strong>：Kotlin 协程让异步代码像阻塞代码一样易于使用。协程可大幅简化后台任务管理，例如网络调用、本地数据访问等任务的管理。</p></li></ul><h2 id="kotlin-数据类型" tabindex="-1"><a class="header-anchor" href="#kotlin-数据类型" aria-hidden="true">#</a> Kotlin 数据类型</h2><p><img src="'+u+`" alt="Kotlin数据类型"></p><h3 id="kotlin-数据类型-1" tabindex="-1"><a class="header-anchor" href="#kotlin-数据类型-1" aria-hidden="true">#</a> Kotlin 数据类型</h3><h4 id="_1-1-整型" tabindex="-1"><a class="header-anchor" href="#_1-1-整型" aria-hidden="true">#</a> 1.1 整型</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 1. 如何声明一个基础数据类型的变量，有哪些方式？</span>
<span class="token comment">// 基础数据类型的整型默认数据类型均为Int，如果超过了Int的取值范围，则会推断为Long</span>
<span class="token keyword">val</span> number <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 编辑器会根据赋值【100】，推断变量number数据类型为Int</span>

<span class="token comment">// 虽然没有明确指定变量bigNumber的数据类型，但是编辑器会根据赋值发现【8000000000】已经超过了Int的最大值</span>
<span class="token comment">// 所以bigNumber的数据类型会升级为Long</span>
<span class="token keyword">val</span> bigNumber <span class="token operator">=</span> <span class="token number">8000000000</span>

<span class="token comment">// 在赋值数字的后面加上L，会自动推断为Long类型</span>
<span class="token keyword">val</span> longNumber <span class="token operator">=</span> <span class="token number">20L</span>

<span class="token comment">// 在变量后面加上：明确数据类型</span>
<span class="token keyword">val</span> byteNumber<span class="token operator">:</span> Byte <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-浮点型" tabindex="-1"><a class="header-anchor" href="#_1-2-浮点型" aria-hidden="true">#</a> 1.2 浮点型</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 浮点类型</span>
<span class="token comment">// 编辑器同样会根据赋值推断变量的类型</span>
<span class="token keyword">val</span> doubleNumber<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">3.14159268888</span>
<span class="token keyword">val</span> floatNumber<span class="token operator">:</span> Float <span class="token operator">=</span> <span class="token number">3.14159268888f</span> <span class="token comment">// 尾部加f或F显式表示这是一个Float类型的浮点数</span>
<span class="token comment">// 发现float保留到小数点第8位</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;doubleNumber：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">doubleNumber</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 输出：doubleNumber：3.14159268888</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;floatNumber：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">floatNumber</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 输出：floatNumber：3.1415927</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-字符类型" tabindex="-1"><a class="header-anchor" href="#_1-3-字符类型" aria-hidden="true">#</a> 1.3 字符类型</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 字符类型</span>
<span class="token comment">// 字符类型的声明用单引号</span>
<span class="token keyword">val</span> char<span class="token operator">:</span> Char <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-布尔类型" tabindex="-1"><a class="header-anchor" href="#_1-4-布尔类型" aria-hidden="true">#</a> 1.4 布尔类型</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 布尔类型，使用Boolean来声明类型，只有两种值true/false</span>
<span class="token keyword">val</span> isVisible<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">val</span> isVisible2 <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-字符串" tabindex="-1"><a class="header-anchor" href="#_1-5-字符串" aria-hidden="true">#</a> 1.5 字符串</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 字符串类型</span>
<span class="token keyword">val</span> str<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1234567890&quot;</span></span> <span class="token comment">// 从0开始</span>
<span class="token comment">// 字符串的取值</span>
<span class="token keyword">val</span> strNumber2<span class="token operator">:</span> Char <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">// 字符串的模板表达式以$开始</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The Result：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">str</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Text length is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">str<span class="token punctuation">.</span>length</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// 字符串的拼接操作</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I am &quot;</span></span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot; years old！&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// 字符转义</span>
<span class="token keyword">val</span> helloWorld <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello，World！\\n&quot;</span></span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">helloWorld</span></span><span class="token string">\\nhow are you&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment">// helloWorld3要求它的字符串内容是json格式</span>
<span class="token keyword">val</span> helloWorld3 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;{\\&quot;key\\&quot; : \\&quot;value\\&quot;}&quot;</span></span>
<span class="token comment">// 分界符，内部不需要转义，看起来更清爽</span>
<span class="token keyword">val</span> helloWorld4 <span class="token operator">=</span> <span class="token string-literal multiline"><span class="token string">&quot;&quot;&quot;
    {&quot;key&quot; : &quot;value&quot;}
&quot;&quot;&quot;</span></span><span class="token punctuation">.</span><span class="token function">trimIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型间的转换" tabindex="-1"><a class="header-anchor" href="#数据类型间的转换" aria-hidden="true">#</a> 数据类型间的转换</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 数据类型间的强制转换, toLong, toInt, toFloat, toDouble, toChar, toByte</span>
<span class="token keyword">val</span> number100 <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 声明一个整型number对象</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;转换成string：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">number100</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;转换成long：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">number100<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据运算" tabindex="-1"><a class="header-anchor" href="#数据运算" aria-hidden="true">#</a> 数据运算</h3><h4 id="_3-1-加减乘除" tabindex="-1"><a class="header-anchor" href="#_3-1-加减乘除" aria-hidden="true">#</a> 3.1 加减乘除</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 数据类型的加减乘除</span>
<span class="token keyword">val</span> numberInt<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment">// = 1.5</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;numberInt：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">numberInt</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 输出1</span>

<span class="token comment">// 整数的3除以小数2</span>
<span class="token keyword">val</span> numberDouble<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出1.5</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;numberDouble：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">numberDouble</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;乘法：&quot;</span></span> <span class="token operator">+</span> numberInt <span class="token operator">*</span> numberInt<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;取余：&quot;</span></span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-位运算" tabindex="-1"><a class="header-anchor" href="#_3-2-位运算" aria-hidden="true">#</a> 3.2 位运算</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 位运算</span>
<span class="token keyword">val</span> vip <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">val</span> admin <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token comment">// 与操作，要求两个条件都满足结果才会为true</span>
<span class="token keyword">val</span> result <span class="token operator">=</span> vip<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token comment">// 或操作，只要有一个条件为true，结果就为true</span>
<span class="token keyword">val</span> result2 <span class="token operator">=</span> vip<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span>

<span class="token comment">// 无符号右移</span>
<span class="token comment">// 0000 1000 ---&gt; 0000 0010 = 2</span>
<span class="token keyword">val</span> result3 <span class="token operator">=</span> <span class="token number">8</span> <span class="token function">ushr</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;result：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;result2：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result2</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;result3：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result3</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h2><h3 id="_1-数组" tabindex="-1"><a class="header-anchor" href="#_1-数组" aria-hidden="true">#</a> 1.数组</h3><h5 id="_1-1-arrayof-数组" tabindex="-1"><a class="header-anchor" href="#_1-1-arrayof-数组" aria-hidden="true">#</a> 1.1 arrayOf() 数组</h5><ul><li>初始化是必须指定数组的元素 不定长，可以是任意类型</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 1. 使用arrayOf创建数组，必须指定数组的元素，可以是任意类型</span>
<span class="token keyword">val</span> arrayNumber<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token comment">// 集合中的元素可以是任意类型</span>
<span class="token comment">// kotlin中的Any等于java中的Object</span>
<span class="token keyword">val</span> arrayObjects<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> <span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-arrayofnulls" tabindex="-1"><a class="header-anchor" href="#_1-2-arrayofnulls" aria-hidden="true">#</a> 1.2 arrayOfNulls()</h5><ul><li>必指定元素类型、指定数组长度</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 2. 使用arrayOfNulls创建空数组</span>
<span class="token comment">// 创建一个指定大小的、所有元素都为空的数组，但必须指定集合中的元素类型</span>
<span class="token comment">// ?代表集合中的元素可为null</span>
<span class="token keyword">val</span> arrayOfNulls<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">arrayOfNulls</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
arrayOfNulls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;element1&quot;</span></span>
arrayOfNulls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;element2&quot;</span></span>
arrayOfNulls<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;element3&quot;</span></span>
arrayOfNulls<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;element4&quot;</span></span>
arrayOfNulls<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-3-动态创建数组-不常用" tabindex="-1"><a class="header-anchor" href="#_1-3-动态创建数组-不常用" aria-hidden="true">#</a> 1.3 动态创建数组（不常用）</h5><ul><li>利用 Array 的构造函数动态的创建</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 3. 利用array的构造函数动态创建数组</span>
<span class="token comment">// 创建一个Array&lt;String&gt;并初始化为[&quot;0&quot;，&quot;1&quot;，&quot;4&quot;，&quot;9&quot;，&quot;16&quot;]</span>
<span class="token comment">// i = 0, 1, 2, 3, 4</span>
<span class="token comment">// i * i = &quot;0&quot;，&quot;1&quot;，&quot;4&quot;，&quot;9&quot;，&quot;16&quot;</span>
<span class="token comment">// 数组创建的时候，会循环5次，i就是数组的下标</span>
<span class="token comment">// -&gt; 右边的表达式的结果，就是数组中当前的下标</span>
<span class="token keyword">val</span> asc<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-4-字节数组" tabindex="-1"><a class="header-anchor" href="#_1-4-字节数组" aria-hidden="true">#</a> 1.4 字节数组</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 4. 字节数组</span>
<span class="token keyword">val</span> bytes <span class="token operator">=</span> <span class="token function">ByteArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-5-使用-intarray-创建整型数组" tabindex="-1"><a class="header-anchor" href="#_1-5-使用-intarray-创建整型数组" aria-hidden="true">#</a> 1.5 使用 IntArray 创建整型数组</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 5. 使用IntArray创建整型的数据数组</span>
<span class="token comment">// 1. 创建一个长度为5的空的IntArray</span>
<span class="token comment">// Byte、Short、Int、Long、Float、Double、Boolean、Char</span>
<span class="token keyword">val</span> ints <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
ints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment">// 3. 创建一个长度为5的IntArray并且里面每个元素都为100</span>
<span class="token keyword">val</span> intArr3 <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">100</span> <span class="token punctuation">}</span>

<span class="token comment">// 4. 注意这里it是它索引下标值，所以这是创建一个长度为5的IntArray[0, 2, 4, 6, 8]</span>
<span class="token keyword">val</span> intArr4 <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> it <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment">// it，lambda表达式专有变量，这里指的是数组的下标</span>
<span class="token keyword">val</span> intArr5 <span class="token operator">=</span> <span class="token function">IntArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment">// 与上方的作用一样，但是上方的写法更加简洁</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-6-数组循环遍历" tabindex="-1"><a class="header-anchor" href="#_1-6-数组循环遍历" aria-hidden="true">#</a> 1.6 数组循环遍历</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 数组如何进行for循环遍历</span>
<span class="token comment">// 依次取出数组中的元素，用for-in的形式</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> intArr4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 根据下标再取出对应位置的元素</span>
<span class="token comment">// for-in</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> intArr4<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;-&gt;&quot;</span></span> <span class="token operator">+</span> intArr4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 同时遍历下标和元素</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token keyword">in</span> intArr4<span class="token punctuation">.</span><span class="token function">withIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">item</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// forEach会依次回调我们数组中的元素</span>
intArr4<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;forEach：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// it代表的是数组的元素</span>
<span class="token punctuation">}</span>

<span class="token comment">// forEach增强版，会依次回调给我们数组中的下标和元素</span>
intArr4<span class="token punctuation">.</span><span class="token function">forEachIndexed</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> item <span class="token operator">-&gt;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">item</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-集合" tabindex="-1"><a class="header-anchor" href="#_2-集合" aria-hidden="true">#</a> 2.集合</h3><ul><li><p>List：是一个有序列表，可通过索引（下标）访问元素。元素可以在 list 中出现多次、元素可重复。</p></li><li><p>Set：是元素唯一的集合。一般来说 set 中元素的顺序并不重要、无序集合。</p></li><li><p>Map：（字典）是一组键值对。键是唯一的，每个键都刚好映射到一个值，值可以重复。</p></li></ul><h4 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h4><h5 id="_2-1-列表的创建方式" tabindex="-1"><a class="header-anchor" href="#_2-1-列表的创建方式" aria-hidden="true">#</a> 2.1 列表的创建方式</h5><ul><li>2.1.1 mutableList&lt;&gt;() 可变列表</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 列表的创建方式——可变列表</span>
  <span class="token keyword">val</span> arrayString <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  arrayString<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span>
  arrayString<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span>
  arrayString<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">)</span>
  arrayString<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;4&quot;</span></span><span class="token punctuation">)</span>
  arrayString<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">)</span>

  <span class="token keyword">val</span> arrayString2 <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">)</span>
  arrayString2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;4&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.1.2 listOf&lt;&gt;() 不可变列表 必须指定元素类型，必须初始化数据元素</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 列表的创建方式——不可变列表</span>
<span class="token comment">// 必须指定元素类型</span>
<span class="token comment">// 必须指定初始化数据元素 不可变</span>
<span class="token keyword">val</span> arrayInt <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">//  arrayInt.add</span>
<span class="token comment">//  arrayInt.remove</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-map-字典创建" tabindex="-1"><a class="header-anchor" href="#_2-2-map-字典创建" aria-hidden="true">#</a> 2.2 map 字典创建</h5><ul><li>2.2.1 mutableMapOf&lt;&gt;() 可变字典</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// map字典的创建——可变字典</span>
<span class="token comment">// （字典）是一组键值对。键是唯一的，每个键都刚好映射到一个值，值可以重复。</span>
<span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">arrayMapOf</span><span class="token punctuation">(</span><span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;value&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> arrayMap <span class="token operator">=</span> mutableMapOf<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
arrayMap<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span>
arrayMap<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span>
arrayMap<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span>
arrayMap<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;4&quot;</span></span> <span class="token comment">// 此时，会覆盖上面的记录</span>

<span class="token comment">// map字典的创建——使用Pair指定集合中初始化的元素</span>
<span class="token keyword">val</span> arrayMap2 <span class="token operator">=</span> <span class="token function">mutableMapOf</span><span class="token punctuation">(</span><span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;value&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.2.2 mapOf&lt;&gt;() 不可变字典 不可动态添加删除元素</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// map字典的创建——不可变字典，不可动态添加、删除元素</span>
<span class="token keyword">val</span> arrayMap3 <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;value&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> arrayMap4 <span class="token operator">=</span> mapOf<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-set-集合创建" tabindex="-1"><a class="header-anchor" href="#_2-3-set-集合创建" aria-hidden="true">#</a> 2.3 Set 集合创建</h5><ul><li>2.3.1 mutableSetOf&lt;&gt;() 可变集合元素，唯一</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// set集合的创建——可变集合，元素唯一</span>
<span class="token keyword">val</span> <span class="token keyword">set</span> <span class="token operator">=</span> mutableSetOf<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 添加不进去</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> <span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">val</span> set2 <span class="token operator">=</span> <span class="token function">mutableSetOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
set2<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.3.2 setOf&lt;&gt;() 不可变</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// set集合的创建——不可变集合，元素唯一</span>
<span class="token keyword">val</span> set3 <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// set3.add</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-集合的操作-同样适用与-map-set-list" tabindex="-1"><a class="header-anchor" href="#_2-4-集合的操作-同样适用与-map-set-list" aria-hidden="true">#</a> 2.4 集合的操作 同样适用与 map,set,list</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 下面的方法同样适用于set，map，list</span>
<span class="token keyword">val</span> arrayExamples <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;4&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;isEmpty：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">arrayExamples<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;contains：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">arrayExamples<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;6&quot;</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;containsAll：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">arrayExamples<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;get：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">arrayExamples<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;indexOf：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">arrayExamples<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;6&quot;</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 判断元素在集合中的下标位置</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;lastIndexOf：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">arrayExamples<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;5&quot;</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 判断元素在集合中的下标位置</span>
<span class="token keyword">val</span> iterator <span class="token operator">=</span> arrayExamples<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
iterator<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;it：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//    arrayExamples.clear() // 集合中的元素被清除</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;length：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">arrayExamples<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
arrayExamples<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;0&quot;</span></span> <span class="token comment">// 修改下标对应的元素，index不能超过集合size的大小</span>
arrayExamples<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;7&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 指定位置添加元素</span>
arrayExamples<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-5-变换操作" tabindex="-1"><a class="header-anchor" href="#_2-5-变换操作" aria-hidden="true">#</a> 2.5 变换操作</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
numbers<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
numbers<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;reverse：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

numbers<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 随机排列元素</span>
numbers<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;shuffle：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 排序，从小到大排序</span>
numbers<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;sort：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

numbers<span class="token punctuation">.</span><span class="token function">sortDescending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 排序，从大到小排序</span>
numbers<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;sortDescending：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kotlin-方法与-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#kotlin-方法与-lambda-表达式" aria-hidden="true">#</a> Kotlin 方法与 Lambda 表达式</h2><h3 id="_1-kotlin-的方法" tabindex="-1"><a class="header-anchor" href="#_1-kotlin-的方法" aria-hidden="true">#</a> 1. kotlin 的方法</h3><h4 id="_1-1-方法声明" tabindex="-1"><a class="header-anchor" href="#_1-1-方法声明" aria-hidden="true">#</a> 1.1 方法声明</h4><h5 id="_1-1-1-成员方法" tabindex="-1"><a class="header-anchor" href="#_1-1-1-成员方法" aria-hidden="true">#</a> 1.1.1 成员方法</h5><ul><li>成员方法需要构建实列对象，才能访问成员方法</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//成员方法</span>
<span class="token keyword">class</span> Person<span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Person test方法&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//成员方法需要构建实列对象，才能访问成员方法</span>
    <span class="token comment">//示例对象的构建只需要在类名后面加上() !!!不需要new</span>
    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-1-2-类方法" tabindex="-1"><a class="header-anchor" href="#_1-1-2-类方法" aria-hidden="true">#</a> 1.1.2 类方法</h5><ul><li>当想要在 class 声明的类里面，想要定义一个静态方法的话使用伴生类</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//成员方法</span>
<span class="token keyword">class</span> Person<span class="token punctuation">{</span>
    <span class="token comment">//伴生类</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span><span class="token punctuation">{</span>
        <span class="token keyword">fun</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;伴生类的方法&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//伴生类的方法调用</span>
    Person<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>静态类：如果我们想实现一个工具 util 时，可以借助关键字 object 创建一个静态类</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//静态类</span>
<span class="token keyword">object</span> NumUtil<span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>num<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span>Int<span class="token punctuation">{</span>
        <span class="token keyword">return</span> num<span class="token operator">+</span><span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//静态类方法调用，无须构建实例</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> NumUtil<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;静态类方法 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">n</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>全局静态: 直接新建一个 Kotlin file 然后定义一些常量、方法。</li></ul><h5 id="_1-1-3-单表达式方法" tabindex="-1"><a class="header-anchor" href="#_1-1-3-单表达式方法" aria-hidden="true">#</a> 1.1.3 单表达式方法</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//单表达式方法</span>
<span class="token keyword">fun</span> <span class="token function">double</span><span class="token punctuation">(</span>x<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span>Int <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">2</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> double <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;单表达式方法 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">double</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 当返回值类型可由编译器推断时，显式声明返回类型是可选的：</span>
<span class="token keyword">fun</span> <span class="token function">double</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-方法参数" tabindex="-1"><a class="header-anchor" href="#_1-2-方法参数" aria-hidden="true">#</a> 1.2 方法参数</h4><h5 id="_1-2-1-默认参数" tabindex="-1"><a class="header-anchor" href="#_1-2-1-默认参数" aria-hidden="true">#</a> 1.2.1 默认参数</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//2.1默认参数</span>
<span class="token comment">//方法参数可以有默认值，当省略相应的参数时使用默认值。与其Java相比，这可以减少重载数量：</span>
<span class="token keyword">fun</span> <span class="token function">read</span><span class="token punctuation">(</span>offset<span class="token operator">:</span>Int<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>start<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;offset </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">offset</span></span><span class="token string">, start </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">start</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//函数调用</span>
<span class="token function">read</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-2-具名参数" tabindex="-1"><a class="header-anchor" href="#_1-2-2-具名参数" aria-hidden="true">#</a> 1.2.2 具名参数</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>
<span class="token comment">//bar: Int = 0 默认值为0</span>
<span class="token comment">//baz: Int 无默认值</span>
<span class="token comment">//第三个参数是一个方法，参数名为 qux 如果参数的类型是() ,说明参数是一个方法类型</span>
<span class="token comment">//方法参数的返回值使用 -&gt;Unit（无返回值）  -&gt;String （返回值的类型是String）</span>
<span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> baz<span class="token operator">:</span> Int<span class="token punctuation">,</span> qux<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> qux1 <span class="token operator">=</span> <span class="token function">qux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>qux1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token comment">//函数调用</span>
<span class="token function">read</span><span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//如果一个无默认值的参数在默认值参数后，该默认值只能通过使用具名参数调用该方法</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token punctuation">,</span>qux<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token comment">//方法体里面的最后一行，就是该方法的返回值</span>
    <span class="token keyword">val</span> res<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span>
    <span class="token string-literal singleline"><span class="token string">&quot;res </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">res</span></span><span class="token string">，括号内使用具名参数，传递action参数&quot;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//当且仅当最后的参数是一个方法时才可以写在花括号外面</span>
<span class="token function">foo</span><span class="token punctuation">(</span>baz<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token string-literal singleline"><span class="token string">&quot;括号外传递action参数&quot;</span></span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-3-可变数量的参数" tabindex="-1"><a class="header-anchor" href="#_1-2-3-可变数量的参数" aria-hidden="true">#</a> 1.2.3 可变数量的参数</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token number">2.3</span>可变数量参数
<span class="token keyword">fun</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> str<span class="token operator">:</span>Char<span class="token punctuation">,</span>num<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span>String <span class="token punctuation">{</span>
    <span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    str<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//函数调用</span>
<span class="token keyword">val</span> append <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;append 可变数量参数 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">append</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 输出：append 可变数量参数 123a</span>

<span class="token keyword">val</span> world <span class="token operator">=</span> <span class="token function">charArrayOf</span><span class="token punctuation">(</span><span class="token char">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token operator">*</span>world<span class="token punctuation">,</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//*world，依次添加world字符数组中的元素</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;append 可变数量参数 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-方法作用域" tabindex="-1"><a class="header-anchor" href="#_1-3-方法作用域" aria-hidden="true">#</a> 1.3 方法作用域</h4><h5 id="_1-3-1-局部方法" tabindex="-1"><a class="header-anchor" href="#_1-3-1-局部方法" aria-hidden="true">#</a> 1.3.1 局部方法</h5><ul><li>一个方法在另一个方法内部</li><li>局部方法可以访问外部方法（即闭包）的局部变量</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token comment">//foo是局部方法</span>
    <span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span>v<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
        <span class="token keyword">return</span> v <span class="token operator">*</span> v
    <span class="token punctuation">}</span>

    <span class="token keyword">val</span> v1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#_2-lambda-表达式" aria-hidden="true">#</a> 2.Lambda 表达式</h3><h4 id="_2-1-lambda-表达式的特点" tabindex="-1"><a class="header-anchor" href="#_2-1-lambda-表达式的特点" aria-hidden="true">#</a> 2.1 Lambda 表达式的特点</h4><ul><li>是匿名方法</li><li>可以作为参数传递给方法</li></ul><h4 id="_2-2-lambda-语法" tabindex="-1"><a class="header-anchor" href="#_2-2-lambda-语法" aria-hidden="true">#</a> 2.2 Lambda 语法</h4><h5 id="无参数的-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#无参数的-lambda-表达式" aria-hidden="true">#</a> 无参数的 Lambda 表达式</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// val/var 变量名 = {操作代码}</span>

<span class="token keyword">val</span> sum <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;无参数的Lambda表达式&quot;</span></span><span class="token punctuation">)</span>
    <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token comment">//调用Lambda表达式</span>
<span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;无参数的Lambda表达式 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="有参数" tabindex="-1"><a class="header-anchor" href="#有参数" aria-hidden="true">#</a> 有参数</h5><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// val/var 变量名:(参数类型，参数类型....) -&gt; 返回的类型={参数1，参数2...... -&gt; 操作参数的代码}</span>
<span class="token comment">// 此种写法：即表达式的返回值类型会根据操作的代码自推导出来。</span>
<span class="token comment">// val/var 变量名 = { 参数1 ： 类型，参数2 : 类型, ... -&gt; 操作参数的代码 }</span>

<span class="token keyword">val</span> sum2<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Int <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-&gt;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;有参数的Lambda表达式&quot;</span></span><span class="token punctuation">)</span>
    a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token comment">//调用Lambda表达式</span>
<span class="token keyword">val</span> result2 <span class="token operator">=</span> <span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;有参数的Lambda表达式 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result2</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-lambda-实践" tabindex="-1"><a class="header-anchor" href="#_2-3-lambda-实践" aria-hidden="true">#</a> 2.3 Lambda 实践</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//array int数组</span>
<span class="token comment">//action方法，两个Int 参数，返回值是Int</span>
<span class="token keyword">fun</span> <span class="token function">change</span><span class="token punctuation">(</span>array<span class="token operator">:</span>Array<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">,</span>action<span class="token operator">:</span><span class="token punctuation">(</span>index<span class="token operator">:</span>Int<span class="token punctuation">,</span>element<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Int<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>index <span class="token keyword">in</span> array<span class="token punctuation">.</span>indices<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//indices是数组下标</span>
        <span class="token keyword">val</span> newValue <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> newValue
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">array<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用Lambda表达式</span>
<span class="token keyword">val</span> number<span class="token operator">:</span>Array<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token function">change</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span> index<span class="token punctuation">,</span> element <span class="token operator">-&gt;</span>
    index <span class="token operator">*</span> element <span class="token comment">//方法体最后一句是return</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-1-隐式参数-it" tabindex="-1"><a class="header-anchor" href="#_2-3-1-隐式参数-it" aria-hidden="true">#</a> 2.3.1 隐式参数 it</h5><ul><li><p>it 并不是 Kotlin 中的一个关键字(保留字)</p></li><li><p>it 是在当一个高阶方法中 Lambda 表达式的参数只有一个的时候可以使用 it 来使用此参数</p></li><li><p>it 可表示为单个参数的隐式名称，是 Kotlin 语言约定的</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 调用时</span>
number<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 多个参数就指明参数名类型</span>

<span class="token comment">//forEachIndexed 参数是下标和元素</span>
number<span class="token punctuation">.</span><span class="token function">forEachIndexed</span><span class="token punctuation">{</span>index<span class="token operator">:</span> Int<span class="token punctuation">,</span> element<span class="token operator">:</span> Int <span class="token operator">-&gt;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;forEachIndexed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">element</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//显示调用</span>
<span class="token comment">/*number.forEachIndexed(action = {index: Int, element: Int -&gt;
    println(&quot;forEachIndexed $index : $element&quot;)
})*/</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-2-下划线" tabindex="-1"><a class="header-anchor" href="#_2-3-2-下划线" aria-hidden="true">#</a> 2.3.2 下划线_</h5><ul><li>在使用 Lambda 表达式的时候，可以用下划线(_)表示未使用的参数，表示不处理这个参数</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> map <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;key1&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;key2&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;key3&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">key</span></span><span class="token string"> \\t </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 不需要key的时候</span>
map<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
    <span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kotlin-条件控制" tabindex="-1"><a class="header-anchor" href="#kotlin-条件控制" aria-hidden="true">#</a> Kotlin 条件控制</h2><ul><li>Tips：Kotlin 中没有 <code>switch-case</code> 语句</li></ul><p><img src="`+r+`" alt="Kotlin 条件控制"></p><h3 id="_1-if-表达式" tabindex="-1"><a class="header-anchor" href="#_1-if-表达式" aria-hidden="true">#</a> 1.if 表达式</h3><h4 id="_1-1-带返回值-if-表达式" tabindex="-1"><a class="header-anchor" href="#_1-1-带返回值-if-表达式" aria-hidden="true">#</a> 1.1 带返回值 if 表达式</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">maxOf</span><span class="token punctuation">(</span>a<span class="token operator">:</span>Int<span class="token punctuation">,</span>b<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span>Int<span class="token punctuation">{</span> <span class="token comment">//比较两个值的大小</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> a
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> b
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-if-表达式替代三目运算符" tabindex="-1"><a class="header-anchor" href="#_1-2-if-表达式替代三目运算符" aria-hidden="true">#</a> 1.2 if 表达式替代三目运算符</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">maxOf2</span><span class="token punctuation">(</span>a<span class="token operator">:</span>Int<span class="token punctuation">,</span>b<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span>Int<span class="token punctuation">{</span> <span class="token comment">//maxOf简写版</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> a <span class="token keyword">else</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-多级-if-表达式" tabindex="-1"><a class="header-anchor" href="#_1-3-多级-if-表达式" aria-hidden="true">#</a> 1.3 多级 if 表达式</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">eval</span><span class="token punctuation">(</span>number<span class="token operator">:</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">is</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;this is int number&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">is</span> Double<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;this is double number&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">is</span> Byte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;this is byte number&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">is</span> Short<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;this is Short number&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;invalid argument&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-when-表达式" tabindex="-1"><a class="header-anchor" href="#_2-when-表达式" aria-hidden="true">#</a> 2.when 表达式</h3><ul><li><p>代替 java 中的 switch case</p></li><li><p>when 将它的参数与所有的分支条件顺序比较，直到某个分支满足条件</p></li><li><p>分支条件可以是 if 语句，数据类型，具体值</p></li><li><p>如果不提供参数即 when(){…}，所有的分支条件都是简单的布尔表达式</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">eval2</span><span class="token punctuation">(</span>number<span class="token operator">:</span> Any<span class="token punctuation">)</span><span class="token operator">:</span>String <span class="token operator">=</span> <span class="token keyword">when</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;one&quot;</span></span>
    <span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;hello word&quot;</span></span>
    <span class="token keyword">is</span> Int <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;int&quot;</span></span>
    <span class="token keyword">is</span> Double<span class="token punctuation">,</span>Float <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;Double 或 Float&quot;</span></span> 多个分支条件放在一起，用逗号分隔
    <span class="token keyword">is</span> String <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;多行when&quot;</span></span><span class="token punctuation">)</span>
        <span class="token string-literal singleline"><span class="token string">&quot;String&quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token keyword">else</span>  <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;invalid number&quot;</span></span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-when-表达式的功能增强" tabindex="-1"><a class="header-anchor" href="#_3-when-表达式的功能增强" aria-hidden="true">#</a> 3.when 表达式的功能增强</h3><ul><li>kotlin1.3 版本后 when(value) value 可以动态赋值，如方法的返回结果</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">eval3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>String <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token keyword">val</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">//when表达式条件直接是一个表达式，并用value保存了返回值, 实际上相当于把外部那一行缩进来写</span>
        <span class="token keyword">is</span> Int <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;This is Int Type, value is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span>
        <span class="token keyword">is</span> String <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;This is String Type, value is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span>
        <span class="token keyword">is</span> Double <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;This is Double Type, value is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span>
        <span class="token keyword">is</span> Float <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;This is Float Type, value is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span>
        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;unknown type&quot;</span></span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Any <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">100F</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-使用-when-表达式替代-if-表达式" tabindex="-1"><a class="header-anchor" href="#_4-使用-when-表达式替代-if-表达式" aria-hidden="true">#</a> 4.使用 when 表达式替代 if 表达式</h3><ul><li>主函数调用</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.if</span>
    <span class="token comment">//1.1带返回值 if 表达式</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;maxOf </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">maxOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//1.3 多级 if 表达式</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;eval </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token number">1.22</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> \\n&quot;</span></span><span class="token punctuation">)</span>


    <span class="token comment">//2.when 表达式   (代替java中的switch case)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;eval </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">eval2</span><span class="token punctuation">(</span><span class="token number">99f</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token comment">//3.when 表达式的功能增强</span>
    <span class="token function">eval3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kotlin-循环控制" tabindex="-1"><a class="header-anchor" href="#kotlin-循环控制" aria-hidden="true">#</a> Kotlin 循环控制</h2><p><img src="`+k+`" alt="Kotlin 循环控制"></p><h3 id="_1-for-循环" tabindex="-1"><a class="header-anchor" href="#_1-for-循环" aria-hidden="true">#</a> 1.for 循环</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//for item in elements  elements可以是数组、集合</span>
<span class="token comment">//1.1 for-in</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;for-in&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>item <span class="token keyword">in</span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">item</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//1.2 forEach</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\nforEach&quot;</span></span><span class="token punctuation">)</span>
items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//1.3 forEachIndexed</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\nforEachIndexed&quot;</span></span><span class="token punctuation">)</span>
items<span class="token punctuation">.</span><span class="token function">forEachIndexed</span><span class="token punctuation">{</span>index<span class="token punctuation">,</span> item <span class="token operator">-&gt;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">item</span></span><span class="token string">   &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-while-和-do-while-循环" tabindex="-1"><a class="header-anchor" href="#_2-while-和-do-while-循环" aria-hidden="true">#</a> 2.while 和 do-while 循环</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//2.while 和 do-while</span>
<span class="token comment">//2.1 while 先判断再循环</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\n\\nwhile&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span>items<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">items<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//2.2 do-while 先执行一次循环体，再判断循环</span>
index <span class="token operator">=</span> <span class="token number">0</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\ndo-while&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">items<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-迭代区间和数列-常用" tabindex="-1"><a class="header-anchor" href="#_3-迭代区间和数列-常用" aria-hidden="true">#</a> 3.迭代区间和数列 常用</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//遍历区间，注意Kotlin的区间的包含或是闭合的</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\n\\n遍历区间&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//[1,10]</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//for in-until 前闭后开</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\nfor in-until&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//[1,10)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//for in downTo</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\nfor in downTo&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">10</span> downTo <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//downTo 倒序遍历</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//for in downTo step</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\nfor in step&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">10</span> downTo <span class="token number">1</span> step <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//倒序 步长为3</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//遍历数组时或list</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\nindices&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> array<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//遍历索引</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot; &quot;</span></span><span class="token operator">+</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\nwithIndex方法&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> array<span class="token punctuation">.</span><span class="token function">withIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">   &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\n\\n&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-循环中的-break-与-continue" tabindex="-1"><a class="header-anchor" href="#_4-循环中的-break-与-continue" aria-hidden="true">#</a> 4.循环中的 break 与 continue</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//4.break continue</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token comment">// 如果 i 能整除于 2，跳出本次循环，进入下一个循环</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">break</span> <span class="token comment">// 如果 j 小于 10 ，终止循环。</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">j</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><h3 id="_1-泛型接口-类-泛型类型" tabindex="-1"><a class="header-anchor" href="#_1-泛型接口-类-泛型类型" aria-hidden="true">#</a> 1.泛型接口/类（泛型类型）</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.1 泛型接口</span>
    <span class="token keyword">val</span> drinkApple <span class="token operator">=</span> <span class="token function">DrinkApple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    drinkApple<span class="token punctuation">.</span><span class="token function">drink</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;apple&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//1.2 泛型类</span>
    <span class="token keyword">val</span> blueColor <span class="token operator">=</span> <span class="token function">BlueColor</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;blue&quot;</span></span><span class="token punctuation">)</span>
    blueColor<span class="token punctuation">.</span><span class="token function">printColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//1.1泛型接口</span>
<span class="token keyword">interface</span> Drink<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">drink</span><span class="token punctuation">(</span>t <span class="token operator">:</span> T<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//接口实现</span>
<span class="token keyword">class</span> DrinkApple <span class="token operator">:</span> Drink<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">drink</span><span class="token punctuation">(</span>t<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Drink </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">t</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">//1.2 泛型类</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> Color<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> t<span class="token operator">:</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//t是成员变量</span>
    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">printColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token function">BlueColor</span><span class="token punctuation">(</span><span class="token keyword">val</span> color<span class="token operator">:</span>String<span class="token punctuation">)</span> <span class="token operator">:</span> Color<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">printColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;color is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">color</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-泛型字段" tabindex="-1"><a class="header-anchor" href="#_2-泛型字段" aria-hidden="true">#</a> 2.泛型字段</h3><ul><li>类或者方法入参指定的类型是 T</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Drink<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">drink</span><span class="token punctuation">(</span>t <span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token comment">//t泛型字段</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> Color<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> t<span class="token operator">:</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//t是成员变量 t泛型字段</span>
    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">printColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-泛型方法" tabindex="-1"><a class="header-anchor" href="#_3-泛型方法" aria-hidden="true">#</a> 3.泛型方法</h3><ul><li><p>json 序列化的时候使用</p></li><li><p>类型参数要放在方法名的前面</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token operator">:</span>String <span class="token punctuation">,</span> tClass<span class="token operator">:</span>Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> T<span class="token operator">?</span><span class="token punctuation">{</span> <span class="token comment">//T?返回值可空(应对json为空的时候)</span>
    <span class="token comment">//声明一个实列，可能会抛出异常(IllegalAccessException, InstantiationException;) 要显式声明类型 T?</span>
    <span class="token keyword">val</span> instance<span class="token operator">:</span>T<span class="token operator">?</span> <span class="token operator">=</span> tClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> instance
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//3.泛型方法</span>
    fromJson<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{}&quot;</span></span><span class="token punctuation">,</span>String<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span> <span class="token comment">//class参数 String::class.java</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-泛型约束" tabindex="-1"><a class="header-anchor" href="#_4-泛型约束" aria-hidden="true">#</a> 4.泛型约束</h3><ul><li>泛型约束指定泛型的类型范围</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//4.泛型约束 （常见）</span>
<span class="token comment">//约束写法1</span>
<span class="token comment">// T : xObject  所传递的类型T必须满足是xObject的子类 或xObject类</span>
<span class="token keyword">fun</span><span class="token operator">&lt;</span>T <span class="token operator">:</span> JSONObject<span class="token operator">&gt;</span> <span class="token function">fromJson2</span><span class="token punctuation">(</span>json<span class="token operator">:</span>String <span class="token punctuation">,</span> tClass<span class="token operator">:</span>Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> T<span class="token operator">?</span><span class="token punctuation">{</span> <span class="token comment">//T?返回值可空(应对json为空的时候)</span>
    <span class="token comment">//声明一个实列，可能会抛出异常(IllegalAccessException, InstantiationException;) 要显式声明类型 T?</span>
    <span class="token keyword">val</span> instance<span class="token operator">:</span>T<span class="token operator">?</span> <span class="token operator">=</span> tClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> instance
<span class="token punctuation">}</span>
<span class="token comment">//约束写法2</span>
<span class="token comment">//所传递的类型T必须同时满足 where 子句的所有条件</span>
<span class="token comment">//where T:类x,T:接口x , T必须满足类x或类x的子类，  同时T必须实现 接口x</span>
<span class="token keyword">fun</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">fromJson3</span><span class="token punctuation">(</span>json<span class="token operator">:</span>String <span class="token punctuation">,</span> tClass<span class="token operator">:</span>Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> T<span class="token operator">?</span> <span class="token keyword">where</span> T<span class="token operator">:</span>JSONObject<span class="token punctuation">,</span>T<span class="token operator">:</span>Comparable<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">{</span> <span class="token comment">//T?返回值可空(应对json为空的时候)</span>
    <span class="token comment">//声明一个实列，可能会抛出异常(IllegalAccessException, InstantiationException;) 要显式声明类型 T?</span>
    <span class="token keyword">val</span> instance<span class="token operator">:</span>T<span class="token operator">?</span> <span class="token operator">=</span> tClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> instance
<span class="token punctuation">}</span>
<span class="token keyword">class</span> User <span class="token operator">:</span> <span class="token function">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Comparable<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
        <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Not yet implemented&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">// 主函数调用</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//4.泛型约束</span>
fromJson2<span class="token operator">&lt;</span>JSONObject<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{}&quot;</span></span><span class="token punctuation">,</span>JSONObject<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>
<span class="token comment">//4.2多种约束</span>
fromJson3<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{}&quot;</span></span><span class="token punctuation">,</span>User<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-泛型中的-out-与-in" tabindex="-1"><a class="header-anchor" href="#_5-泛型中的-out-与-in" aria-hidden="true">#</a> 5.泛型中的 out 与 in</h3><h4 id="_5-1-out-约束泛型参数的类型上限" tabindex="-1"><a class="header-anchor" href="#_5-1-out-约束泛型参数的类型上限" aria-hidden="true">#</a> 5.1 out 约束泛型参数的类型上限</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//5.泛型中的out与in</span>
<span class="token keyword">open</span> <span class="token keyword">class</span> Animal

<span class="token keyword">class</span> CatAnimal <span class="token operator">:</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">open</span> <span class="token keyword">class</span> DogAnimal <span class="token operator">:</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//继承Animal</span>
<span class="token keyword">class</span> whiteDogAnimal <span class="token operator">:</span> <span class="token function">DogAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">animalFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">val</span> animal<span class="token operator">:</span>Animal <span class="token operator">=</span> <span class="token function">DogAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//5.1 out约束泛型参数的类型上限</span>
    <span class="token comment">//不能做级别类型的类型强转</span>
    <span class="token comment">// val animalList:ArrayList&lt;Animal&gt; = ArrayList&lt;DogAnimal&gt;() 报错类型错误</span>
    <span class="token comment">//out  泛型参数的类型 允许传入T，以及T的子类</span>
    <span class="token comment">//使用处使用out关键字声明——泛型上限</span>
    <span class="token keyword">val</span> animalList<span class="token operator">:</span>ArrayList<span class="token operator">&lt;</span><span class="token keyword">out</span> Animal<span class="token operator">&gt;</span> <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>DogAnimal<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//在定义处使用out关键字声明</span>
    <span class="token keyword">val</span> animalList1<span class="token operator">:</span>ArrayList<span class="token operator">&lt;</span>Animal<span class="token operator">&gt;</span> <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>DogAnimal<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token punctuation">}</span>
<span class="token comment">//在定义处使用out关键字声明，允许传入的泛型参数可以是T以及T的子类</span>
<span class="token keyword">class</span> ArrayList<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">&gt;</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2in-约束泛型参数的类型下限" tabindex="-1"><a class="header-anchor" href="#_5-2in-约束泛型参数的类型下限" aria-hidden="true">#</a> 5.2in 约束泛型参数的类型下限</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">animalFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//5.2in约束泛型参数的类型下限 允许传入的类型泛型参数可以是T以及T的父类</span>
    <span class="token comment">//val animalList3:ArrayList&lt;DogAnimal&gt; = ArrayList&lt;Animal&gt;() //报错类型错误</span>
    <span class="token comment">//使用处使用in关键字声明——泛型下限</span>
    <span class="token keyword">val</span> animalList3<span class="token operator">:</span>ArrayList<span class="token operator">&lt;</span><span class="token keyword">in</span> DogAnimal<span class="token operator">&gt;</span> <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>Animal<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    在定义处使用<span class="token keyword">out</span>关键字声明
    <span class="token keyword">val</span> animalList4<span class="token operator">:</span>ArrayList<span class="token operator">&lt;</span>DogAnimal<span class="token operator">&gt;</span> <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>Animal<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

<span class="token comment">//5.2in约束泛型参数的类型下限</span>
<span class="token keyword">class</span> ArrayList<span class="token operator">&lt;</span><span class="token keyword">in</span> T<span class="token operator">&gt;</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kotlin-扩展函数" tabindex="-1"><a class="header-anchor" href="#kotlin-扩展函数" aria-hidden="true">#</a> kotlin 扩展函数</h2><h3 id="扩展方法" tabindex="-1"><a class="header-anchor" href="#扩展方法" aria-hidden="true">#</a> 扩展方法</h3><ul><li>扩展方法的原型</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">lastChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Char <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-扩展方法的使用" tabindex="-1"><a class="header-anchor" href="#_2-扩展方法的使用" aria-hidden="true">#</a> 2.扩展方法的使用</h3><h4 id="_2-1-在-kotlin-中使用" tabindex="-1"><a class="header-anchor" href="#_2-1-在-kotlin-中使用" aria-hidden="true">#</a> 2.1 在 Kotlin 中使用</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleJump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> Jump<span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//扩展函数的定义，就是在方法的前面加上类前缀</span>
<span class="token comment">//针对无法直接修改类的时候，如想要修改一个jar包种的类</span>
<span class="token keyword">fun</span> Jump<span class="token punctuation">.</span><span class="token function">doubleJump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>String<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Jump.doubleJump()&quot;</span></span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-在-java-中使用" tabindex="-1"><a class="header-anchor" href="#_2-2-在-java-中使用" aria-hidden="true">#</a> 2.2 在 Java 中使用</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">class</span> KtExtensions <span class="token punctuation">{</span>
    <span class="token keyword">public</span> static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        KTExtensionsKt<span class="token punctuation">.</span><span class="token function">doubleJump</span><span class="token punctuation">(</span>new <span class="token function">Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>S

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-原理解析-kotlin-扩展函数是怎么实现的" tabindex="-1"><a class="header-anchor" href="#_3-原理解析-kotlin-扩展函数是怎么实现的" aria-hidden="true">#</a> 3.原理解析：Kotlin 扩展函数是怎么实现的</h3><ul><li>AS 中<code>Tools</code> —&gt; <code>kotlin</code> ----&gt; <code>show kotlin byteCode</code></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> KTExtensionsKt <span class="token punctuation">{</span>
   <span class="token keyword">public</span> static <span class="token keyword">final</span> void <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span>new <span class="token function">Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">doubleJump</span><span class="token punctuation">(</span>new <span class="token function">Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token annotation builtin">@NotNull</span>
   <span class="token keyword">public</span> static <span class="token keyword">final</span> String <span class="token function">doubleJump</span><span class="token punctuation">(</span><span class="token annotation builtin">@NotNull</span> Jump $<span class="token keyword">this</span>$doubleJump<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Intrinsics<span class="token punctuation">.</span><span class="token function">checkNotNullParameter</span><span class="token punctuation">(</span>$<span class="token keyword">this</span>$doubleJump<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression"><span class="token keyword">this</span></span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">doubleJump</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Jump.doubleJump()&quot;</span></span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过反编译出的 java 代码</li><li>当在 java 中调用 kotlin 扩展方法时需要传入一个所扩展类的实例对象</li></ul><h3 id="_4-泛型扩展方法" tabindex="-1"><a class="header-anchor" href="#_4-泛型扩展方法" aria-hidden="true">#</a> 4.泛型扩展方法</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> MutableList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>index1<span class="token operator">:</span>Int <span class="token punctuation">,</span> index2<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">val</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>index1<span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>index2<span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>

<span class="token comment">// 主函数调用</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//4.泛型扩展方法</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
    list<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;泛型扩展方法 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">list</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-扩展属性" tabindex="-1"><a class="header-anchor" href="#_5-扩展属性" aria-hidden="true">#</a> 5.扩展属性</h3><ul><li>扩展属性提供了一种方法能通过属性语法进行访问的 API 来扩展。</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//5.扩展属性</span>
<span class="token comment">//对String类添加一个lastChar属性 （在kotlin里任何字段都有get set方法）</span>
<span class="token keyword">val</span> String<span class="token punctuation">.</span>lastChar<span class="token operator">:</span>Char <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">// 主函数调用</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//5.扩展属性</span>
<span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;evening&quot;</span></span>
<span class="token keyword">val</span> strLastChar <span class="token operator">=</span> str<span class="token punctuation">.</span>lastChar
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\nlastChar: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">strLastChar</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-为伴生对象添加扩展" tabindex="-1"><a class="header-anchor" href="#_6-为伴生对象添加扩展" aria-hidden="true">#</a> 6.为伴生对象添加扩展</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Eat <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">fun</span> Eat<span class="token punctuation">.</span>Companion<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Eat.Companion&quot;</span></span><span class="token operator">+</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 主函数调用</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//6.为伴生对象添加扩展</span>
    Eat<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;伴生对象添加扩展&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-kotlin-中常用的扩展" tabindex="-1"><a class="header-anchor" href="#_7-kotlin-中常用的扩展" aria-hidden="true">#</a> 7.Kotlin 中常用的扩展</h3><h4 id="_7-1-let-扩展" tabindex="-1"><a class="header-anchor" href="#_7-1-let-扩展" aria-hidden="true">#</a> 7.1 let 扩展</h4><ul><li><p>let 扩展函数的实际上是一个作用域函数</p><ul><li>当你需要去定义一个变量在一个特定的作用域范围内，那么 let 函数是一个不错的选择；</li><li>let 函数另一个作用就是可以避免写一些判断 null 的操作。</li></ul></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//7.1  let扩展 类名后面加上? 代表参数可能为空，使用的时候 注意判空</span>
<span class="token keyword">fun</span> <span class="token function">testLet</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">/*    str.let {//it:String?
        val str2 = &quot;morning&quot;
        println(str2 + it)
    }*/</span>

    <span class="token comment">//判空用法，当str为空时不会触发闭包里面的逻辑</span>
    str<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">{</span>
        <span class="token keyword">val</span> str2 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;morning&quot;</span></span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">str2</span></span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 主函数调用</span>
<span class="token comment">//7.1  let扩展</span>
<span class="token function">testLet</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;ddd&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-run-扩展" tabindex="-1"><a class="header-anchor" href="#_7-2-run-扩展" aria-hidden="true">#</a> 7.2 run 扩展</h4><ul><li>run 函数只接收一个 lambda 函数为参数，以闭包形式返回，返回值为最后一行的值或者指定的 return 的表达式，在 run 函数中可以直接访问实例的公有属性和方法</li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//7.2 run扩展</span>
<span class="token comment">//在run函数中可以**直接访问实例的公有属性和方法**</span>
<span class="token keyword">fun</span> <span class="token function">testRun</span><span class="token punctuation">(</span>jump<span class="token operator">:</span> Jump<span class="token punctuation">)</span> <span class="token operator">:</span> String<span class="token punctuation">{</span>
    jump<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>
        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//jump.test()</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;run函数&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 主函数调用</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//7.2 run扩展</span>
<span class="token keyword">val</span> j <span class="token operator">=</span> <span class="token function">Jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">testRun</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-apply-扩展" tabindex="-1"><a class="header-anchor" href="#_7-3-apply-扩展" aria-hidden="true">#</a> 7.3 apply 扩展</h4><ul><li><p>apply 函数的作用是：调用某对象的 apply 函数，在函数范围内，可以任意调用该对象的任意方法，并返回该对象。</p></li><li><p>从结构上来看 apply 函数和 run 函数很像，唯一不同点就是它们各自返回的值不一样 run 函数是以闭包形式返回最后一行代码的值，而 apply 函数的返回的是传入对象的本身</p></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//7.3 apply扩展</span>
<span class="token keyword">fun</span> <span class="token function">testApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arrayListOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>
        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;111&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;22222&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 主函数调用</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//7.3 apply扩展</span>
<span class="token function">testApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例-使用-kotlin-扩展为控件绑定监听器减少模板代码" tabindex="-1"><a class="header-anchor" href="#案例-使用-kotlin-扩展为控件绑定监听器减少模板代码" aria-hidden="true">#</a> 案例：使用 Kotlin 扩展为控件绑定监听器减少模板代码</h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		。
		。
		。
		。

        <span class="token comment">//绑定点击事件</span>
        R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>nav_view<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//click函数</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;nav_view onClick&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//扩展函数 能够直接根据一个id为view绑定一个监听事件</span>
<span class="token keyword">fun</span> Int<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Activity <span class="token punctuation">,</span> click<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>
    activity<span class="token punctuation">.</span>findViewById<span class="token operator">&lt;</span>View<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;onClick&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kotlin-一次四则运算计算器" tabindex="-1"><a class="header-anchor" href="#kotlin-一次四则运算计算器" aria-hidden="true">#</a> kotlin 一次四则运算计算器</h2><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>firstapp<span class="token punctuation">.</span>lesson

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Exception

<span class="token comment">/**
 *@author: hairly owl
 *@time:2021/10/13 21:22
 *@version: 1.00
 *@description: 一次四则运算计算机器
 */</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;==========请输入你的表达式==========&quot;</span></span><span class="token punctuation">)</span>
        <span class="token comment">//接受控制台输入数据</span>
        <span class="token keyword">val</span> input<span class="token operator">:</span>String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//判空的校验</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            input<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
                <span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">input</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">res</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;是否继续使用(y/n)&quot;</span></span><span class="token punctuation">)</span>
                <span class="token keyword">val</span> cmd <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                cmd<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//强制退出程序</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token comment">//继续使用</span>

                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token operator">:</span>Exception<span class="token punctuation">)</span><span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//打印异常</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//四则运算函数</span>
<span class="token keyword">fun</span> <span class="token function">calculate</span><span class="token punctuation">(</span>input<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;+&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//加法</span>
        <span class="token comment">//数据处理</span>
        <span class="token keyword">val</span> nums <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;+&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">//去掉空格 分割操作符左右</span>
        <span class="token keyword">return</span> <span class="token function">operate</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;+&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;-&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//减法</span>
        <span class="token keyword">val</span> nums <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;-&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">operate</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;-&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;*&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//减法</span>
        <span class="token keyword">val</span> nums <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;*&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">operate</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;*&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//减法</span>
        <span class="token keyword">val</span> nums <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">operate</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">&quot;/&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;error: 您输入的表达式有误&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//计算函数</span>
<span class="token keyword">fun</span> <span class="token function">operate</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> Double<span class="token punctuation">,</span> num2<span class="token operator">:</span> Double<span class="token punctuation">,</span> <span class="token keyword">operator</span><span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">when</span><span class="token punctuation">(</span><span class="token keyword">operator</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//kotlin中的when代替 java中的switch-case</span>
        <span class="token string-literal singleline"><span class="token string">&quot;+&quot;</span></span> <span class="token operator">-&gt;</span> num1 <span class="token operator">+</span> num2
        <span class="token string-literal singleline"><span class="token string">&quot;-&quot;</span></span> <span class="token operator">-&gt;</span> num1 <span class="token operator">-</span> num2
        <span class="token string-literal singleline"><span class="token string">&quot;*&quot;</span></span> <span class="token operator">-&gt;</span> num1 <span class="token operator">*</span> num2
        <span class="token string-literal singleline"><span class="token string">&quot;/&quot;</span></span> <span class="token operator">-&gt;</span> num1 <span class="token operator">/</span> num2
        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token number">0.0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,185),m={href:"https://blog.csdn.net/white1148/category_11379150.html",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.imooc.com/learn/1307",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/xmllein/ap-first",target:"_blank",rel:"noopener noreferrer"};function h(f,y){const s=e("ExternalLinkIcon");return o(),i("div",null,[v,n("ul",null,[n("li",null,[n("a",m,[a("white1148 博客"),t(s)])]),n("li",null,[n("a",b,[a("2021Android 从零入门到实战(Kotlin 版) 视频"),t(s)])]),n("li",null,[n("a",g,[a("github 源码"),t(s)])])])])}const w=p(d,[["render",h],["__file","index.html.vue"]]);export{w as default};
